
LoRa_P2P_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b1c  08007b1c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b24  08007b24  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000006c  08007b98  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08007b98  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e93  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004249  00000000  00000000  00039f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0003e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  0003fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007b4c  00000000  00000000  00041258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7eb  00000000  00000000  00048da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeddb  00000000  00000000  0006558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011436a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f70  00000000  00000000  001143bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000006c 	.word	0x2000006c
 800015c:	00000000 	.word	0x00000000
 8000160:	08007390 	.word	0x08007390

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000070 	.word	0x20000070
 800017c:	08007390 	.word	0x08007390

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <color>:
 *  @param uint8_t bf If you want bf or not.
 *  @return Void.
 */
void
color(color_e color, bf_e bf)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	printf("\033[%d;3%dm", bf, color);
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	4619      	mov	r1, r3
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <color+0x24>)
 800053c:	f005 fea6 	bl	800628c <iprintf>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	080073a8 	.word	0x080073a8

0800054c <colorDefault>:
 *
 *  @return Void.
 */
void
colorDefault(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	printf("\033[0;37m");
 8000550:	4802      	ldr	r0, [pc, #8]	; (800055c <colorDefault+0x10>)
 8000552:	f005 fe9b 	bl	800628c <iprintf>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	080073b4 	.word	0x080073b4

08000560 <delayMicroseconds>:
/** @brief Delay in microseconds.
 *
 *  @return Void.
 */
void delayMicroseconds(uint32_t us)
{
 8000560:	b490      	push	{r4, r7}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint32_t elapsed = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
	uint32_t lastCount = DWT->CYCCNT;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <delayMicroseconds+0x60>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]

	for (;;) {
		register uint32_t current_count = DWT->CYCCNT;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <delayMicroseconds+0x60>)
 8000574:	685c      	ldr	r4, [r3, #4]
		uint32_t elapsed_us;

		// measure the time elapsed since the last time we checked
		elapsed += current_count - lastCount;
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	1ae3      	subs	r3, r4, r3
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	4413      	add	r3, r2
 800057e:	617b      	str	r3, [r7, #20]
		lastCount = current_count;
 8000580:	613c      	str	r4, [r7, #16]

		// convert to microseconds
		elapsed_us = elapsed / usTicks;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <delayMicroseconds+0x64>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	fbb2 f3f3 	udiv	r3, r2, r3
 800058c:	60fb      	str	r3, [r7, #12]
		if (elapsed_us >= us)
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d20d      	bcs.n	80005b2 <delayMicroseconds+0x52>
			break;

		// reduce the delay by the elapsed time
		us -= elapsed_us;
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	607b      	str	r3, [r7, #4]

		// keep fractional microseconds for the next iteration
		elapsed %= usTicks;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <delayMicroseconds+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80005a8:	fb01 f202 	mul.w	r2, r1, r2
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	617b      	str	r3, [r7, #20]
	for (;;) {
 80005b0:	e7df      	b.n	8000572 <delayMicroseconds+0x12>
			break;
 80005b2:	bf00      	nop
	}
}
 80005b4:	bf00      	nop
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc90      	pop	{r4, r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e0001000 	.word	0xe0001000
 80005c4:	20000088 	.word	0x20000088

080005c8 <delay>:
/** @brief Delay in milliseconds.
 *
 *  @return Void.
 */
void delay(uint32_t ms)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	while (ms--)
 80005d0:	e003      	b.n	80005da <delay+0x12>
		delayMicroseconds(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f7ff ffc3 	bl	8000560 <delayMicroseconds>
	while (ms--)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1e5a      	subs	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f6      	bne.n	80005d2 <delay+0xa>
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <cycleCounterInit>:
 *
 *  @return Void.
 */
void
cycleCounterInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	usTicks = SystemCoreClock / 1000000;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <cycleCounterInit+0x34>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <cycleCounterInit+0x38>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	0c9b      	lsrs	r3, r3, #18
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <cycleCounterInit+0x3c>)
 8000602:	6013      	str	r3, [r2, #0]

	// enable DWT access
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <cycleCounterInit+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <cycleCounterInit+0x40>)
 800060a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800060e:	60d3      	str	r3, [r2, #12]
	// enable the CPU cycle counter
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <cycleCounterInit+0x44>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <cycleCounterInit+0x44>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	20000000 	.word	0x20000000
 8000628:	431bde83 	.word	0x431bde83
 800062c:	20000088 	.word	0x20000088
 8000630:	e000edf0 	.word	0xe000edf0
 8000634:	e0001000 	.word	0xe0001000

08000638 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000644:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4313      	orrs	r3, r2
 800064e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065c:	68fb      	ldr	r3, [r7, #12]
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff ffdb 	bl	8000638 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2002      	movs	r0, #2
 8000684:	f7ff ffd8 	bl	8000638 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|PROBE4_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <MX_GPIO_Init+0x7c>)
 8000690:	f001 fbf4 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PROBE3_Pin|PROBE2_Pin|PROBE1_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f001 fbed 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|PROBE4_Pin;
 80006a2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80006a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <MX_GPIO_Init+0x7c>)
 80006ba:	f001 fa7f 	bl	8001bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PROBE3_Pin|PROBE2_Pin|PROBE1_Pin;
 80006be:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f001 fa70 	bl	8001bbc <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	48000400 	.word	0x48000400

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000760:	f7ff ffc2 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000790:	f023 0218 	bic.w	r2, r3, #24
 8000794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <LL_AHB2_GRP1_EnableClock>:
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4013      	ands	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
	...

080007dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b0c6      	sub	sp, #280	; 0x118
 80007e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007e2:	f000 fe55 	bl	8001490 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007e6:	f000 f897 	bl	8000918 <SystemClock_Config>
	 */

	//	GPIO_InitTypeDef GPIO_InitStruct = {0};

	// Enable GPIO Clocks
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff ffdd 	bl	80007aa <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	2002      	movs	r0, #2
 80007f2:	f7ff ffda 	bl	80007aa <LL_AHB2_GRP1_EnableClock>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	 */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	SysTick_Config(SystemCoreClock / 1000);
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <main+0x124>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a42      	ldr	r2, [pc, #264]	; (8000904 <main+0x128>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	099b      	lsrs	r3, r3, #6
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff9a 	bl	800073c <SysTick_Config>
	cycleCounterInit();
 8000808:	f7ff fef2 	bl	80005f0 <cycleCounterInit>
	MX_GPIO_Init();
 800080c:	f7ff ff2c 	bl	8000668 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000810:	f000 fd12 	bl	8001238 <MX_USART1_UART_Init>
	MX_SUBGHZ_Init();
 8000814:	f000 fbba 	bl	8000f8c <MX_SUBGHZ_Init>
	BSP_LED_Init();
 8000818:	f000 fb16 	bl	8000e48 <BSP_LED_Init>
	/* USER CODE BEGIN 2 */

	color(GREEN, YES);
 800081c:	2101      	movs	r1, #1
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff fe80 	bl	8000524 <color>
	printf("\n\rPING PONG\r\nAPP_VERSION=0.0.1\r\n---------------\r\n");
 8000824:	4838      	ldr	r0, [pc, #224]	; (8000908 <main+0x12c>)
 8000826:	f005 fdb7 	bl	8006398 <puts>
	printf("LORA_MODULATION\r\nLORA_BW=%d Hz\r\nLORA_SF=%d\r\n", (1 << LORA_BANDWIDTH) * 125, LORA_SPREADING_FACTOR);
 800082a:	2207      	movs	r2, #7
 800082c:	217d      	movs	r1, #125	; 0x7d
 800082e:	4837      	ldr	r0, [pc, #220]	; (800090c <main+0x130>)
 8000830:	f005 fd2c 	bl	800628c <iprintf>
	colorDefault();
 8000834:	f7ff fe8a 	bl	800054c <colorDefault>
	radioInit();
 8000838:	f000 f8c8 	bl	80009cc <radioInit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// get random number
	uint32_t rnd = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000842:	2300      	movs	r3, #0
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f004 fed9 	bl	8005600 <SUBGRF_SetDioIrqParams>
	rnd = SUBGRF_GetRandom();
 800084e:	f004 fd60 	bl	8005312 <SUBGRF_GetRandom>
 8000852:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	fsm.subState = SSTATE_NULL;
 8000856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800085a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
	fsm.rxTimeout = 3000; // 3000 ms
 8000862:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000866:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800086a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800086e:	605a      	str	r2, [r3, #4]
	fsm.rxMargin = 200;   // 200 ms
 8000870:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000874:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000878:	22c8      	movs	r2, #200	; 0xc8
 800087a:	609a      	str	r2, [r3, #8]
	fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 800087c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000880:	0d9a      	lsrs	r2, r3, #22
 8000882:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000886:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800088a:	60da      	str	r2, [r3, #12]
	printf("rand=%lu\r\n", fsm.randomDelay);
 800088c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000890:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	4619      	mov	r1, r3
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <main+0x134>)
 800089a:	f005 fcf7 	bl	800628c <iprintf>

	delay(fsm.randomDelay);
 800089e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe8d 	bl	80005c8 <delay>
	SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 80008ae:	2300      	movs	r3, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	f240 2142 	movw	r1, #578	; 0x242
 80008b6:	f240 2042 	movw	r0, #578	; 0x242
 80008ba:	f004 fea1 	bl	8005600 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
			IRQ_RADIO_NONE,
			IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80008be:	2100      	movs	r1, #0
 80008c0:	2001      	movs	r0, #1
 80008c2:	f005 fb2d 	bl	8005f20 <SUBGRF_SetSwitch>
	SUBGRF_SetRx(fsm.rxTimeout << 6);
 80008c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fda0 	bl	8005418 <SUBGRF_SetRx>
	fsm.subState = SSTATE_RX;
 80008d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		eventReceptor = NULL;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <main+0x138>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
		while (eventReceptor == NULL);
 80008ea:	bf00      	nop
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <main+0x138>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0fb      	beq.n	80008ec <main+0x110>
		eventReceptor(&fsm);
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <main+0x138>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	463a      	mov	r2, r7
 80008fa:	4610      	mov	r0, r2
 80008fc:	4798      	blx	r3
		eventReceptor = NULL;
 80008fe:	e7f1      	b.n	80008e4 <main+0x108>
 8000900:	20000000 	.word	0x20000000
 8000904:	10624dd3 	.word	0x10624dd3
 8000908:	0800773c 	.word	0x0800773c
 800090c:	08007770 	.word	0x08007770
 8000910:	080077a0 	.word	0x080077a0
 8000914:	2000008c 	.word	0x2000008c

08000918 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09a      	sub	sp, #104	; 0x68
 800091c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2248      	movs	r2, #72	; 0x48
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f005 fca8 	bl	800627c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	615a      	str	r2, [r3, #20]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800093e:	f001 fab5 	bl	8001eac <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff ff1c 	bl	8000780 <LL_RCC_LSE_SetDriveCapability>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <SystemClock_Config+0xb0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000950:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <SystemClock_Config+0xb0>)
 8000952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <SystemClock_Config+0xb0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000964:	2324      	movs	r3, #36	; 0x24
 8000966:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000968:	2381      	movs	r3, #129	; 0x81
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000970:	2300      	movs	r3, #0
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000974:	23b0      	movs	r3, #176	; 0xb0
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4618      	mov	r0, r3
 8000982:	f001 fd3d 	bl	8002400 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x78>
	{
		Error_Handler();
 800098c:	f000 fa56 	bl	8000e3c <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000990:	234f      	movs	r3, #79	; 0x4f
 8000992:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 f8c2 	bl	8002b38 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80009ba:	f000 fa3f 	bl	8000e3c <Error_Handler>
	}
}
 80009be:	bf00      	nop
 80009c0:	3768      	adds	r7, #104	; 0x68
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58000400 	.word	0x58000400

080009cc <radioInit>:
/**
 * @brief  Initialize the Sub-GHz radio and dependent hardware.
 * @retval None
 */
void radioInit(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 80009d2:	4829      	ldr	r0, [pc, #164]	; (8000a78 <radioInit+0xac>)
 80009d4:	f004 fbcc 	bl	8005170 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	//	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
	SUBGRF_SetRegulatorMode();
 80009d8:	f004 fd4d 	bl	8005476 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f005 f914 	bl	8005c0c <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQUENCY);
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <radioInit+0xb0>)
 80009e6:	f004 fe67 	bl	80056b8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 80009ea:	200e      	movs	r0, #14
 80009ec:	f005 fac0 	bl	8005f70 <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f004 fd31 	bl	8005458 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f004 fea4 	bl	8005744 <SUBGRF_SetPacketType>

	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80009fc:	2114      	movs	r1, #20
 80009fe:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8000a02:	f005 f999 	bl	8005d38 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8000a06:	2124      	movs	r1, #36	; 0x24
 8000a08:	f240 7041 	movw	r0, #1857	; 0x741
 8000a0c:	f005 f994 	bl	8005d38 <SUBGRF_WriteRegister>

	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8000a10:	2301      	movs	r3, #1
 8000a12:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8000a14:	2304      	movs	r3, #4
 8000a16:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODINGRATE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	77bb      	strb	r3, [r7, #30]
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 8000a20:	2307      	movs	r3, #7
 8000a22:	773b      	strb	r3, [r7, #28]
	SUBGRF_SetModulationParams(&modulationParams);
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f004 ff80 	bl	800592c <SUBGRF_SetModulationParams>

	packetParams.PacketType = PACKET_TYPE_LORA;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <radioInit+0xb4>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <radioInit+0xb4>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <radioInit+0xb4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <radioInit+0xb4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <radioInit+0xb4>)
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <radioInit+0xb4>)
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <radioInit+0xb4>)
 8000a52:	f005 f83d 	bl	8005ad0 <SUBGRF_SetPacketParams>

	//SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8000a56:	f240 7036 	movw	r0, #1846	; 0x736
 8000a5a:	f005 f981 	bl	8005d60 <SUBGRF_ReadRegister>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	f240 7036 	movw	r0, #1846	; 0x736
 8000a6c:	f005 f964 	bl	8005d38 <SUBGRF_WriteRegister>
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	08000a85 	.word	0x08000a85
 8000a7c:	3689cac0 	.word	0x3689cac0
 8000a80:	20000090 	.word	0x20000090

08000a84 <RadioOnDioIrq>:
 * @brief  Receive data trough SUBGHZSPI peripheral
 * @param  radioIrq  interrupt pending status information
 * @retval None
 */
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
	switch (radioIrq)
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a94:	d013      	beq.n	8000abe <RadioOnDioIrq+0x3a>
 8000a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a9a:	dc26      	bgt.n	8000aea <RadioOnDioIrq+0x66>
 8000a9c:	2b40      	cmp	r3, #64	; 0x40
 8000a9e:	d020      	beq.n	8000ae2 <RadioOnDioIrq+0x5e>
 8000aa0:	2b40      	cmp	r3, #64	; 0x40
 8000aa2:	dc22      	bgt.n	8000aea <RadioOnDioIrq+0x66>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d002      	beq.n	8000aae <RadioOnDioIrq+0x2a>
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d004      	beq.n	8000ab6 <RadioOnDioIrq+0x32>
		break;
	case IRQ_CRC_ERROR:
		eventReceptor = eventRxError;
		break;
	default:
		break;
 8000aac:	e01d      	b.n	8000aea <RadioOnDioIrq+0x66>
		eventReceptor = eventTxDone;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <RadioOnDioIrq+0x74>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <RadioOnDioIrq+0x78>)
 8000ab2:	601a      	str	r2, [r3, #0]
		break;
 8000ab4:	e01c      	b.n	8000af0 <RadioOnDioIrq+0x6c>
		eventReceptor = eventRxDone;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <RadioOnDioIrq+0x74>)
 8000ab8:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <RadioOnDioIrq+0x7c>)
 8000aba:	601a      	str	r2, [r3, #0]
		break;
 8000abc:	e018      	b.n	8000af0 <RadioOnDioIrq+0x6c>
		if (SUBGRF_GetOperatingMode() == MODE_TX)
 8000abe:	f004 fb99 	bl	80051f4 <SUBGRF_GetOperatingMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d103      	bne.n	8000ad0 <RadioOnDioIrq+0x4c>
			eventReceptor = eventTxTimeout;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <RadioOnDioIrq+0x74>)
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <RadioOnDioIrq+0x80>)
 8000acc:	601a      	str	r2, [r3, #0]
		break;
 8000ace:	e00e      	b.n	8000aee <RadioOnDioIrq+0x6a>
		else if (SUBGRF_GetOperatingMode() == MODE_RX)
 8000ad0:	f004 fb90 	bl	80051f4 <SUBGRF_GetOperatingMode>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b05      	cmp	r3, #5
 8000ad8:	d109      	bne.n	8000aee <RadioOnDioIrq+0x6a>
			eventReceptor = eventRxTimeout;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <RadioOnDioIrq+0x74>)
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <RadioOnDioIrq+0x84>)
 8000ade:	601a      	str	r2, [r3, #0]
		break;
 8000ae0:	e005      	b.n	8000aee <RadioOnDioIrq+0x6a>
		eventReceptor = eventRxError;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <RadioOnDioIrq+0x74>)
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <RadioOnDioIrq+0x88>)
 8000ae6:	601a      	str	r2, [r3, #0]
		break;
 8000ae8:	e002      	b.n	8000af0 <RadioOnDioIrq+0x6c>
		break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <RadioOnDioIrq+0x6c>
		break;
 8000aee:	bf00      	nop
	}
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	08000b11 	.word	0x08000b11
 8000b00:	08000bd1 	.word	0x08000bd1
 8000b04:	08000d91 	.word	0x08000d91
 8000b08:	08000dc5 	.word	0x08000dc5
 8000b0c:	08000e01 	.word	0x08000e01

08000b10 <eventTxDone>:
 * @brief  Process the TX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxDone(pingPongFSM_t *const fsm)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	printf("Event TX Done\r\n\r\n");
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <eventTxDone+0x30>)
 8000b1a:	f005 fc3d 	bl	8006398 <puts>
	switch (fsm->subState)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d106      	bne.n	8000b34 <eventTxDone+0x24>
	{
	case SSTATE_TX:
		enterMasterRx(fsm);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f892 	bl	8000c50 <enterMasterRx>
		fsm->subState = SSTATE_RX;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
		break;
 8000b32:	e000      	b.n	8000b36 <eventTxDone+0x26>
	default:
		break;
 8000b34:	bf00      	nop
	}
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	080077ac 	.word	0x080077ac

08000b44 <enterMasterTx>:
 * @brief  Entry actions for the TX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterTx(pingPongFSM_t *const fsm)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	delay(fsm->rxMargin);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd39 	bl	80005c8 <delay>

	color(CYAN, YES);
 8000b56:	2101      	movs	r1, #1
 8000b58:	2006      	movs	r0, #6
 8000b5a:	f7ff fce3 	bl	8000524 <color>
	printf("Sending: PING\r\n");
 8000b5e:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <enterMasterTx+0x7c>)
 8000b60:	f005 fc1a 	bl	8006398 <puts>
	colorDefault();
 8000b64:	f7ff fcf2 	bl	800054c <colorDefault>
	printf("Master Tx start\r\n");
 8000b68:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <enterMasterTx+0x80>)
 8000b6a:	f005 fc15 	bl	8006398 <puts>
	SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2200      	movs	r2, #0
 8000b72:	f240 2101 	movw	r1, #513	; 0x201
 8000b76:	f240 2001 	movw	r0, #513	; 0x201
 8000b7a:	f004 fd41 	bl	8005600 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
			IRQ_RADIO_NONE,
			IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2001      	movs	r0, #1
 8000b82:	f005 f9cd 	bl	8005f20 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000b86:	f640 0089 	movw	r0, #2185	; 0x889
 8000b8a:	f005 f8e9 	bl	8005d60 <SUBGRF_ReadRegister>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	f640 0089 	movw	r0, #2185	; 0x889
 8000b9c:	f005 f8cc 	bl	8005d38 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = 0x4;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <enterMasterTx+0x84>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <enterMasterTx+0x84>)
 8000ba8:	f004 ff92 	bl	8005ad0 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload((uint8_t*)"PING", 4, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <enterMasterTx+0x88>)
 8000bb2:	f004 fb5b 	bl	800526c <SUBGRF_SendPayload>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	080077c0 	.word	0x080077c0
 8000bc4:	080077d0 	.word	0x080077d0
 8000bc8:	20000090 	.word	0x20000090
 8000bcc:	080077e4 	.word	0x080077e4

08000bd0 <eventRxDone>:
 * @brief  Process the RX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxDone(pingPongFSM_t *const fsm)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	printf("Event RX Done\r\n");
 8000bd8:	481a      	ldr	r0, [pc, #104]	; (8000c44 <eventRxDone+0x74>)
 8000bda:	f005 fbdd 	bl	8006398 <puts>
	switch (fsm->subState)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d129      	bne.n	8000c3a <eventRxDone+0x6a>
	{
	case SSTATE_RX:
		transitionRxDone(fsm);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f85a 	bl	8000ca0 <transitionRxDone>
		if (strtol(fsm->rxBuffer, NULL, 10) != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3310      	adds	r3, #16
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 fc53 	bl	80064a0 <strtol>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d018      	beq.n	8000c32 <eventRxDone+0x62>
		{
			BSP_LED_Toggle();
 8000c00:	f000 f93e 	bl	8000e80 <BSP_LED_Toggle>
			while((systickCounter % 1000) != 0);
 8000c04:	bf00      	nop
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <eventRxDone+0x78>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <eventRxDone+0x7c>)
 8000c0e:	fba2 1203 	umull	r1, r2, r2, r3
 8000c12:	0992      	lsrs	r2, r2, #6
 8000c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c18:	fb01 f202 	mul.w	r2, r1, r2
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f0      	bne.n	8000c06 <eventRxDone+0x36>
			enterMasterTx(fsm);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff8d 	bl	8000b44 <enterMasterTx>
			fsm->subState = SSTATE_TX;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			enterMasterRx(fsm);
		}
		break;
 8000c30:	e004      	b.n	8000c3c <eventRxDone+0x6c>
			enterMasterRx(fsm);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f80c 	bl	8000c50 <enterMasterRx>
		break;
 8000c38:	e000      	b.n	8000c3c <eventRxDone+0x6c>
	default:
		break;
 8000c3a:	bf00      	nop
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	080077ec 	.word	0x080077ec
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	10624dd3 	.word	0x10624dd3

08000c50 <enterMasterRx>:
 * @brief  Entry actions for the RX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterRx(pingPongFSM_t *const fsm)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	printf("Master Rx start\r\n");
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <enterMasterRx+0x48>)
 8000c5a:	f005 fb9d 	bl	8006398 <puts>
	SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2200      	movs	r2, #0
 8000c62:	f240 2162 	movw	r1, #610	; 0x262
 8000c66:	f240 2062 	movw	r0, #610	; 0x262
 8000c6a:	f004 fcc9 	bl	8005600 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE,
			IRQ_RADIO_NONE );
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2001      	movs	r0, #1
 8000c72:	f005 f955 	bl	8005f20 <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <enterMasterRx+0x4c>)
 8000c78:	22ff      	movs	r2, #255	; 0xff
 8000c7a:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <enterMasterRx+0x4c>)
 8000c7e:	f004 ff27 	bl	8005ad0 <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	019b      	lsls	r3, r3, #6
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 fbc5 	bl	8005418 <SUBGRF_SetRx>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	080077fc 	.word	0x080077fc
 8000c9c:	20000090 	.word	0x20000090

08000ca0 <transitionRxDone>:
 * @brief  Transition actions executed on every RX Done event (helper function)
 * @param  fsm pointer to FSM context
 * @retval None
 */
void transitionRxDone(pingPongFSM_t *const fsm)
{
 8000ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ca4:	b08b      	sub	sp, #44	; 0x2c
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	466b      	mov	r3, sp
 8000cac:	461e      	mov	r6, r3
	PacketStatus_t packetStatus;

	// Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
	SUBGRF_WriteRegister(0x0920, 0x00);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f44f 6012 	mov.w	r0, #2336	; 0x920
 8000cb4:	f005 f840 	bl	8005d38 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8000cb8:	f640 1044 	movw	r0, #2372	; 0x944
 8000cbc:	f005 f850 	bl	8005d60 <SUBGRF_ReadRegister>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f640 1044 	movw	r0, #2372	; 0x944
 8000cce:	f005 f833 	bl	8005d38 <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t *)fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f103 0010 	add.w	r0, r3, #16
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f004 faa1 	bl	8005228 <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 ffd2 	bl	8005c94 <SUBGRF_GetPacketStatus>

	char rxMsg[fsm->rxSize];
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 1110 	ldrb.w	r1, [r3, #272]	; 0x110
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfc:	b2cb      	uxtb	r3, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4698      	mov	r8, r3
 8000d02:	4691      	mov	r9, r2
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d18:	b2cb      	uxtb	r3, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	461c      	mov	r4, r3
 8000d1e:	4615      	mov	r5, r2
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	00eb      	lsls	r3, r5, #3
 8000d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d2e:	00e2      	lsls	r2, r4, #3
 8000d30:	460b      	mov	r3, r1
 8000d32:	3307      	adds	r3, #7
 8000d34:	08db      	lsrs	r3, r3, #3
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	ebad 0d03 	sub.w	sp, sp, r3
 8000d3c:	466b      	mov	r3, sp
 8000d3e:	3300      	adds	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
	memcpy(rxMsg, fsm->rxBuffer, fsm->rxSize);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f103 0110 	add.w	r1, r3, #16
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8000d4e:	461a      	mov	r2, r3
 8000d50:	6a38      	ldr	r0, [r7, #32]
 8000d52:	f005 fa85 	bl	8006260 <memcpy>
	color(RED, YES);
 8000d56:	2101      	movs	r1, #1
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fbe3 	bl	8000524 <color>
	printf("Actual Message: %s\r\n", rxMsg);
 8000d5e:	6a39      	ldr	r1, [r7, #32]
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <transitionRxDone+0xe8>)
 8000d62:	f005 fa93 	bl	800628c <iprintf>
	colorDefault();
 8000d66:	f7ff fbf1 	bl	800054c <colorDefault>
	printf("RssiValue=%d dBm, SnrValue=%d Hz\r\n\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8000d6a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <transitionRxDone+0xec>)
 8000d78:	f005 fa88 	bl	800628c <iprintf>
 8000d7c:	46b5      	mov	sp, r6
}
 8000d7e:	bf00      	nop
 8000d80:	372c      	adds	r7, #44	; 0x2c
 8000d82:	46bd      	mov	sp, r7
 8000d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d88:	08007810 	.word	0x08007810
 8000d8c:	08007828 	.word	0x08007828

08000d90 <eventTxTimeout>:
 * @brief  Process the TX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxTimeout(pingPongFSM_t *const fsm)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	printf("Event TX Timeout\r\n");
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <eventTxTimeout+0x30>)
 8000d9a:	f005 fafd 	bl	8006398 <puts>
	switch (fsm->subState)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d106      	bne.n	8000db4 <eventTxTimeout+0x24>
	{
	case SSTATE_TX:
		enterMasterRx(fsm);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ff52 	bl	8000c50 <enterMasterRx>
		fsm->subState = SSTATE_RX;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
		break;
 8000db2:	e000      	b.n	8000db6 <eventTxTimeout+0x26>
	default:
		break;
 8000db4:	bf00      	nop
	}
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08007850 	.word	0x08007850

08000dc4 <eventRxTimeout>:
 * @brief  Process the RX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxTimeout(pingPongFSM_t *const fsm)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	printf("Event RX Timeout\r\n");
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <eventRxTimeout+0x38>)
 8000dce:	f005 fae3 	bl	8006398 <puts>

	switch (fsm->subState)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10b      	bne.n	8000df2 <eventRxTimeout+0x2e>
	{
	case SSTATE_RX:
		delay(fsm->randomDelay);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbf2 	bl	80005c8 <delay>
		enterMasterTx(fsm);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fead 	bl	8000b44 <enterMasterTx>
		fsm->subState = SSTATE_TX;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2202      	movs	r2, #2
 8000dee:	701a      	strb	r2, [r3, #0]
		break;
 8000df0:	e000      	b.n	8000df4 <eventRxTimeout+0x30>
	default:
		break;
 8000df2:	bf00      	nop
	}
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08007864 	.word	0x08007864

08000e00 <eventRxError>:
 * @brief  Process the RX Error event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxError(pingPongFSM_t *const fsm)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	printf("Event Rx Error\r\n");
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <eventRxError+0x38>)
 8000e0a:	f005 fac5 	bl	8006398 <puts>
	switch (fsm->subState)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d10b      	bne.n	8000e2e <eventRxError+0x2e>
	{
	case SSTATE_RX:
		delay(fsm->randomDelay);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fbd4 	bl	80005c8 <delay>
		enterMasterTx(fsm);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff fe8f 	bl	8000b44 <enterMasterTx>
		fsm->subState = SSTATE_TX;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2202      	movs	r2, #2
 8000e2a:	701a      	strb	r2, [r3, #0]
		break;
 8000e2c:	e000      	b.n	8000e30 <eventRxError+0x30>
	default:
		break;
 8000e2e:	bf00      	nop
	}
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	08007878 	.word	0x08007878

08000e3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <BSP_LED_Init>:
 */
#include "seeed-e5-mini_bsp.h"

void
BSP_LED_Init(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |=	RCC_AHB2ENR_GPIOBEN;
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &=	~GPIO_MODER_MODE5;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <BSP_LED_Init+0x34>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <BSP_LED_Init+0x34>)
 8000e62:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e66:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=	GPIO_MODER_MODE5_0;
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <BSP_LED_Init+0x34>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <BSP_LED_Init+0x34>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	48000400 	.word	0x48000400

08000e80 <BSP_LED_Toggle>:
	GPIOB->BSRR	|= GPIO_BSRR_BS5;
}

void
BSP_LED_Toggle(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	GPIOB->ODR	^= GPIO_ODR_OD5;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <BSP_LED_Toggle+0x18>)
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <BSP_LED_Toggle+0x18>)
 8000e8a:	f083 0320 	eor.w	r3, r3, #32
 8000e8e:	6153      	str	r3, [r2, #20]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	48000400 	.word	0x48000400

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	systickCounter++;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Handler+0x1c>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <SysTick_Handler+0x1c>)
 8000efc:	801a      	strh	r2, [r3, #0]
	/* USER CODE END SysTick_IRQn 0 */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000a4 	.word	0x200000a4

08000f0c <RTC_WKUP_IRQHandler>:

/**
 * @brief This function handles RTC Wakeup Interrupt.
 */
void RTC_WKUP_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_WKUP_IRQn 0 */

	/* USER CODE END RTC_WKUP_IRQn 0 */
	HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <RTC_WKUP_IRQHandler+0x10>)
 8000f12:	f002 facd 	bl	80034b0 <HAL_RTCEx_WakeUpTimerIRQHandler>
	/* USER CODE BEGIN RTC_WKUP_IRQn 1 */

	/* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000a8 	.word	0x200000a8

08000f20 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 Channel 1 Interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Channel1_IRQHandler+0x10>)
 8000f26:	f000 fd17 	bl	8001958 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000188 	.word	0x20000188

08000f34 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 Interrupt.
 */
void USART1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <USART1_IRQHandler+0x10>)
 8000f3a:	f003 f803 	bl	8003f44 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000f8 	.word	0x200000f8

08000f48 <SUBGHZ_Radio_IRQHandler>:

/**
 * @brief This function handles SUBGHZ Radio Interrupt.
 */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

	/* USER CODE END SUBGHZ_Radio_IRQn 0 */
	HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000f4e:	f002 fde9 	bl	8003b24 <HAL_SUBGHZ_IRQHandler>
	/* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

	/* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000e0 	.word	0x200000e0

08000f5c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f80:	68fb      	ldr	r3, [r7, #12]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SUBGHZ_Init+0x20>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_SUBGHZ_Init+0x20>)
 8000f98:	f002 fb48 	bl	800362c <HAL_SUBGHZ_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000fa2:	f7ff ff4b 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000e0 	.word	0x200000e0

08000fb0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff ffcf 	bl	8000f5c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2032      	movs	r0, #50	; 0x32
 8000fc4:	f000 fb39 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000fc8:	2032      	movs	r0, #50	; 0x32
 8000fca:	f000 fb50 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_GetTick+0x24>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000ffe:	f000 f8bb 	bl	8001178 <TIMER_IF_GetTimerValue>
 8001002:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000ec 	.word	0x200000ec

08001014 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00a      	b.n	800103c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001026:	f3af 8000 	nop.w
 800102a:	4601      	mov	r1, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf0      	blt.n	8001026 <_read+0x12>
	}

return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e009      	b.n	8001074 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f9c3 	bl	80013f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf1      	blt.n	8001060 <_write+0x12>
	}
	return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_close>:

int _close(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	return -1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ac:	605a      	str	r2, [r3, #4]
	return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <_isatty>:

int _isatty(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b085      	sub	sp, #20
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
	return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f005 f878 	bl	800620c <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20010000 	.word	0x20010000
 8001148:	00000400 	.word	0x00000400
 800114c:	200000f0 	.word	0x200000f0
 8001150:	20000210 	.word	0x20000210

08001154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <TIMER_IF_GetTimerValue>:
  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
}

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <TIMER_IF_GetTimerValue+0x24>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800118a:	f000 f809 	bl	80011a0 <GetTimerTicks>
 800118e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000f4 	.word	0x200000f4

080011a0 <GetTimerTicks>:

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}

static inline uint32_t GetTimerTicks(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <GetTimerTicks+0x34>)
 80011a8:	f7ff ffda 	bl	8001160 <LL_RTC_TIME_GetSubSecond>
 80011ac:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80011ae:	e003      	b.n	80011b8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <GetTimerTicks+0x34>)
 80011b2:	f7ff ffd5 	bl	8001160 <LL_RTC_TIME_GetSubSecond>
 80011b6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <GetTimerTicks+0x34>)
 80011ba:	f7ff ffd1 	bl	8001160 <LL_RTC_TIME_GetSubSecond>
 80011be:	4602      	mov	r2, r0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d1f4      	bne.n	80011b0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40002800 	.word	0x40002800

080011d8 <LL_AHB2_GRP1_EnableClock>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011fc:	68fb      	ldr	r3, [r7, #12]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <LL_APB2_GRP1_EnableClock>:
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4313      	orrs	r3, r2
 800121e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800122c:	68fb      	ldr	r3, [r7, #12]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <MX_USART1_UART_Init+0x94>)
 8001240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001282:	f002 fe0e 	bl	8003ea2 <HAL_UART_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800128c:	f7ff fdd6 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001290:	2100      	movs	r1, #0
 8001292:	480d      	ldr	r0, [pc, #52]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 8001294:	f003 fea3 	bl	8004fde <HAL_UARTEx_SetTxFifoThreshold>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800129e:	f7ff fdcd 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 80012a6:	f003 fed8 	bl	800505a <HAL_UARTEx_SetRxFifoThreshold>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b0:	f7ff fdc4 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_USART1_UART_Init+0x90>)
 80012b6:	f003 fe5a 	bl	8004f6e <HAL_UARTEx_DisableFifoMode>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f7ff fdbc 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200000f8 	.word	0x200000f8
 80012cc:	40013800 	.word	0x40013800

080012d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b096      	sub	sp, #88	; 0x58
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2238      	movs	r2, #56	; 0x38
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 ffc3 	bl	800627c <memset>
  if(uartHandle->Instance==USART1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <HAL_UART_MspInit+0xe8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d156      	bne.n	80013ae <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001300:	2301      	movs	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001304:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001308:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4618      	mov	r0, r3
 8001310:	f001 ffb4 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800131a:	f7ff fd8f 	bl	8000e3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800131e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001322:	f7ff ff71 	bl	8001208 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff ff56 	bl	80011d8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800132c:	23c0      	movs	r3, #192	; 0xc0
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800133c:	2307      	movs	r3, #7
 800133e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001344:	4619      	mov	r1, r3
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <HAL_UART_MspInit+0xec>)
 8001348:	f000 fc38 	bl	8001bbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0xf4>)
 8001350:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001354:	2212      	movs	r2, #18
 8001356:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 800135a:	2210      	movs	r2, #16
 800135c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001378:	2200      	movs	r2, #0
 800137a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001382:	480f      	ldr	r0, [pc, #60]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001384:	f000 f982 	bl	800168c <HAL_DMA_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800138e:	f7ff fd55 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 8001396:	679a      	str	r2, [r3, #120]	; 0x78
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_UART_MspInit+0xf0>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2024      	movs	r0, #36	; 0x24
 80013a4:	f000 f949 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a8:	2024      	movs	r0, #36	; 0x24
 80013aa:	f000 f960 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013ae:	bf00      	nop
 80013b0:	3758      	adds	r7, #88	; 0x58
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013800 	.word	0x40013800
 80013bc:	48000400 	.word	0x48000400
 80013c0:	20000188 	.word	0x20000188
 80013c4:	40020008 	.word	0x40020008

080013c8 <serialWrite>:
 *  @param ch The character to send.
 *  @return Void.
 */
void
serialWrite(uint8_t ch)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	while (!(USART1->ISR & USART_ISR_TC)){}	// waits for TX buffer to become empty
 80013d2:	bf00      	nop
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <serialWrite+0x28>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f9      	beq.n	80013d4 <serialWrite+0xc>
	USART1->TDR = ch;						// transfers the value of the data register into ch
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <serialWrite+0x28>)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40013800 	.word	0x40013800

080013f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
//	#define GETCHAR_PROTOTYPE int fgetc(FILE * f)
#endif

PUTCHAR_PROTOTYPE{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	serialWrite(ch);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ffe1 	bl	80013c8 <serialWrite>
	return ch;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <HAL_UART_TxCpltCallback+0x24>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d103      	bne.n	800142a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_UART_TxCpltCallback+0x28>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2000      	movs	r0, #0
 8001428:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40013800 	.word	0x40013800
 8001438:	200001e8 	.word	0x200001e8

0800143c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800143e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001440:	f7ff fe88 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800146a:	f004 fed5 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff f9b5 	bl	80007dc <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   r0, =_estack
 8001474:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001480:	08007b2c 	.word	0x08007b2c
  ldr r2, =_sbss
 8001484:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001488:	2000020c 	.word	0x2000020c

0800148c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f8c2 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014a0:	f001 fd0e 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_Init+0x3c>)
 80014a8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f7ff fd93 	bl	8000fd6 <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fcee 	bl	8000e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <__NVIC_SetPriorityGrouping>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff4f 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff66 	bl	8001518 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ffb4 	bl	80015c0 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff83 	bl	800156c <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff59 	bl	8001534 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e08e      	b.n	80017bc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_DMA_Init+0x138>)
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d80f      	bhi.n	80016ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HAL_DMA_Init+0x13c>)
 80016b2:	4413      	add	r3, r2
 80016b4:	4a45      	ldr	r2, [pc, #276]	; (80017cc <HAL_DMA_Init+0x140>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	009a      	lsls	r2, r3, #2
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <HAL_DMA_Init+0x144>)
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
 80016c8:	e00e      	b.n	80016e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_DMA_Init+0x148>)
 80016d2:	4413      	add	r3, r2
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_DMA_Init+0x140>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	009a      	lsls	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a3c      	ldr	r2, [pc, #240]	; (80017d8 <HAL_DMA_Init+0x14c>)
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001702:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f9d2 	bl	8001ae4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001748:	d102      	bne.n	8001750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001758:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800175c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001766:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d010      	beq.n	8001792 <HAL_DMA_Init+0x106>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d80c      	bhi.n	8001792 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f9fb 	bl	8001b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	e008      	b.n	80017a4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40020407 	.word	0x40020407
 80017c8:	bffdfff8 	.word	0xbffdfff8
 80017cc:	cccccccd 	.word	0xcccccccd
 80017d0:	40020000 	.word	0x40020000
 80017d4:	bffdfbf8 	.word	0xbffdfbf8
 80017d8:	40020400 	.word	0x40020400

080017dc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e04f      	b.n	800188e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d008      	beq.n	800180c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2204      	movs	r2, #4
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e040      	b.n	800188e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 020e 	bic.w	r2, r2, #14
 800181a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800182a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	f003 021c 	and.w	r2, r3, #28
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001858:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00c      	beq.n	800187c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001870:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800187a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d005      	beq.n	80018bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2204      	movs	r2, #4
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e047      	b.n	800194c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 020e 	bic.w	r2, r2, #14
 80018ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	f003 021c 	and.w	r2, r3, #28
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001908:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001920:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800192a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
    }
  }
  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f003 031c 	and.w	r3, r3, #28
 8001978:	2204      	movs	r2, #4
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d027      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x7c>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d022      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0204 	bic.w	r2, r2, #4
 80019aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f003 021c 	and.w	r2, r3, #28
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	2104      	movs	r1, #4
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8081 	beq.w	8001acc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80019d2:	e07b      	b.n	8001acc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f003 031c 	and.w	r3, r3, #28
 80019dc:	2202      	movs	r2, #2
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03d      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x10c>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d038      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10b      	bne.n	8001a18 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 020a 	bic.w	r2, r2, #10
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <HAL_DMA_IRQHandler+0x180>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d909      	bls.n	8001a38 <HAL_DMA_IRQHandler+0xe0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 031c 	and.w	r3, r3, #28
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <HAL_DMA_IRQHandler+0x184>)
 8001a2e:	2102      	movs	r1, #2
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	6053      	str	r3, [r2, #4]
 8001a36:	e008      	b.n	8001a4a <HAL_DMA_IRQHandler+0xf2>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_DMA_IRQHandler+0x188>)
 8001a42:	2102      	movs	r1, #2
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d038      	beq.n	8001acc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001a62:	e033      	b.n	8001acc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f003 031c 	and.w	r3, r3, #28
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d02a      	beq.n	8001ace <HAL_DMA_IRQHandler+0x176>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d025      	beq.n	8001ace <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 020e 	bic.w	r2, r2, #14
 8001a90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f003 021c 	and.w	r2, r3, #28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
}
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40020080 	.word	0x40020080
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d813      	bhi.n	8001b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b04:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3b08      	subs	r3, #8
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e011      	b.n	8001b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	009a      	lsls	r2, r3, #2
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	3b08      	subs	r3, #8
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	3307      	adds	r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2201      	movs	r2, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40020407 	.word	0x40020407
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	4002081c 	.word	0x4002081c
 8001b70:	40020880 	.word	0x40020880

08001b74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b84:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	1000823f 	.word	0x1000823f
 8001bb8:	40020940 	.word	0x40020940

08001bbc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e140      	b.n	8001e4e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8132 	beq.w	8001e48 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x40>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	6939      	ldr	r1, [r7, #16]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 808c 	beq.w	8001e48 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d30:	4a4e      	ldr	r2, [pc, #312]	; (8001e6c <HAL_GPIO_Init+0x2b0>)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	2207      	movs	r2, #7
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d5a:	d00d      	beq.n	8001d78 <HAL_GPIO_Init+0x1bc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a44      	ldr	r2, [pc, #272]	; (8001e70 <HAL_GPIO_Init+0x2b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x1b8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a43      	ldr	r2, [pc, #268]	; (8001e74 <HAL_GPIO_Init+0x2b8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_GPIO_Init+0x1b4>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e004      	b.n	8001d7a <HAL_GPIO_Init+0x1be>
 8001d70:	2307      	movs	r3, #7
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_Init+0x1be>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_GPIO_Init+0x1be>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	f002 0203 	and.w	r2, r2, #3
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	4093      	lsls	r3, r2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d8a:	4938      	ldr	r1, [pc, #224]	; (8001e6c <HAL_GPIO_Init+0x2b0>)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d98:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dbc:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dc2:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de6:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001e12:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e20:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_GPIO_Init+0x2bc>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f aeb7 	bne.w	8001bcc <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	48000400 	.word	0x48000400
 8001e74:	48000800 	.word	0x48000800
 8001e78:	58000800 	.word	0x58000800

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	58000400 	.word	0x58000400

08001ec8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_PWREx_GetVoltageRange+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	58000400 	.word	0x58000400

08001ee0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef0:	d101      	bne.n	8001ef6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	58000400 	.word	0x58000400

08001f04 <LL_RCC_HSE_EnableTcxo>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_HSE_DisableTcxo>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f32:	6013      	str	r3, [r2, #0]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f4e:	d101      	bne.n	8001f54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_HSE_Enable>:
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_HSE_Disable>:
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <LL_RCC_HSE_IsReady>:
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fa8:	d101      	bne.n	8001fae <LL_RCC_HSE_IsReady+0x18>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_RCC_HSE_IsReady+0x1a>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <LL_RCC_HSI_Enable>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_HSI_Disable>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <LL_RCC_HSI_IsReady>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002002:	d101      	bne.n	8002008 <LL_RCC_HSI_IsReady+0x18>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <LL_RCC_HSI_IsReady+0x1a>
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	061b      	lsls	r3, r3, #24
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d101      	bne.n	8002052 <LL_RCC_LSE_IsReady+0x18>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_RCC_LSE_IsReady+0x1a>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d101      	bne.n	80020b4 <LL_RCC_LSI_IsReady+0x18>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <LL_RCC_LSI_IsReady+0x1a>
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80020c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6013      	str	r3, [r2, #0]
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6013      	str	r3, [r2, #0]
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d101      	bne.n	800210c <LL_RCC_MSI_IsReady+0x16>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_RCC_MSI_IsReady+0x18>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d101      	bne.n	800212c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002158:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021fe:	f023 020f 	bic.w	r2, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800230c:	d101      	bne.n	8002312 <LL_RCC_PLL_IsReady+0x18>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_RCC_PLL_IsReady+0x1a>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d101      	bne.n	800238e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d101      	bne.n	80023b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023ce:	d101      	bne.n	80023d4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f0:	d101      	bne.n	80023f6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e38b      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002412:	f7ff fece 	bl	80021b2 <LL_RCC_GetSysClkSource>
 8002416:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002418:	f7ff ffa2 	bl	8002360 <LL_RCC_PLL_GetMainSource>
 800241c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80c9 	beq.w	80025be <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x3e>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	d17b      	bne.n	8002530 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d178      	bne.n	8002530 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243e:	f7ff fe5a 	bl	80020f6 <LL_RCC_MSI_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x54>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e36a      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x72>
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	e006      	b.n	8002480 <HAL_RCC_OscConfig+0x80>
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002480:	4293      	cmp	r3, r2
 8002482:	d222      	bcs.n	80024ca <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fd51 	bl	8002f30 <RCC_SetFlashLatencyFromMSIRange>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e348      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fe4e 	bl	8002164 <LL_RCC_MSI_SetCalibTrimming>
 80024c8:	e021      	b.n	800250e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d4:	f043 0308 	orr.w	r3, r3, #8
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe35 	bl	8002164 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fd16 	bl	8002f30 <RCC_SetFlashLatencyFromMSIRange>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e30d      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800250e:	f000 fcd7 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002512:	4603      	mov	r3, r0
 8002514:	4aa1      	ldr	r2, [pc, #644]	; (800279c <HAL_RCC_OscConfig+0x39c>)
 8002516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002518:	4ba1      	ldr	r3, [pc, #644]	; (80027a0 <HAL_RCC_OscConfig+0x3a0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fd5a 	bl	8000fd6 <HAL_InitTick>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d047      	beq.n	80025bc <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	e2fc      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02c      	beq.n	8002592 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002538:	f7ff fdc1 	bl	80020be <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253c:	f7fe fd56 	bl	8000fec <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002544:	f7fe fd52 	bl	8000fec <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e2e9      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002556:	f7ff fdce 	bl	80020f6 <LL_RCC_MSI_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f1      	beq.n	8002544 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fdea 	bl	8002164 <LL_RCC_MSI_SetCalibTrimming>
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002592:	f7ff fda2 	bl	80020da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002596:	f7fe fd29 	bl	8000fec <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259e:	f7fe fd25 	bl	8000fec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e2bc      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80025b0:	f7ff fda1 	bl	80020f6 <LL_RCC_MSI_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f1      	bne.n	800259e <HAL_RCC_OscConfig+0x19e>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d05f      	beq.n	800268a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x1dc>
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d10d      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d10a      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	f7ff fcdb 	bl	8001f96 <LL_RCC_HSE_IsReady>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d050      	beq.n	8002688 <HAL_RCC_OscConfig+0x288>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d14c      	bne.n	8002688 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e29b      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d102      	bne.n	8002618 <HAL_RCC_OscConfig+0x218>
 8002612:	f7ff fca4 	bl	8001f5e <LL_RCC_HSE_Enable>
 8002616:	e00d      	b.n	8002634 <HAL_RCC_OscConfig+0x234>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002620:	d104      	bne.n	800262c <HAL_RCC_OscConfig+0x22c>
 8002622:	f7ff fc6f 	bl	8001f04 <LL_RCC_HSE_EnableTcxo>
 8002626:	f7ff fc9a 	bl	8001f5e <LL_RCC_HSE_Enable>
 800262a:	e003      	b.n	8002634 <HAL_RCC_OscConfig+0x234>
 800262c:	f7ff fca5 	bl	8001f7a <LL_RCC_HSE_Disable>
 8002630:	f7ff fc76 	bl	8001f20 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fcd6 	bl	8000fec <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fcd2 	bl	8000fec <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e269      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002656:	f7ff fc9e 	bl	8001f96 <LL_RCC_HSE_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f1      	beq.n	8002644 <HAL_RCC_OscConfig+0x244>
 8002660:	e013      	b.n	800268a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fcc3 	bl	8000fec <HAL_GetTick>
 8002666:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266a:	f7fe fcbf 	bl	8000fec <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e256      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800267c:	f7ff fc8b 	bl	8001f96 <LL_RCC_HSE_IsReady>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f1      	bne.n	800266a <HAL_RCC_OscConfig+0x26a>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04b      	beq.n	800272e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2a8>
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d113      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d110      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a8:	f7ff fca2 	bl	8001ff0 <LL_RCC_HSI_IsReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCC_OscConfig+0x2be>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e235      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fca5 	bl	8002012 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c8:	e031      	b.n	800272e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d2:	f7ff fc71 	bl	8001fb8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe fc89 	bl	8000fec <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7fe fc85 	bl	8000fec <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e21c      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80026f0:	f7ff fc7e 	bl	8001ff0 <LL_RCC_HSI_IsReady>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f1      	beq.n	80026de <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc87 	bl	8002012 <LL_RCC_HSI_SetCalibTrimming>
 8002704:	e013      	b.n	800272e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	f7ff fc65 	bl	8001fd4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fc6f 	bl	8000fec <HAL_GetTick>
 800270e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe fc6b 	bl	8000fec <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e202      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002724:	f7ff fc64 	bl	8001ff0 <LL_RCC_HSI_IsReady>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f1      	bne.n	8002712 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d06f      	beq.n	800281a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d057      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8002742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	429a      	cmp	r2, r3
 8002758:	d036      	beq.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1db      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800277c:	f7ff fc7e 	bl	800207c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002780:	f7fe fc34 	bl	8000fec <HAL_GetTick>
 8002784:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002786:	e00d      	b.n	80027a4 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7fe fc30 	bl	8000fec <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b11      	cmp	r3, #17
 8002794:	d906      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1c7      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80027a4:	f7ff fc7a 	bl	800209c <LL_RCC_LSI_IsReady>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ec      	bne.n	8002788 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	f023 0210 	bic.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c8:	f7ff fc48 	bl	800205c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fc0e 	bl	8000fec <HAL_GetTick>
 80027d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe fc0a 	bl	8000fec <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b11      	cmp	r3, #17
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1a1      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80027e6:	f7ff fc59 	bl	800209c <LL_RCC_LSI_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f1      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3d4>
 80027f0:	e013      	b.n	800281a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	f7ff fc43 	bl	800207c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fbf9 	bl	8000fec <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fe:	f7fe fbf5 	bl	8000fec <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b11      	cmp	r3, #17
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e18c      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002810:	f7ff fc44 	bl	800209c <LL_RCC_LSI_IsReady>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f1      	bne.n	80027fe <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 80d8 	beq.w	80029d8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002828:	f7ff fb5a 	bl	8001ee0 <LL_PWR_IsEnabledBkUpAccess>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002832:	f7ff fb3b 	bl	8001eac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7fe fbd9 	bl	8000fec <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe fbd5 	bl	8000fec <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e16c      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002850:	f7ff fb46 	bl	8001ee0 <LL_PWR_IsEnabledBkUpAccess>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f1      	beq.n	800283e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d07b      	beq.n	800295a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	2b85      	cmp	r3, #133	; 0x85
 8002868:	d003      	beq.n	8002872 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d109      	bne.n	8002886 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fbb1 	bl	8000fec <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fba3 	bl	8000fec <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e138      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80028b8:	f7ff fbbf 	bl	800203a <LL_RCC_LSE_IsReady>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ef      	beq.n	80028a2 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b81      	cmp	r3, #129	; 0x81
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b85      	cmp	r3, #133	; 0x85
 80028d0:	d121      	bne.n	8002916 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fb8b 	bl	8000fec <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fb7d 	bl	8000fec <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e112      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ec      	beq.n	80028ee <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002914:	e060      	b.n	80029d8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe fb69 	bl	8000fec <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fe fb5b 	bl	8000fec <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0f0      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ec      	bne.n	8002932 <HAL_RCC_OscConfig+0x532>
 8002958:	e03e      	b.n	80029d8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe fb47 	bl	8000fec <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe fb39 	bl	8000fec <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0ce      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ec      	bne.n	8002976 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fb26 	bl	8000fec <HAL_GetTick>
 80029a0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fb18 	bl	8000fec <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0ad      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80029ce:	f7ff fb34 	bl	800203a <LL_RCC_LSE_IsReady>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ef      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80a3 	beq.w	8002b28 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d076      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d14b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	f7ff fc75 	bl	80022de <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fafa 	bl	8000fec <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe faf6 	bl	8000fec <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b0a      	cmp	r3, #10
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e08d      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002a0e:	f7ff fc74 	bl	80022fa <LL_RCC_PLL_IsReady>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f1      	bne.n	80029fc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <HAL_RCC_OscConfig+0x734>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a30:	0212      	lsls	r2, r2, #8
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a44:	430a      	orrs	r2, r1
 8002a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a4e:	f7ff fc38 	bl	80022c2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fac3 	bl	8000fec <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe fabf 	bl	8000fec <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b0a      	cmp	r3, #10
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e056      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002a7c:	f7ff fc3d 	bl	80022fa <LL_RCC_PLL_IsReady>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f1      	beq.n	8002a6a <HAL_RCC_OscConfig+0x66a>
 8002a86:	e04f      	b.n	8002b28 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	f7ff fc29 	bl	80022de <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aae:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fa9c 	bl	8000fec <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fa98 	bl	8000fec <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e02f      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002aca:	f7ff fc16 	bl	80022fa <LL_RCC_PLL_IsReady>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f1      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x6b8>
 8002ad4:	e028      	b.n	8002b28 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e023      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 0203 	and.w	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d115      	bne.n	8002b24 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10e      	bne.n	8002b24 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	11c1808c 	.word	0x11c1808c

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e10f      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b89      	ldr	r3, [pc, #548]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d91b      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b86      	ldr	r3, [pc, #536]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0207 	bic.w	r2, r3, #7
 8002b62:	4984      	ldr	r1, [pc, #528]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fa3f 	bl	8000fec <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b72:	f7fe fa3b 	bl	8000fec <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0f3      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b84:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d1ef      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fb10 	bl	80021c8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fa20 	bl	8000fec <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bb0:	f7fe fa1c 	bl	8000fec <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0d4      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002bc2:	f7ff fbd8 	bl	8002376 <LL_RCC_IsActiveFlag_HPRE>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f1      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d016      	beq.n	8002c06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fb06 	bl	80021ee <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fa03 	bl	8000fec <HAL_GetTick>
 8002be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bea:	f7fe f9ff 	bl	8000fec <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e0b7      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002bfc:	f7ff fbcc 	bl	8002398 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f1      	beq.n	8002bea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff faff 	bl	800221a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe f9e6 	bl	8000fec <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c24:	f7fe f9e2 	bl	8000fec <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e09a      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c36:	f7ff fbc1 	bl	80023bc <LL_RCC_IsActiveFlag_PPRE1>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f1      	beq.n	8002c24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d017      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff faf4 	bl	8002240 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c58:	f7fe f9c8 	bl	8000fec <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c60:	f7fe f9c4 	bl	8000fec <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e07c      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c72:	f7ff fbb4 	bl	80023de <LL_RCC_IsActiveFlag_PPRE2>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f1      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d043      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002c90:	f7ff f981 	bl	8001f96 <LL_RCC_HSE_IsReady>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11e      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e066      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ca6:	f7ff fb28 	bl	80022fa <LL_RCC_PLL_IsReady>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d113      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e05b      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002cbc:	f7ff fa1b 	bl	80020f6 <LL_RCC_MSI_IsReady>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e050      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002cca:	f7ff f991 	bl	8001ff0 <LL_RCC_HSI_IsReady>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e049      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fa55 	bl	800218c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce2:	f7fe f983 	bl	8000fec <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cea:	f7fe f97f 	bl	8000fec <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e035      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d00:	f7ff fa57 	bl	80021b2 <LL_RCC_GetSysClkSource>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1ec      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d21b      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4913      	ldr	r1, [pc, #76]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f95d 	bl	8000fec <HAL_GetTick>
 8002d32:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d36:	f7fe f959 	bl	8000fec <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e011      	b.n	8002d6c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x23c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d1ef      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d56:	f000 f8b3 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <HAL_RCC_ClockConfig+0x240>)
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f936 	bl	8000fd6 <HAL_InitTick>
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	58004000 	.word	0x58004000
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8e:	f7ff fa10 	bl	80021b2 <LL_RCC_GetSysClkSource>
 8002d92:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d94:	f7ff fae4 	bl	8002360 <LL_RCC_PLL_GetMainSource>
 8002d98:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x2c>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d139      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d136      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002dac:	f7ff f9b3 	bl	8002116 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_RCC_GetSysClockFreq+0x62>
 8002db6:	f7ff f9ae 	bl	8002116 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x4e>
 8002dc0:	f7ff f9b9 	bl	8002136 <LL_RCC_MSI_GetRange>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	e005      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x5a>
 8002dce:	f7ff f9bd 	bl	800214c <LL_RCC_MSI_GetRangeAfterStandby>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a36      	ldr	r2, [pc, #216]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x8c>
 8002de2:	f7ff f998 	bl	8002116 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x7a>
 8002dec:	f7ff f9a3 	bl	8002136 <LL_RCC_MSI_GetRange>
 8002df0:	4603      	mov	r3, r0
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	e005      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x86>
 8002dfa:	f7ff f9a7 	bl	800214c <LL_RCC_MSI_GetRangeAfterStandby>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d115      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e18:	e012      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e00c      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d109      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e2c:	f7ff f886 	bl	8001f3c <LL_RCC_HSE_IsEnabledDiv2>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d102      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e001      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e3e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	f7ff f9b7 	bl	80021b2 <LL_RCC_GetSysClkSource>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d12f      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002e4a:	f7ff fa89 	bl	8002360 <LL_RCC_PLL_GetMainSource>
 8002e4e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0xde>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xe4>
 8002e5c:	e00d      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e60:	60fb      	str	r3, [r7, #12]
        break;
 8002e62:	e00d      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e64:	f7ff f86a 	bl	8001f3c <LL_RCC_HSE_IsEnabledDiv2>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e70:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002e72:	e005      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e76:	60fb      	str	r3, [r7, #12]
        break;
 8002e78:	e002      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	60fb      	str	r3, [r7, #12]
        break;
 8002e7e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e80:	f7ff fa4c 	bl	800231c <LL_RCC_PLL_GetN>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	fb03 f402 	mul.w	r4, r3, r2
 8002e8c:	f7ff fa5d 	bl	800234a <LL_RCC_PLL_GetDivider>
 8002e90:	4603      	mov	r3, r0
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	3301      	adds	r3, #1
 8002e96:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e9a:	f7ff fa4b 	bl	8002334 <LL_RCC_PLL_GetR>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	0f5b      	lsrs	r3, r3, #29
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ea8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002eaa:	697b      	ldr	r3, [r7, #20]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	08007918 	.word	0x08007918
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	01e84800 	.word	0x01e84800

08002ec0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b598      	push	{r3, r4, r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ec4:	f7ff ff5c 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4604      	mov	r4, r0
 8002eca:	f7ff f9cc 	bl	8002266 <LL_RCC_GetAHBPrescaler>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002edc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd98      	pop	{r3, r4, r7, pc}
 8002ee4:	080078b8 	.word	0x080078b8

08002ee8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b598      	push	{r3, r4, r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002eec:	f7ff ffe8 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	f7ff f9d0 	bl	8002296 <LL_RCC_GetAPB1Prescaler>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd98      	pop	{r3, r4, r7, pc}
 8002f08:	080078f8 	.word	0x080078f8

08002f0c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b598      	push	{r3, r4, r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002f10:	f7ff ffd6 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f14:	4604      	mov	r4, r0
 8002f16:	f7ff f9c9 	bl	80022ac <LL_RCC_GetAPB2Prescaler>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	0adb      	lsrs	r3, r3, #11
 8002f1e:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd98      	pop	{r3, r4, r7, pc}
 8002f2c:	080078f8 	.word	0x080078f8

08002f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f46:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002f48:	f7ff f998 	bl	800227c <LL_RCC_GetAHB3Prescaler>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9c      	lsrs	r4, r3, #18
 8002f6c:	f7fe ffac 	bl	8001ec8 <HAL_PWREx_GetVoltageRange>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4619      	mov	r1, r3
 8002f74:	4620      	mov	r0, r4
 8002f76:	f000 f80b 	bl	8002f90 <RCC_SetFlashLatency>
 8002f7a:	4603      	mov	r3, r0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	08007918 	.word	0x08007918
 8002f88:	080078b8 	.word	0x080078b8
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <RCC_SetFlashLatency+0xf4>)
 8002f9c:	f107 0320 	add.w	r3, r7, #32
 8002fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fa4:	6018      	str	r0, [r3, #0]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002faa:	4a37      	ldr	r2, [pc, #220]	; (8003088 <RCC_SetFlashLatency+0xf8>)
 8002fac:	f107 0318 	add.w	r3, r7, #24
 8002fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fb4:	6018      	str	r0, [r3, #0]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <RCC_SetFlashLatency+0xfc>)
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d11b      	bne.n	800300a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd6:	e014      	b.n	8003002 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	3338      	adds	r3, #56	; 0x38
 8002fde:	443b      	add	r3, r7
 8002fe0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d807      	bhi.n	8002ffc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	3338      	adds	r3, #56	; 0x38
 8002ff2:	443b      	add	r3, r7
 8002ff4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ffa:	e021      	b.n	8003040 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	3301      	adds	r3, #1
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2b02      	cmp	r3, #2
 8003006:	d9e7      	bls.n	8002fd8 <RCC_SetFlashLatency+0x48>
 8003008:	e01a      	b.n	8003040 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800300a:	2300      	movs	r3, #0
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	e014      	b.n	800303a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	3338      	adds	r3, #56	; 0x38
 8003016:	443b      	add	r3, r7
 8003018:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	3338      	adds	r3, #56	; 0x38
 800302a:	443b      	add	r3, r7
 800302c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003032:	e005      	b.n	8003040 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	3301      	adds	r3, #1
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	2b02      	cmp	r3, #2
 800303e:	d9e7      	bls.n	8003010 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <RCC_SetFlashLatency+0x100>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 0207 	bic.w	r2, r3, #7
 8003048:	4911      	ldr	r1, [pc, #68]	; (8003090 <RCC_SetFlashLatency+0x100>)
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003050:	f7fd ffcc 	bl	8000fec <HAL_GetTick>
 8003054:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003056:	e008      	b.n	800306a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003058:	f7fd ffc8 	bl	8000fec <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e007      	b.n	800307a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <RCC_SetFlashLatency+0x100>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003074:	429a      	cmp	r2, r3
 8003076:	d1ef      	bne.n	8003058 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3738      	adds	r7, #56	; 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	08007888 	.word	0x08007888
 8003088:	08007890 	.word	0x08007890
 800308c:	08007898 	.word	0x08007898
 8003090:	58004000 	.word	0x58004000

08003094 <LL_RCC_LSE_IsReady>:
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d101      	bne.n	80030ac <LL_RCC_LSE_IsReady+0x18>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <LL_RCC_LSE_IsReady+0x1a>
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <LL_RCC_SetUSARTClockSource>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80030be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	43db      	mvns	r3, r3
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <LL_RCC_SetI2SClockSource>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <LL_RCC_SetLPUARTClockSource>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <LL_RCC_SetI2CClockSource>:
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003152:	43db      	mvns	r3, r3
 8003154:	401a      	ands	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800315e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <LL_RCC_SetLPTIMClockSource>:
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800317a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	041b      	lsls	r3, r3, #16
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	041b      	lsls	r3, r3, #16
 8003190:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <LL_RCC_SetRNGClockSource>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80031b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <LL_RCC_SetADCClockSource>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <LL_RCC_SetRTCClockSource>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <LL_RCC_GetRTCClockSource>:
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <LL_RCC_ForceBackupDomainReset>:
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <LL_RCC_ReleaseBackupDomainReset>:
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
	...

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003288:	2300      	movs	r3, #0
 800328a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800328c:	2300      	movs	r3, #0
 800328e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d058      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800329c:	f7fe fe06 	bl	8001eac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a0:	f7fd fea4 	bl	8000fec <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80032a6:	e009      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a8:	f7fd fea0 	bl	8000fec <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	74fb      	strb	r3, [r7, #19]
        break;
 80032ba:	e006      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80032bc:	4b7b      	ldr	r3, [pc, #492]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	d1ee      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d13c      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80032d0:	f7ff ffa7 	bl	8003222 <LL_RCC_GetRTCClockSource>
 80032d4:	4602      	mov	r2, r0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	429a      	cmp	r2, r3
 80032dc:	d00f      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ec:	f7ff ffa5 	bl	800323a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f0:	f7ff ffb3 	bl	800325a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d014      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd fe70 	bl	8000fec <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800330e:	e00b      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fd fe6c 	bl	8000fec <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d902      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	74fb      	strb	r3, [r7, #19]
            break;
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003328:	f7ff feb4 	bl	8003094 <LL_RCC_LSE_IsReady>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d1ee      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff5b 	bl	80031f8 <LL_RCC_SetRTCClockSource>
 8003342:	e004      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
 8003348:	e001      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fea9 	bl	80030b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fe9e 	bl	80030b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fec0 	bl	8003110 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fee6 	bl	8003172 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fedb 	bl	8003172 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fed0 	bl	8003172 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fea9 	bl	800313a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe9e 	bl	800313a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fe93 	bl	800313a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d011      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fe5e 	bl	80030e6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003432:	d107      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fea5 	bl	80031a4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003470:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d011      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fea3 	bl	80031ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003490:	d107      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80034a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	58000400 	.word	0x58000400

080034b0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80034c6:	2204      	movs	r2, #4
 80034c8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f80a 	bl	80034e4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40002800 	.word	0x40002800

080034e4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
	...

080034f8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003508:	4904      	ldr	r1, [pc, #16]	; (800351c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	58000400 	.word	0x58000400

08003520 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800352c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	58000400 	.word	0x58000400

08003540 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a04      	ldr	r2, [pc, #16]	; (800355c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800354c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	58000400 	.word	0x58000400

08003560 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800356a:	619a      	str	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	58000400 	.word	0x58000400

08003578 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d101      	bne.n	800358c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	58000400 	.word	0x58000400

0800359c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d101      	bne.n	80035b0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	58000400 	.word	0x58000400

080035c0 <LL_RCC_RF_DisableReset>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80035c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_IsRFUnderReset>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f4:	d101      	bne.n	80035fa <LL_RCC_IsRFUnderReset+0x1a>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <LL_RCC_IsRFUnderReset+0x1c>
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <LL_EXTI_EnableIT_32_63+0x24>)
 800360e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003612:	4905      	ldr	r1, [pc, #20]	; (8003628 <LL_EXTI_EnableIT_32_63+0x24>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	58000800 	.word	0x58000800

0800362c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
    return status;
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	e04b      	b.n	80036da <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	799b      	ldrb	r3, [r3, #6]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd fcaa 	bl	8000fb0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8003662:	f7ff ffad 	bl	80035c0 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_SUBGHZ_Init+0xb8>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	0cdb      	lsrs	r3, r3, #19
 8003674:	2264      	movs	r2, #100	; 0x64
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	609a      	str	r2, [r3, #8]
      break;
 800368c:	e007      	b.n	800369e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003694:	f7ff ffa4 	bl	80035e0 <LL_RCC_IsRFUnderReset>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ee      	bne.n	800367c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800369e:	f7ff ff3f 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80036a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80036a6:	f7ff ffad 	bl	8003604 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80036aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80036ae:	f7ff ff23 	bl	80034f8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80036b2:	f7ff ff55 	bl	8003560 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 faad 	bl	8003c20 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	719a      	strb	r2, [r3, #6]

  return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000000 	.word	0x20000000

080036e8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	461a      	mov	r2, r3
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
 80036f8:	4613      	mov	r3, r2
 80036fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	799b      	ldrb	r3, [r3, #6]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d14a      	bne.n	800379c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	795b      	ldrb	r3, [r3, #5]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800370e:	2302      	movs	r3, #2
 8003710:	e045      	b.n	800379e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2202      	movs	r2, #2
 800371c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb4c 	bl	8003dbc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003724:	f7ff ff0c 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003728:	210d      	movs	r1, #13
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa98 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003730:	897b      	ldrh	r3, [r7, #10]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	4619      	mov	r1, r3
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa90 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003740:	897b      	ldrh	r3, [r7, #10]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	4619      	mov	r1, r3
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fa8a 	bl	8003c60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	82bb      	strh	r3, [r7, #20]
 8003750:	e00a      	b.n	8003768 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003752:	8abb      	ldrh	r3, [r7, #20]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fa7f 	bl	8003c60 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003762:	8abb      	ldrh	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	82bb      	strh	r3, [r7, #20]
 8003768:	8aba      	ldrh	r2, [r7, #20]
 800376a:	893b      	ldrh	r3, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d3f0      	bcc.n	8003752 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003770:	f7ff fed6 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fb45 	bl	8003e04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
 8003786:	e001      	b.n	800378c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	715a      	strb	r2, [r3, #5]

    return status;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	e000      	b.n	800379e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	461a      	mov	r2, r3
 80037b2:	460b      	mov	r3, r1
 80037b4:	817b      	strh	r3, [r7, #10]
 80037b6:	4613      	mov	r3, r2
 80037b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	799b      	ldrb	r3, [r3, #6]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d14a      	bne.n	800385e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	795b      	ldrb	r3, [r3, #5]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e045      	b.n	8003860 <HAL_SUBGHZ_ReadRegisters+0xba>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 faee 	bl	8003dbc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80037e0:	f7ff feae 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80037e4:	211d      	movs	r1, #29
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa3a 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	4619      	mov	r1, r3
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fa32 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fa2c 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003808:	2100      	movs	r1, #0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fa28 	bl	8003c60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003810:	2300      	movs	r3, #0
 8003812:	82fb      	strh	r3, [r7, #22]
 8003814:	e009      	b.n	800382a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fa77 	bl	8003d0c <SUBGHZSPI_Receive>
      pData++;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	3301      	adds	r3, #1
 8003822:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003824:	8afb      	ldrh	r3, [r7, #22]
 8003826:	3301      	adds	r3, #1
 8003828:	82fb      	strh	r3, [r7, #22]
 800382a:	8afa      	ldrh	r2, [r7, #22]
 800382c:	893b      	ldrh	r3, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d3f1      	bcc.n	8003816 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003832:	f7ff fe75 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fae4 	bl	8003e04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e001      	b.n	800384e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	715a      	strb	r2, [r3, #5]

    return status;
 800385a:	7ffb      	ldrb	r3, [r7, #31]
 800385c:	e000      	b.n	8003860 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	461a      	mov	r2, r3
 8003874:	460b      	mov	r3, r1
 8003876:	72fb      	strb	r3, [r7, #11]
 8003878:	4613      	mov	r3, r2
 800387a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	799b      	ldrb	r3, [r3, #6]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d14a      	bne.n	800391c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	795b      	ldrb	r3, [r3, #5]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800388e:	2302      	movs	r3, #2
 8003890:	e045      	b.n	800391e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fa8f 	bl	8003dbc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	2b84      	cmp	r3, #132	; 0x84
 80038a2:	d002      	beq.n	80038aa <HAL_SUBGHZ_ExecSetCmd+0x42>
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	2b94      	cmp	r3, #148	; 0x94
 80038a8:	d103      	bne.n	80038b2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	711a      	strb	r2, [r3, #4]
 80038b0:	e002      	b.n	80038b8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80038b8:	f7ff fe42 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80038bc:	7afb      	ldrb	r3, [r7, #11]
 80038be:	4619      	mov	r1, r3
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f9cd 	bl	8003c60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	82bb      	strh	r3, [r7, #20]
 80038ca:	e00a      	b.n	80038e2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80038cc:	8abb      	ldrh	r3, [r7, #20]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f9c2 	bl	8003c60 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80038dc:	8abb      	ldrh	r3, [r7, #20]
 80038de:	3301      	adds	r3, #1
 80038e0:	82bb      	strh	r3, [r7, #20]
 80038e2:	8aba      	ldrh	r2, [r7, #20]
 80038e4:	893b      	ldrh	r3, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3f0      	bcc.n	80038cc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80038ea:	f7ff fe19 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	2b84      	cmp	r3, #132	; 0x84
 80038f2:	d002      	beq.n	80038fa <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fa85 	bl	8003e04 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
 8003906:	e001      	b.n	800390c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	715a      	strb	r2, [r3, #5]

    return status;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	e000      	b.n	800391e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b088      	sub	sp, #32
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	461a      	mov	r2, r3
 8003932:	460b      	mov	r3, r1
 8003934:	72fb      	strb	r3, [r7, #11]
 8003936:	4613      	mov	r3, r2
 8003938:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	799b      	ldrb	r3, [r3, #6]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d13d      	bne.n	80039c4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	795b      	ldrb	r3, [r3, #5]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003950:	2302      	movs	r3, #2
 8003952:	e038      	b.n	80039c6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa2e 	bl	8003dbc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003960:	f7ff fdee 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f979 	bl	8003c60 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800396e:	2100      	movs	r1, #0
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f975 	bl	8003c60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	82fb      	strh	r3, [r7, #22]
 800397a:	e009      	b.n	8003990 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f9c4 	bl	8003d0c <SUBGHZSPI_Receive>
      pData++;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	3301      	adds	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800398a:	8afb      	ldrh	r3, [r7, #22]
 800398c:	3301      	adds	r3, #1
 800398e:	82fb      	strh	r3, [r7, #22]
 8003990:	8afa      	ldrh	r2, [r7, #22]
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	d3f1      	bcc.n	800397c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003998:	f7ff fdc2 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fa31 	bl	8003e04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e001      	b.n	80039b4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	715a      	strb	r2, [r3, #5]

    return status;
 80039c0:	7ffb      	ldrb	r3, [r7, #31]
 80039c2:	e000      	b.n	80039c6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	461a      	mov	r2, r3
 80039da:	460b      	mov	r3, r1
 80039dc:	72fb      	strb	r3, [r7, #11]
 80039de:	4613      	mov	r3, r2
 80039e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	799b      	ldrb	r3, [r3, #6]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d13e      	bne.n	8003a6a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	795b      	ldrb	r3, [r3, #5]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e039      	b.n	8003a6c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f9dc 	bl	8003dbc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a04:	f7ff fd9c 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003a08:	210e      	movs	r1, #14
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f928 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003a10:	7afb      	ldrb	r3, [r7, #11]
 8003a12:	4619      	mov	r1, r3
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f923 	bl	8003c60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	82bb      	strh	r3, [r7, #20]
 8003a1e:	e00a      	b.n	8003a36 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a20:	8abb      	ldrh	r3, [r7, #20]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f918 	bl	8003c60 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003a30:	8abb      	ldrh	r3, [r7, #20]
 8003a32:	3301      	adds	r3, #1
 8003a34:	82bb      	strh	r3, [r7, #20]
 8003a36:	8aba      	ldrh	r2, [r7, #20]
 8003a38:	893b      	ldrh	r3, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3f0      	bcc.n	8003a20 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a3e:	f7ff fd6f 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f9de 	bl	8003e04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
 8003a54:	e001      	b.n	8003a5a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	715a      	strb	r2, [r3, #5]

    return status;
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	e000      	b.n	8003a6c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	460b      	mov	r3, r1
 8003a82:	72fb      	strb	r3, [r7, #11]
 8003a84:	4613      	mov	r3, r2
 8003a86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	799b      	ldrb	r3, [r3, #6]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d141      	bne.n	8003b1a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	795b      	ldrb	r3, [r3, #5]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e03c      	b.n	8003b1c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f987 	bl	8003dbc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003aae:	f7ff fd47 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003ab2:	211e      	movs	r1, #30
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f8d3 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	4619      	mov	r1, r3
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f8ce 	bl	8003c60 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8ca 	bl	8003c60 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	82fb      	strh	r3, [r7, #22]
 8003ad0:	e009      	b.n	8003ae6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f919 	bl	8003d0c <SUBGHZSPI_Receive>
      pData++;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003ae0:	8afb      	ldrh	r3, [r7, #22]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	82fb      	strh	r3, [r7, #22]
 8003ae6:	8afa      	ldrh	r2, [r7, #22]
 8003ae8:	893b      	ldrh	r3, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3f1      	bcc.n	8003ad2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003aee:	f7ff fd17 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f986 	bl	8003e04 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e001      	b.n	8003b0a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	715a      	strb	r2, [r3, #5]

    return status;
 8003b16:	7ffb      	ldrb	r3, [r7, #31]
 8003b18:	e000      	b.n	8003b1c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
  }
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003b30:	f107 020c 	add.w	r2, r7, #12
 8003b34:	2302      	movs	r3, #2
 8003b36:	2112      	movs	r1, #18
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fef4 	bl	8003926 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003b3e:	7b3b      	ldrb	r3, [r7, #12]
 8003b40:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003b42:	89fb      	ldrh	r3, [r7, #14]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	b21a      	sxth	r2, r3
 8003b48:	7b7b      	ldrb	r3, [r7, #13]
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b21b      	sxth	r3, r3
 8003b50:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003b52:	89fb      	ldrh	r3, [r7, #14]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f002 fa3b 	bl	8005fd8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f002 fa40 	bl	8005ff4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003b74:	89fb      	ldrh	r3, [r7, #14]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f002 fa8f 	bl	80060a4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f002 fa94 	bl	80060c0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f002 fa99 	bl	80060dc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003baa:	89fb      	ldrh	r3, [r7, #14]
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f002 fa66 	bl	8006088 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003bbc:	89fb      	ldrh	r3, [r7, #14]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f002 fa21 	bl	8006010 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003bce:	89fb      	ldrh	r3, [r7, #14]
 8003bd0:	09db      	lsrs	r3, r3, #7
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003be6:	2101      	movs	r1, #1
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f002 fa1f 	bl	800602c <HAL_SUBGHZ_CADStatusCallback>
 8003bee:	e003      	b.n	8003bf8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f002 fa1a 	bl	800602c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	0a5b      	lsrs	r3, r3, #9
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f002 fa2f 	bl	8006068 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8003c0a:	f107 020c 	add.w	r2, r7, #12
 8003c0e:	2302      	movs	r3, #2
 8003c10:	2102      	movs	r1, #2
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fe28 	bl	8003868 <HAL_SUBGHZ_ExecSetCmd>
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <SUBGHZSPI_Init+0x3c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <SUBGHZSPI_Init+0x3c>)
 8003c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c32:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003c34:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <SUBGHZSPI_Init+0x3c>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003c3c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <SUBGHZSPI_Init+0x3c>)
 8003c40:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003c44:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <SUBGHZSPI_Init+0x3c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <SUBGHZSPI_Init+0x3c>)
 8003c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	58010000 	.word	0x58010000

08003c60 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <SUBGHZSPI_Transmit+0xa0>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	0cdb      	lsrs	r3, r3, #19
 8003c7e:	2264      	movs	r2, #100	; 0x64
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e008      	b.n	8003caa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <SUBGHZSPI_Transmit+0xa4>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d1ed      	bne.n	8003c86 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <SUBGHZSPI_Transmit+0xa8>)
 8003cac:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003cb4:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <SUBGHZSPI_Transmit+0xa0>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	0cdb      	lsrs	r3, r3, #19
 8003cc2:	2264      	movs	r2, #100	; 0x64
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	609a      	str	r2, [r3, #8]
      break;
 8003cda:	e008      	b.n	8003cee <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <SUBGHZSPI_Transmit+0xa4>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d1ed      	bne.n	8003cca <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <SUBGHZSPI_Transmit+0xa4>)
 8003cf0:	68db      	ldr	r3, [r3, #12]

  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000
 8003d04:	58010000 	.word	0x58010000
 8003d08:	5801000c 	.word	0x5801000c

08003d0c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d1a:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <SUBGHZSPI_Receive+0xa4>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	0cdb      	lsrs	r3, r3, #19
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	609a      	str	r2, [r3, #8]
      break;
 8003d40:	e008      	b.n	8003d54 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <SUBGHZSPI_Receive+0xa8>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d1ed      	bne.n	8003d30 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <SUBGHZSPI_Receive+0xac>)
 8003d56:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <SUBGHZSPI_Receive+0xa4>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	0cdb      	lsrs	r3, r3, #19
 8003d6c:	2264      	movs	r2, #100	; 0x64
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	609a      	str	r2, [r3, #8]
      break;
 8003d84:	e008      	b.n	8003d98 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <SUBGHZSPI_Receive+0xa8>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d1ed      	bne.n	8003d74 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <SUBGHZSPI_Receive+0xa8>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	701a      	strb	r2, [r3, #0]

  return status;
 8003da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000
 8003db4:	58010000 	.word	0x58010000
 8003db8:	5801000c 	.word	0x5801000c

08003dbc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	791b      	ldrb	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d111      	bne.n	8003df0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <SUBGHZ_CheckDeviceReady+0x44>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ddc:	f7ff fbb0 	bl	8003540 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f9      	bne.n	8003de0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dec:	f7ff fb98 	bl	8003520 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f807 	bl	8003e04 <SUBGHZ_WaitOnBusy>
 8003df6:	4603      	mov	r3, r0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000000 	.word	0x20000000

08003e04 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003e10:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <SUBGHZ_WaitOnBusy+0x58>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	0d1b      	lsrs	r3, r3, #20
 8003e1e:	2264      	movs	r2, #100	; 0x64
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003e26:	f7ff fbb9 	bl	800359c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003e2a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	609a      	str	r2, [r3, #8]
      break;
 8003e3c:	e009      	b.n	8003e52 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003e44:	f7ff fb98 	bl	8003578 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d0e9      	beq.n	8003e26 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000000 	.word	0x20000000

08003e60 <LL_RCC_GetUSARTClockSource>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	401a      	ands	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	4313      	orrs	r3, r2
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <LL_RCC_GetLPUARTClockSource>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4013      	ands	r3, r2
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e042      	b.n	8003f3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fa02 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fb59 	bl	800459c <UART_SetConfig>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e022      	b.n	8003f3a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fdc1 	bl	8004a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fe47 	bl	8004bc6 <UART_CheckIdleState>
 8003f38:	4603      	mov	r3, r0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b0ba      	sub	sp, #232	; 0xe8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f72:	4013      	ands	r3, r2
 8003f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d015      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 82d6 	beq.w	800455a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
      }
      return;
 8003fb6:	e2d0      	b.n	800455a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 811f 	beq.w	8004200 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003fc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003fc6:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <HAL_UART_IRQHandler+0x2b0>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003fce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003fd2:	4b89      	ldr	r3, [pc, #548]	; (80041f8 <HAL_UART_IRQHandler+0x2b4>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8112 	beq.w	8004200 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d011      	beq.n	800400c <HAL_UART_IRQHandler+0xc8>
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00b      	beq.n	800400c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d011      	beq.n	800403c <HAL_UART_IRQHandler+0xf8>
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2202      	movs	r2, #2
 800402a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <HAL_UART_IRQHandler+0x128>
 8004048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2204      	movs	r2, #4
 800405a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d017      	beq.n	80040a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004084:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_UART_IRQHandler+0x2b0>)
 800408a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2208      	movs	r2, #8
 8004096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409e:	f043 0208 	orr.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <HAL_UART_IRQHandler+0x196>
 80040b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 823c 	beq.w	800455e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d005      	beq.n	800413e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004136:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800413a:	2b00      	cmp	r3, #0
 800413c:	d04f      	beq.n	80041de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fe54 	bl	8004dec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d141      	bne.n	80041d6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800416c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800417e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800418a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1d9      	bne.n	8004152 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d013      	beq.n	80041ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <HAL_UART_IRQHandler+0x2b8>)
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd fb70 	bl	8001898 <HAL_DMA_Abort_IT>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d017      	beq.n	80041ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80041c8:	4610      	mov	r0, r2
 80041ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041cc:	e00f      	b.n	80041ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9d0 	bl	8004574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	e00b      	b.n	80041ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f9cc 	bl	8004574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e007      	b.n	80041ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f9c8 	bl	8004574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80041ec:	e1b7      	b.n	800455e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ee:	bf00      	nop
    return;
 80041f0:	e1b5      	b.n	800455e <HAL_UART_IRQHandler+0x61a>
 80041f2:	bf00      	nop
 80041f4:	10000001 	.word	0x10000001
 80041f8:	04000120 	.word	0x04000120
 80041fc:	08004eb7 	.word	0x08004eb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 814a 	bne.w	800449e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8143 	beq.w	800449e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 813c 	beq.w	800449e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2210      	movs	r2, #16
 800422c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	f040 80b5 	bne.w	80043a8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800424a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8187 	beq.w	8004562 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800425e:	429a      	cmp	r2, r3
 8004260:	f080 817f 	bcs.w	8004562 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800426a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 8086 	bne.w	800438c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800429c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1da      	bne.n	8004280 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e1      	bne.n	80042ca <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800432a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800432c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e3      	bne.n	8004306 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800435a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435c:	f023 0310 	bic.w	r3, r3, #16
 8004360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800436e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004370:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800437c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e4      	bne.n	800434c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fa28 	bl	80017dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004398:	b29b      	uxth	r3, r3
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8f0 	bl	8004586 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043a6:	e0dc      	b.n	8004562 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80ce 	beq.w	8004566 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80043ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80c9 	beq.w	8004566 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043f6:	647b      	str	r3, [r7, #68]	; 0x44
 80043f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e4      	bne.n	80043d4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	623b      	str	r3, [r7, #32]
   return(result);
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004432:	633a      	str	r2, [r7, #48]	; 0x30
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e1      	bne.n	800440a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	60fb      	str	r3, [r7, #12]
   return(result);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	69b9      	ldr	r1, [r7, #24]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	617b      	str	r3, [r7, #20]
   return(result);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e4      	bne.n	800445a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f875 	bl	8004586 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800449c:	e063      	b.n	8004566 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <HAL_UART_IRQHandler+0x584>
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d008      	beq.n	80044c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fd39 	bl	8004f38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044c6:	e051      	b.n	800456c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d014      	beq.n	80044fe <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80044e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03a      	beq.n	800456a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
    }
    return;
 80044fc:	e035      	b.n	800456a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_UART_IRQHandler+0x5da>
 800450a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fce3 	bl	8004ee2 <UART_EndTransmit_IT>
    return;
 800451c:	e026      	b.n	800456c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_UART_IRQHandler+0x5fa>
 800452a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fd10 	bl	8004f5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800453c:	e016      	b.n	800456c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d010      	beq.n	800456c <HAL_UART_IRQHandler+0x628>
 800454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454e:	2b00      	cmp	r3, #0
 8004550:	da0c      	bge.n	800456c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fcf9 	bl	8004f4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004558:	e008      	b.n	800456c <HAL_UART_IRQHandler+0x628>
      return;
 800455a:	bf00      	nop
 800455c:	e006      	b.n	800456c <HAL_UART_IRQHandler+0x628>
    return;
 800455e:	bf00      	nop
 8004560:	e004      	b.n	800456c <HAL_UART_IRQHandler+0x628>
      return;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <HAL_UART_IRQHandler+0x628>
      return;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <HAL_UART_IRQHandler+0x628>
    return;
 800456a:	bf00      	nop
  }
}
 800456c:	37e8      	adds	r7, #232	; 0xe8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop

08004574 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b08c      	sub	sp, #48	; 0x30
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b94      	ldr	r3, [pc, #592]	; (800481c <UART_SetConfig+0x280>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a89      	ldr	r2, [pc, #548]	; (8004820 <UART_SetConfig+0x284>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004604:	4313      	orrs	r3, r2
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004612:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461c:	430b      	orrs	r3, r1
 800461e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	f023 010f 	bic.w	r1, r3, #15
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7a      	ldr	r2, [pc, #488]	; (8004824 <UART_SetConfig+0x288>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d127      	bne.n	8004690 <UART_SetConfig+0xf4>
 8004640:	2003      	movs	r0, #3
 8004642:	f7ff fc0d 	bl	8003e60 <LL_RCC_GetUSARTClockSource>
 8004646:	4603      	mov	r3, r0
 8004648:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800464c:	2b03      	cmp	r3, #3
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0xec>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xbc>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	2301      	movs	r3, #1
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466e:	e080      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004676:	e07c      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e078      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e074      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e070      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a64      	ldr	r2, [pc, #400]	; (8004828 <UART_SetConfig+0x28c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d138      	bne.n	800470c <UART_SetConfig+0x170>
 800469a:	200c      	movs	r0, #12
 800469c:	f7ff fbe0 	bl	8003e60 <LL_RCC_GetUSARTClockSource>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d82c      	bhi.n	8004704 <UART_SetConfig+0x168>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0x114>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	08004705 	.word	0x08004705
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004705 	.word	0x08004705
 80046dc:	08004705 	.word	0x08004705
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ea:	e042      	b.n	8004772 <UART_SetConfig+0x1d6>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e03e      	b.n	8004772 <UART_SetConfig+0x1d6>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e03a      	b.n	8004772 <UART_SetConfig+0x1d6>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e036      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470a:	e032      	b.n	8004772 <UART_SetConfig+0x1d6>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a43      	ldr	r2, [pc, #268]	; (8004820 <UART_SetConfig+0x284>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d12a      	bne.n	800476c <UART_SetConfig+0x1d0>
 8004716:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800471a:	f7ff fbb3 	bl	8003e84 <LL_RCC_GetLPUARTClockSource>
 800471e:	4603      	mov	r3, r0
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004724:	d01a      	beq.n	800475c <UART_SetConfig+0x1c0>
 8004726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472a:	d81b      	bhi.n	8004764 <UART_SetConfig+0x1c8>
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d00c      	beq.n	800474c <UART_SetConfig+0x1b0>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d815      	bhi.n	8004764 <UART_SetConfig+0x1c8>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <UART_SetConfig+0x1a8>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d008      	beq.n	8004754 <UART_SetConfig+0x1b8>
 8004742:	e00f      	b.n	8004764 <UART_SetConfig+0x1c8>
 8004744:	2300      	movs	r3, #0
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e012      	b.n	8004772 <UART_SetConfig+0x1d6>
 800474c:	2302      	movs	r3, #2
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e00e      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004754:	2304      	movs	r3, #4
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475a:	e00a      	b.n	8004772 <UART_SetConfig+0x1d6>
 800475c:	2308      	movs	r3, #8
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004762:	e006      	b.n	8004772 <UART_SetConfig+0x1d6>
 8004764:	2310      	movs	r3, #16
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476a:	e002      	b.n	8004772 <UART_SetConfig+0x1d6>
 800476c:	2310      	movs	r3, #16
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <UART_SetConfig+0x284>)
 8004778:	4293      	cmp	r3, r2
 800477a:	f040 80a4 	bne.w	80048c6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800477e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004782:	2b08      	cmp	r3, #8
 8004784:	d823      	bhi.n	80047ce <UART_SetConfig+0x232>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x1f0>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047bf 	.word	0x080047bf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047cf 	.word	0x080047cf
 80047a8:	080047cf 	.word	0x080047cf
 80047ac:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe fb9a 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 80047b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <UART_SetConfig+0x290>)
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe fadf 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80047c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8137 	beq.w	8004a50 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <UART_SetConfig+0x294>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d305      	bcc.n	8004812 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d910      	bls.n	8004834 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004818:	e11a      	b.n	8004a50 <UART_SetConfig+0x4b4>
 800481a:	bf00      	nop
 800481c:	cfff69f3 	.word	0xcfff69f3
 8004820:	40008000 	.word	0x40008000
 8004824:	40013800 	.word	0x40013800
 8004828:	40004400 	.word	0x40004400
 800482c:	00f42400 	.word	0x00f42400
 8004830:	08007958 	.word	0x08007958
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	2200      	movs	r2, #0
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	60fa      	str	r2, [r7, #12]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	4a8e      	ldr	r2, [pc, #568]	; (8004a7c <UART_SetConfig+0x4e0>)
 8004842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004846:	b29b      	uxth	r3, r3
 8004848:	2200      	movs	r2, #0
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004856:	f7fb fce3 	bl	8000220 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4610      	mov	r0, r2
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	020b      	lsls	r3, r1, #8
 800486c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004870:	0202      	lsls	r2, r0, #8
 8004872:	6979      	ldr	r1, [r7, #20]
 8004874:	6849      	ldr	r1, [r1, #4]
 8004876:	0849      	lsrs	r1, r1, #1
 8004878:	2000      	movs	r0, #0
 800487a:	460c      	mov	r4, r1
 800487c:	4605      	mov	r5, r0
 800487e:	eb12 0804 	adds.w	r8, r2, r4
 8004882:	eb43 0905 	adc.w	r9, r3, r5
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	469a      	mov	sl, r3
 800488e:	4693      	mov	fp, r2
 8004890:	4652      	mov	r2, sl
 8004892:	465b      	mov	r3, fp
 8004894:	4640      	mov	r0, r8
 8004896:	4649      	mov	r1, r9
 8004898:	f7fb fcc2 	bl	8000220 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048aa:	d308      	bcc.n	80048be <UART_SetConfig+0x322>
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b2:	d204      	bcs.n	80048be <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	e0c8      	b.n	8004a50 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048c4:	e0c4      	b.n	8004a50 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d168      	bne.n	80049a2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80048d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d828      	bhi.n	800492a <UART_SetConfig+0x38e>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x344>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fe faf0 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800490a:	e014      	b.n	8004936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7fe fafe 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 8004910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004912:	e010      	b.n	8004936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <UART_SetConfig+0x4e4>)
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004918:	e00d      	b.n	8004936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe fa31 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004920:	e009      	b.n	8004936 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004928:	e005      	b.n	8004936 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8089 	beq.w	8004a50 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	4a4e      	ldr	r2, [pc, #312]	; (8004a7c <UART_SetConfig+0x4e0>)
 8004944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004948:	461a      	mov	r2, r3
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004950:	005a      	lsls	r2, r3, #1
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	441a      	add	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	2b0f      	cmp	r3, #15
 800496a:	d916      	bls.n	800499a <UART_SetConfig+0x3fe>
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004972:	d212      	bcs.n	800499a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	b29b      	uxth	r3, r3
 8004978:	f023 030f 	bic.w	r3, r3, #15
 800497c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	b29b      	uxth	r3, r3
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	b29a      	uxth	r2, r3
 800498a:	8bfb      	ldrh	r3, [r7, #30]
 800498c:	4313      	orrs	r3, r2
 800498e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	8bfa      	ldrh	r2, [r7, #30]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e05a      	b.n	8004a50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049a0:	e056      	b.n	8004a50 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d827      	bhi.n	80049fa <UART_SetConfig+0x45e>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x414>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe fa88 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049da:	e014      	b.n	8004a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fe fa96 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049e2:	e010      	b.n	8004a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <UART_SetConfig+0x4e4>)
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049e8:	e00d      	b.n	8004a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe f9c9 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049f0:	e009      	b.n	8004a06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049f8:	e005      	b.n	8004a06 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a04:	bf00      	nop
    }

    if (pclk != 0U)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d021      	beq.n	8004a50 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <UART_SetConfig+0x4e0>)
 8004a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	441a      	add	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d908      	bls.n	8004a4a <UART_SetConfig+0x4ae>
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3e:	d204      	bcs.n	8004a4a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a3a      	ldr	r2, [r7, #32]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	e002      	b.n	8004a50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2200      	movs	r2, #0
 8004a64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3730      	adds	r7, #48	; 0x30
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08007958 	.word	0x08007958
 8004a80:	00f42400 	.word	0x00f42400

08004a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b82:	d10a      	bne.n	8004b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bc80      	pop	{r7}
 8004bc4:	4770      	bx	lr

08004bc6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af02      	add	r7, sp, #8
 8004bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd6:	f7fc fa09 	bl	8000fec <HAL_GetTick>
 8004bda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d10e      	bne.n	8004c08 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f82f 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e025      	b.n	8004c54 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d10e      	bne.n	8004c34 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f819 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e00f      	b.n	8004c54 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b09c      	sub	sp, #112	; 0x70
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	e0a9      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c74:	f000 80a5 	beq.w	8004dc2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c78:	f7fc f9b8 	bl	8000fec <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x32>
 8004c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d140      	bne.n	8004d10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e6      	bne.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ce2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ce6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e069      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d051      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2c:	d149      	bne.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
 8004d58:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d8a:	623a      	str	r2, [r7, #32]
 8004d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	69f9      	ldr	r1, [r7, #28]
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e010      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	f43f af46 	beq.w	8004c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3770      	adds	r7, #112	; 0x70
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b095      	sub	sp, #84	; 0x54
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e12:	643b      	str	r3, [r7, #64]	; 0x40
 8004e14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e6      	bne.n	8004df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e3      	bne.n	8004e26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d118      	bne.n	8004e98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	613b      	str	r3, [r7, #16]
   return(result);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e6      	bne.n	8004e66 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004eac:	bf00      	nop
 8004eae:	3754      	adds	r7, #84	; 0x54
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fb4d 	bl	8004574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eda:	bf00      	nop
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	613b      	str	r3, [r7, #16]
   return(result);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e6      	bne.n	8004eea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fa70 	bl	8001410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f30:	bf00      	nop
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr

08004f4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e027      	b.n	8004fd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2224      	movs	r2, #36	; 0x24
 8004f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e02d      	b.n	8005052 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2224      	movs	r2, #36	; 0x24
 8005002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f850 	bl	80050d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800506e:	2302      	movs	r3, #2
 8005070:	e02d      	b.n	80050ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2224      	movs	r2, #36	; 0x24
 800507e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f812 	bl	80050d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d108      	bne.n	80050fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050f8:	e031      	b.n	800515e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050fa:	2308      	movs	r3, #8
 80050fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050fe:	2308      	movs	r3, #8
 8005100:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	0e5b      	lsrs	r3, r3, #25
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	0f5b      	lsrs	r3, r3, #29
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	7b3a      	ldrb	r2, [r7, #12]
 8005126:	4910      	ldr	r1, [pc, #64]	; (8005168 <UARTEx_SetNbDataToProcess+0x90>)
 8005128:	5c8a      	ldrb	r2, [r1, r2]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800512e:	7b3a      	ldrb	r2, [r7, #12]
 8005130:	490e      	ldr	r1, [pc, #56]	; (800516c <UARTEx_SetNbDataToProcess+0x94>)
 8005132:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005134:	fb93 f3f2 	sdiv	r3, r3, r2
 8005138:	b29a      	uxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	7b7a      	ldrb	r2, [r7, #13]
 8005144:	4908      	ldr	r1, [pc, #32]	; (8005168 <UARTEx_SetNbDataToProcess+0x90>)
 8005146:	5c8a      	ldrb	r2, [r1, r2]
 8005148:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800514c:	7b7a      	ldrb	r2, [r7, #13]
 800514e:	4907      	ldr	r1, [pc, #28]	; (800516c <UARTEx_SetNbDataToProcess+0x94>)
 8005150:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005152:	fb93 f3f2 	sdiv	r3, r3, r2
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	08007970 	.word	0x08007970
 800516c:	08007978 	.word	0x08007978

08005170 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800517e:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <SUBGRF_Init+0x78>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8005184:	f7fb ff02 	bl	8000f8c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8005188:	2002      	movs	r0, #2
 800518a:	f000 ffb5 	bl	80060f8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <SUBGRF_Init+0x7c>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8005194:	2000      	movs	r0, #0
 8005196:	f000 f903 	bl	80053a0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800519a:	f000 fff1 	bl	8006180 <RBI_IsTCXO>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10e      	bne.n	80051c2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	2001      	movs	r0, #1
 80051a8:	f000 fa64 	bl	8005674 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80051ac:	2100      	movs	r1, #0
 80051ae:	f640 1011 	movw	r0, #2321	; 0x911
 80051b2:	f000 fdc1 	bl	8005d38 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80051b6:	237f      	movs	r3, #127	; 0x7f
 80051b8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80051ba:	7b38      	ldrb	r0, [r7, #12]
 80051bc:	f000 f972 	bl	80054a4 <SUBGRF_Calibrate>
 80051c0:	e009      	b.n	80051d6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80051c2:	2120      	movs	r1, #32
 80051c4:	f640 1011 	movw	r0, #2321	; 0x911
 80051c8:	f000 fdb6 	bl	8005d38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80051cc:	2120      	movs	r1, #32
 80051ce:	f640 1012 	movw	r0, #2322	; 0x912
 80051d2:	f000 fdb1 	bl	8005d38 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80051d6:	f000 ffb0 	bl	800613a <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <SUBGRF_Init+0x80>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200001f8 	.word	0x200001f8
 80051ec:	200001f4 	.word	0x200001f4
 80051f0:	200001ec 	.word	0x200001ec

080051f4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
    return OperatingMode;
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <SUBGRF_GetOperatingMode+0x10>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	200001ec 	.word	0x200001ec

08005208 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	461a      	mov	r2, r3
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	2000      	movs	r0, #0
 800521c:	f000 fdf8 	bl	8005e10 <SUBGRF_WriteBuffer>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800523a:	f107 0317 	add.w	r3, r7, #23
 800523e:	4619      	mov	r1, r3
 8005240:	68b8      	ldr	r0, [r7, #8]
 8005242:	f000 fcfb 	bl	8005c3c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	79fa      	ldrb	r2, [r7, #7]
 800524c:	429a      	cmp	r2, r3
 800524e:	d201      	bcs.n	8005254 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8005250:	2301      	movs	r3, #1
 8005252:	e007      	b.n	8005264 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8005254:	7df8      	ldrb	r0, [r7, #23]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68f9      	ldr	r1, [r7, #12]
 800525e:	f000 fdf9 	bl	8005e54 <SUBGRF_ReadBuffer>

    return 0;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	460b      	mov	r3, r1
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800527a:	7afb      	ldrb	r3, [r7, #11]
 800527c:	4619      	mov	r1, r3
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff ffc2 	bl	8005208 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8a7 	bl	80053d8 <SUBGRF_SetTx>
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	4603      	mov	r3, r0
 800529a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80052ac:	f000 fa66 	bl	800577c <SUBGRF_GetPacketType>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d108      	bne.n	80052c8 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	2202      	movs	r2, #2
 80052bc:	4619      	mov	r1, r3
 80052be:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80052c2:	f000 fd61 	bl	8005d88 <SUBGRF_WriteRegisters>
            break;
 80052c6:	e000      	b.n	80052ca <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80052c8:	bf00      	nop
    }
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	4603      	mov	r3, r0
 80052da:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80052ec:	f000 fa46 	bl	800577c <SUBGRF_GetPacketType>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d108      	bne.n	8005308 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80052f6:	f107 030c 	add.w	r3, r7, #12
 80052fa:	2202      	movs	r2, #2
 80052fc:	4619      	mov	r1, r3
 80052fe:	f240 60be 	movw	r0, #1726	; 0x6be
 8005302:	f000 fd41 	bl	8005d88 <SUBGRF_WriteRegisters>
            break;
 8005306:	e000      	b.n	800530a <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8005308:	bf00      	nop
    }
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8005324:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005328:	f000 fd1a 	bl	8005d60 <SUBGRF_ReadRegister>
 800532c:	4603      	mov	r3, r0
 800532e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800533e:	f000 fcfb 	bl	8005d38 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8005342:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005346:	f000 fd0b 	bl	8005d60 <SUBGRF_ReadRegister>
 800534a:	4603      	mov	r3, r0
 800534c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800534e:	79bb      	ldrb	r3, [r7, #6]
 8005350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800535c:	f000 fcec 	bl	8005d38 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005360:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005364:	f000 f858 	bl	8005418 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8005368:	463b      	mov	r3, r7
 800536a:	2204      	movs	r2, #4
 800536c:	4619      	mov	r1, r3
 800536e:	f640 0019 	movw	r0, #2073	; 0x819
 8005372:	f000 fd2b 	bl	8005dcc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8005376:	2000      	movs	r0, #0
 8005378:	f000 f812 	bl	80053a0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	4619      	mov	r1, r3
 8005380:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005384:	f000 fcd8 	bl	8005d38 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8005388:	79bb      	ldrb	r3, [r7, #6]
 800538a:	4619      	mov	r1, r3
 800538c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005390:	f000 fcd2 	bl	8005d38 <SUBGRF_WriteRegister>

    return number;
 8005394:	683b      	ldr	r3, [r7, #0]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80053aa:	1dfb      	adds	r3, r7, #7
 80053ac:	2201      	movs	r2, #1
 80053ae:	4619      	mov	r1, r3
 80053b0:	2080      	movs	r0, #128	; 0x80
 80053b2:	f000 fd71 	bl	8005e98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <SUBGRF_SetStandby+0x34>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80053c2:	e002      	b.n	80053ca <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <SUBGRF_SetStandby+0x34>)
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200001ec 	.word	0x200001ec

080053d8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <SUBGRF_SetTx+0x3c>)
 80053e2:	2204      	movs	r2, #4
 80053e4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80053fc:	f107 030c 	add.w	r3, r7, #12
 8005400:	2203      	movs	r2, #3
 8005402:	4619      	mov	r1, r3
 8005404:	2083      	movs	r0, #131	; 0x83
 8005406:	f000 fd47 	bl	8005e98 <SUBGRF_WriteCommand>
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200001ec 	.word	0x200001ec

08005418 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <SUBGRF_SetRx+0x3c>)
 8005422:	2205      	movs	r2, #5
 8005424:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0c1b      	lsrs	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	b2db      	uxtb	r3, r3
 8005434:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800543c:	f107 030c 	add.w	r3, r7, #12
 8005440:	2203      	movs	r2, #3
 8005442:	4619      	mov	r1, r3
 8005444:	2082      	movs	r0, #130	; 0x82
 8005446:	f000 fd27 	bl	8005e98 <SUBGRF_WriteCommand>
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200001ec 	.word	0x200001ec

08005458 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	2201      	movs	r2, #1
 8005466:	4619      	mov	r1, r3
 8005468:	209f      	movs	r0, #159	; 0x9f
 800546a:	f000 fd15 	bl	8005e98 <SUBGRF_WriteCommand>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b082      	sub	sp, #8
 800547a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800547c:	f000 fe8b 	bl	8006196 <RBI_IsDCDC>
 8005480:	4603      	mov	r3, r0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8005486:	2301      	movs	r3, #1
 8005488:	71fb      	strb	r3, [r7, #7]
 800548a:	e001      	b.n	8005490 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800548c:	2300      	movs	r3, #0
 800548e:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8005490:	1dfb      	adds	r3, r7, #7
 8005492:	2201      	movs	r2, #1
 8005494:	4619      	mov	r1, r3
 8005496:	2096      	movs	r0, #150	; 0x96
 8005498:	f000 fcfe 	bl	8005e98 <SUBGRF_WriteCommand>
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80054ac:	793b      	ldrb	r3, [r7, #4]
 80054ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80054b8:	793b      	ldrb	r3, [r7, #4]
 80054ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80054c2:	b25b      	sxtb	r3, r3
 80054c4:	4313      	orrs	r3, r2
 80054c6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80054c8:	793b      	ldrb	r3, [r7, #4]
 80054ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80054d8:	793b      	ldrb	r3, [r7, #4]
 80054da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	4313      	orrs	r3, r2
 80054e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80054e8:	793b      	ldrb	r3, [r7, #4]
 80054ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80054f8:	793b      	ldrb	r3, [r7, #4]
 80054fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8005502:	b25b      	sxtb	r3, r3
 8005504:	4313      	orrs	r3, r2
 8005506:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8005508:	793b      	ldrb	r3, [r7, #4]
 800550a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800550e:	b2db      	uxtb	r3, r3
 8005510:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8005512:	4313      	orrs	r3, r2
 8005514:	b25b      	sxtb	r3, r3
 8005516:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8005518:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800551a:	f107 030f 	add.w	r3, r7, #15
 800551e:	2201      	movs	r2, #1
 8005520:	4619      	mov	r1, r3
 8005522:	2089      	movs	r0, #137	; 0x89
 8005524:	f000 fcb8 	bl	8005e98 <SUBGRF_WriteCommand>
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <SUBGRF_CalibrateImage+0x78>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d904      	bls.n	800554a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8005540:	23e1      	movs	r3, #225	; 0xe1
 8005542:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8005544:	23e9      	movs	r3, #233	; 0xe9
 8005546:	737b      	strb	r3, [r7, #13]
 8005548:	e022      	b.n	8005590 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <SUBGRF_CalibrateImage+0x7c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d904      	bls.n	800555c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8005552:	23d7      	movs	r3, #215	; 0xd7
 8005554:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8005556:	23db      	movs	r3, #219	; 0xdb
 8005558:	737b      	strb	r3, [r7, #13]
 800555a:	e019      	b.n	8005590 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <SUBGRF_CalibrateImage+0x80>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d904      	bls.n	800556e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8005564:	23c1      	movs	r3, #193	; 0xc1
 8005566:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8005568:	23c5      	movs	r3, #197	; 0xc5
 800556a:	737b      	strb	r3, [r7, #13]
 800556c:	e010      	b.n	8005590 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <SUBGRF_CalibrateImage+0x84>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d904      	bls.n	8005580 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8005576:	2375      	movs	r3, #117	; 0x75
 8005578:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800557a:	2381      	movs	r3, #129	; 0x81
 800557c:	737b      	strb	r3, [r7, #13]
 800557e:	e007      	b.n	8005590 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <SUBGRF_CalibrateImage+0x88>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d903      	bls.n	8005590 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8005588:	236b      	movs	r3, #107	; 0x6b
 800558a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800558c:	236f      	movs	r3, #111	; 0x6f
 800558e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8005590:	f107 030c 	add.w	r3, r7, #12
 8005594:	2202      	movs	r2, #2
 8005596:	4619      	mov	r1, r3
 8005598:	2098      	movs	r0, #152	; 0x98
 800559a:	f000 fc7d 	bl	8005e98 <SUBGRF_WriteCommand>
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	35a4e900 	.word	0x35a4e900
 80055ac:	32a9f880 	.word	0x32a9f880
 80055b0:	2de54480 	.word	0x2de54480
 80055b4:	1b6b0b00 	.word	0x1b6b0b00
 80055b8:	1954fc40 	.word	0x1954fc40

080055bc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	4611      	mov	r1, r2
 80055c8:	461a      	mov	r2, r3
 80055ca:	4623      	mov	r3, r4
 80055cc:	71fb      	strb	r3, [r7, #7]
 80055ce:	4603      	mov	r3, r0
 80055d0:	71bb      	strb	r3, [r7, #6]
 80055d2:	460b      	mov	r3, r1
 80055d4:	717b      	strb	r3, [r7, #5]
 80055d6:	4613      	mov	r3, r2
 80055d8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80055de:	79bb      	ldrb	r3, [r7, #6]
 80055e0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80055e2:	797b      	ldrb	r3, [r7, #5]
 80055e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80055e6:	793b      	ldrb	r3, [r7, #4]
 80055e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80055ea:	f107 030c 	add.w	r3, r7, #12
 80055ee:	2204      	movs	r2, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	2095      	movs	r0, #149	; 0x95
 80055f4:	f000 fc50 	bl	8005e98 <SUBGRF_WriteCommand>
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd90      	pop	{r4, r7, pc}

08005600 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	4611      	mov	r1, r2
 800560c:	461a      	mov	r2, r3
 800560e:	4623      	mov	r3, r4
 8005610:	80fb      	strh	r3, [r7, #6]
 8005612:	4603      	mov	r3, r0
 8005614:	80bb      	strh	r3, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	807b      	strh	r3, [r7, #2]
 800561a:	4613      	mov	r3, r2
 800561c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	b29b      	uxth	r3, r3
 8005624:	b2db      	uxtb	r3, r3
 8005626:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800562e:	88bb      	ldrh	r3, [r7, #4]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	b29b      	uxth	r3, r3
 8005634:	b2db      	uxtb	r3, r3
 8005636:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8005638:	88bb      	ldrh	r3, [r7, #4]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800563e:	887b      	ldrh	r3, [r7, #2]
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	b29b      	uxth	r3, r3
 8005644:	b2db      	uxtb	r3, r3
 8005646:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800564e:	883b      	ldrh	r3, [r7, #0]
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	b29b      	uxth	r3, r3
 8005654:	b2db      	uxtb	r3, r3
 8005656:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8005658:	883b      	ldrh	r3, [r7, #0]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800565e:	f107 0308 	add.w	r3, r7, #8
 8005662:	2208      	movs	r2, #8
 8005664:	4619      	mov	r1, r3
 8005666:	2008      	movs	r0, #8
 8005668:	f000 fc16 	bl	8005e98 <SUBGRF_WriteCommand>
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bd90      	pop	{r4, r7, pc}

08005674 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	6039      	str	r1, [r7, #0]
 800567e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	b2db      	uxtb	r3, r3
 8005688:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	b2db      	uxtb	r3, r3
 8005690:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	b2db      	uxtb	r3, r3
 8005698:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80056a0:	f107 030c 	add.w	r3, r7, #12
 80056a4:	2204      	movs	r2, #4
 80056a6:	4619      	mov	r1, r3
 80056a8:	2097      	movs	r0, #151	; 0x97
 80056aa:	f000 fbf5 	bl	8005e98 <SUBGRF_WriteCommand>
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80056b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <SUBGRF_SetRfFrequency+0x84>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	f083 0301 	eor.w	r3, r3, #1
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ff2b 	bl	8005530 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80056da:	4b18      	ldr	r3, [pc, #96]	; (800573c <SUBGRF_SetRfFrequency+0x84>)
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	461c      	mov	r4, r3
 80056e6:	4615      	mov	r5, r2
 80056e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80056ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80056f0:	4a13      	ldr	r2, [pc, #76]	; (8005740 <SUBGRF_SetRfFrequency+0x88>)
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	4640      	mov	r0, r8
 80056f8:	4649      	mov	r1, r9
 80056fa:	f7fa fd91 	bl	8000220 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4613      	mov	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	0e1b      	lsrs	r3, r3, #24
 800570a:	b2db      	uxtb	r3, r3
 800570c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	b2db      	uxtb	r3, r3
 8005714:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	b2db      	uxtb	r3, r3
 800571c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	2204      	movs	r2, #4
 800572a:	4619      	mov	r1, r3
 800572c:	2086      	movs	r0, #134	; 0x86
 800572e:	f000 fbb3 	bl	8005e98 <SUBGRF_WriteCommand>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800573c:	200001f4 	.word	0x200001f4
 8005740:	01e84800 	.word	0x01e84800

08005744 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800574e:	79fa      	ldrb	r2, [r7, #7]
 8005750:	4b09      	ldr	r3, [pc, #36]	; (8005778 <SUBGRF_SetPacketType+0x34>)
 8005752:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800575a:	2100      	movs	r1, #0
 800575c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005760:	f000 faea 	bl	8005d38 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8005764:	1dfb      	adds	r3, r7, #7
 8005766:	2201      	movs	r2, #1
 8005768:	4619      	mov	r1, r3
 800576a:	208a      	movs	r0, #138	; 0x8a
 800576c:	f000 fb94 	bl	8005e98 <SUBGRF_WriteCommand>
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	200001ed 	.word	0x200001ed

0800577c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
    return PacketType;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <SUBGRF_GetPacketType+0x10>)
 8005782:	781b      	ldrb	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	200001ed 	.word	0x200001ed

08005790 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
 800579a:	460b      	mov	r3, r1
 800579c:	71bb      	strb	r3, [r7, #6]
 800579e:	4613      	mov	r3, r2
 80057a0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d149      	bne.n	800583c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80057a8:	2000      	movs	r0, #0
 80057aa:	f000 fcff 	bl	80061ac <RBI_GetRFOMaxPowerConfig>
 80057ae:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80057b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	da01      	bge.n	80057be <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b0e      	cmp	r3, #14
 80057c2:	d10e      	bne.n	80057e2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80057c4:	2301      	movs	r3, #1
 80057c6:	2201      	movs	r2, #1
 80057c8:	2100      	movs	r1, #0
 80057ca:	2004      	movs	r0, #4
 80057cc:	f7ff fef6 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80057d0:	79ba      	ldrb	r2, [r7, #6]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	330e      	adds	r3, #14
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	71bb      	strb	r3, [r7, #6]
 80057e0:	e01f      	b.n	8005822 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b0a      	cmp	r3, #10
 80057e6:	d10e      	bne.n	8005806 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80057e8:	2301      	movs	r3, #1
 80057ea:	2201      	movs	r2, #1
 80057ec:	2100      	movs	r1, #0
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7ff fee4 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80057f4:	79ba      	ldrb	r2, [r7, #6]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	330d      	adds	r3, #13
 8005800:	b2db      	uxtb	r3, r3
 8005802:	71bb      	strb	r3, [r7, #6]
 8005804:	e00d      	b.n	8005822 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8005806:	2301      	movs	r3, #1
 8005808:	2201      	movs	r2, #1
 800580a:	2100      	movs	r1, #0
 800580c:	2006      	movs	r0, #6
 800580e:	f7ff fed5 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8005812:	79ba      	ldrb	r2, [r7, #6]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	330e      	adds	r3, #14
 800581e:	b2db      	uxtb	r3, r3
 8005820:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8005822:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005826:	f113 0f11 	cmn.w	r3, #17
 800582a:	da01      	bge.n	8005830 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800582c:	23ef      	movs	r3, #239	; 0xef
 800582e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8005830:	2118      	movs	r1, #24
 8005832:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8005836:	f000 fa7f 	bl	8005d38 <SUBGRF_WriteRegister>
 800583a:	e067      	b.n	800590c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800583c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8005840:	f000 fa8e 	bl	8005d60 <SUBGRF_ReadRegister>
 8005844:	4603      	mov	r3, r0
 8005846:	f043 031e 	orr.w	r3, r3, #30
 800584a:	b2db      	uxtb	r3, r3
 800584c:	4619      	mov	r1, r3
 800584e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8005852:	f000 fa71 	bl	8005d38 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8005856:	2001      	movs	r0, #1
 8005858:	f000 fca8 	bl	80061ac <RBI_GetRFOMaxPowerConfig>
 800585c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800585e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	da01      	bge.n	800586c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b14      	cmp	r3, #20
 8005870:	d10e      	bne.n	8005890 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8005872:	2301      	movs	r3, #1
 8005874:	2200      	movs	r2, #0
 8005876:	2105      	movs	r1, #5
 8005878:	2003      	movs	r0, #3
 800587a:	f7ff fe9f 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800587e:	79ba      	ldrb	r2, [r7, #6]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	b2db      	uxtb	r3, r3
 8005888:	3316      	adds	r3, #22
 800588a:	b2db      	uxtb	r3, r3
 800588c:	71bb      	strb	r3, [r7, #6]
 800588e:	e031      	b.n	80058f4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b11      	cmp	r3, #17
 8005894:	d10e      	bne.n	80058b4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8005896:	2301      	movs	r3, #1
 8005898:	2200      	movs	r2, #0
 800589a:	2103      	movs	r1, #3
 800589c:	2002      	movs	r0, #2
 800589e:	f7ff fe8d 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80058a2:	79ba      	ldrb	r2, [r7, #6]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	3316      	adds	r3, #22
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	71bb      	strb	r3, [r7, #6]
 80058b2:	e01f      	b.n	80058f4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b0e      	cmp	r3, #14
 80058b8:	d10e      	bne.n	80058d8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80058ba:	2301      	movs	r3, #1
 80058bc:	2200      	movs	r2, #0
 80058be:	2102      	movs	r1, #2
 80058c0:	2002      	movs	r0, #2
 80058c2:	f7ff fe7b 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80058c6:	79ba      	ldrb	r2, [r7, #6]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	330e      	adds	r3, #14
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	71bb      	strb	r3, [r7, #6]
 80058d6:	e00d      	b.n	80058f4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80058d8:	2301      	movs	r3, #1
 80058da:	2200      	movs	r2, #0
 80058dc:	2107      	movs	r1, #7
 80058de:	2004      	movs	r0, #4
 80058e0:	f7ff fe6c 	bl	80055bc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80058e4:	79ba      	ldrb	r2, [r7, #6]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	3316      	adds	r3, #22
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80058f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80058f8:	f113 0f09 	cmn.w	r3, #9
 80058fc:	da01      	bge.n	8005902 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80058fe:	23f7      	movs	r3, #247	; 0xf7
 8005900:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8005902:	2138      	movs	r1, #56	; 0x38
 8005904:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8005908:	f000 fa16 	bl	8005d38 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800590c:	79bb      	ldrb	r3, [r7, #6]
 800590e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8005910:	797b      	ldrb	r3, [r7, #5]
 8005912:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8005914:	f107 0308 	add.w	r3, r7, #8
 8005918:	2202      	movs	r2, #2
 800591a:	4619      	mov	r1, r3
 800591c:	208e      	movs	r0, #142	; 0x8e
 800591e:	f000 fabb 	bl	8005e98 <SUBGRF_WriteCommand>
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800592c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800593a:	4a61      	ldr	r2, [pc, #388]	; (8005ac0 <SUBGRF_SetModulationParams+0x194>)
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005944:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	4b5d      	ldr	r3, [pc, #372]	; (8005ac4 <SUBGRF_SetModulationParams+0x198>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d004      	beq.n	800595e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fef3 	bl	8005744 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b03      	cmp	r3, #3
 8005964:	f200 80a5 	bhi.w	8005ab2 <SUBGRF_SetModulationParams+0x186>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <SUBGRF_SetModulationParams+0x44>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005981 	.word	0x08005981
 8005974:	08005a41 	.word	0x08005a41
 8005978:	08005a03 	.word	0x08005a03
 800597c:	08005a6f 	.word	0x08005a6f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8005980:	2308      	movs	r3, #8
 8005982:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a4f      	ldr	r2, [pc, #316]	; (8005ac8 <SUBGRF_SetModulationParams+0x19c>)
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	b2db      	uxtb	r3, r3
 8005996:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b2db      	uxtb	r3, r3
 800599e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7b1b      	ldrb	r3, [r3, #12]
 80059aa:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	7b5b      	ldrb	r3, [r3, #13]
 80059b0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2200      	movs	r2, #0
 80059b8:	461c      	mov	r4, r3
 80059ba:	4615      	mov	r5, r2
 80059bc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80059c0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80059c4:	4a41      	ldr	r2, [pc, #260]	; (8005acc <SUBGRF_SetModulationParams+0x1a0>)
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa fc27 	bl	8000220 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4613      	mov	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f107 0308 	add.w	r3, r7, #8
 80059f8:	4619      	mov	r1, r3
 80059fa:	208b      	movs	r0, #139	; 0x8b
 80059fc:	f000 fa4c 	bl	8005e98 <SUBGRF_WriteCommand>
        break;
 8005a00:	e058      	b.n	8005ab4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8005a02:	2304      	movs	r3, #4
 8005a04:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <SUBGRF_SetModulationParams+0x19c>)
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7d1b      	ldrb	r3, [r3, #20]
 8005a2c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4619      	mov	r1, r3
 8005a38:	208b      	movs	r0, #139	; 0x8b
 8005a3a:	f000 fa2d 	bl	8005e98 <SUBGRF_WriteCommand>
        break;
 8005a3e:	e039      	b.n	8005ab4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8005a40:	2304      	movs	r3, #4
 8005a42:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	7e1b      	ldrb	r3, [r3, #24]
 8005a48:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7e5b      	ldrb	r3, [r3, #25]
 8005a4e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	7e9b      	ldrb	r3, [r3, #26]
 8005a54:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	7edb      	ldrb	r3, [r3, #27]
 8005a5a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f107 0308 	add.w	r3, r7, #8
 8005a64:	4619      	mov	r1, r3
 8005a66:	208b      	movs	r0, #139	; 0x8b
 8005a68:	f000 fa16 	bl	8005e98 <SUBGRF_WriteCommand>

        break;
 8005a6c:	e022      	b.n	8005ab4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8005a6e:	2305      	movs	r3, #5
 8005a70:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <SUBGRF_SetModulationParams+0x19c>)
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	7b1b      	ldrb	r3, [r3, #12]
 8005a98:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7b5b      	ldrb	r3, [r3, #13]
 8005a9e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005aa0:	7cfb      	ldrb	r3, [r7, #19]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f107 0308 	add.w	r3, r7, #8
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	208b      	movs	r0, #139	; 0x8b
 8005aac:	f000 f9f4 	bl	8005e98 <SUBGRF_WriteCommand>
        break;
 8005ab0:	e000      	b.n	8005ab4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8005ab2:	bf00      	nop
    }
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005abe:	bf00      	nop
 8005ac0:	080078a4 	.word	0x080078a4
 8005ac4:	200001ed 	.word	0x200001ed
 8005ac8:	3d090000 	.word	0x3d090000
 8005acc:	01e84800 	.word	0x01e84800

08005ad0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8005adc:	4a48      	ldr	r2, [pc, #288]	; (8005c00 <SUBGRF_SetPacketParams+0x130>)
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ae4:	c303      	stmia	r3!, {r0, r1}
 8005ae6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	4b45      	ldr	r3, [pc, #276]	; (8005c04 <SUBGRF_SetPacketParams+0x134>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d004      	beq.n	8005afe <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fe23 	bl	8005744 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d878      	bhi.n	8005bf8 <SUBGRF_SetPacketParams+0x128>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <SUBGRF_SetPacketParams+0x3c>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005bad 	.word	0x08005bad
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005b1d 	.word	0x08005b1d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	7a5b      	ldrb	r3, [r3, #9]
 8005b20:	2bf1      	cmp	r3, #241	; 0xf1
 8005b22:	d10a      	bne.n	8005b3a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8005b24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005b28:	f7ff fbb3 	bl	8005292 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8005b2c:	f248 0005 	movw	r0, #32773	; 0x8005
 8005b30:	f7ff fbcf 	bl	80052d2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8005b34:	2302      	movs	r3, #2
 8005b36:	75bb      	strb	r3, [r7, #22]
 8005b38:	e011      	b.n	8005b5e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	7a5b      	ldrb	r3, [r3, #9]
 8005b3e:	2bf2      	cmp	r3, #242	; 0xf2
 8005b40:	d10a      	bne.n	8005b58 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8005b42:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8005b46:	f7ff fba4 	bl	8005292 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8005b4a:	f241 0021 	movw	r0, #4129	; 0x1021
 8005b4e:	f7ff fbc0 	bl	80052d2 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8005b52:	2306      	movs	r3, #6
 8005b54:	75bb      	strb	r3, [r7, #22]
 8005b56:	e002      	b.n	8005b5e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7a5b      	ldrb	r3, [r3, #9]
 8005b5c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8005b5e:	2309      	movs	r3, #9
 8005b60:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	885b      	ldrh	r3, [r3, #2]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	885b      	ldrh	r3, [r3, #2]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	791b      	ldrb	r3, [r3, #4]
 8005b7a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	795b      	ldrb	r3, [r3, #5]
 8005b80:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	799b      	ldrb	r3, [r3, #6]
 8005b86:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	79db      	ldrb	r3, [r3, #7]
 8005b8c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	7a1b      	ldrb	r3, [r3, #8]
 8005b92:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8005b94:	7dbb      	ldrb	r3, [r7, #22]
 8005b96:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	7a9b      	ldrb	r3, [r3, #10]
 8005b9c:	753b      	strb	r3, [r7, #20]
        break;
 8005b9e:	e022      	b.n	8005be6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7b1b      	ldrb	r3, [r3, #12]
 8005ba8:	733b      	strb	r3, [r7, #12]
        break;
 8005baa:	e01c      	b.n	8005be6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8005bac:	2306      	movs	r3, #6
 8005bae:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	89db      	ldrh	r3, [r3, #14]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	89db      	ldrh	r3, [r3, #14]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7c1a      	ldrb	r2, [r3, #16]
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <SUBGRF_SetPacketParams+0x138>)
 8005bca:	4611      	mov	r1, r2
 8005bcc:	7019      	strb	r1, [r3, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c5b      	ldrb	r3, [r3, #17]
 8005bd6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c9b      	ldrb	r3, [r3, #18]
 8005bdc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7cdb      	ldrb	r3, [r3, #19]
 8005be2:	747b      	strb	r3, [r7, #17]
        break;
 8005be4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	4619      	mov	r1, r3
 8005bf0:	208c      	movs	r0, #140	; 0x8c
 8005bf2:	f000 f951 	bl	8005e98 <SUBGRF_WriteCommand>
 8005bf6:	e000      	b.n	8005bfa <SUBGRF_SetPacketParams+0x12a>
        return;
 8005bf8:	bf00      	nop
}
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	080078ac 	.word	0x080078ac
 8005c04:	200001ed 	.word	0x200001ed
 8005c08:	200001ee 	.word	0x200001ee

08005c0c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	460a      	mov	r2, r1
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8005c20:	79bb      	ldrb	r3, [r7, #6]
 8005c22:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8005c24:	f107 030c 	add.w	r3, r7, #12
 8005c28:	2202      	movs	r2, #2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	208f      	movs	r0, #143	; 0x8f
 8005c2e:	f000 f933 	bl	8005e98 <SUBGRF_WriteCommand>
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	2013      	movs	r0, #19
 8005c50:	f000 f944 	bl	8005edc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8005c54:	f7ff fd92 	bl	800577c <SUBGRF_GetPacketType>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d10d      	bne.n	8005c7a <SUBGRF_GetRxBufferStatus+0x3e>
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <SUBGRF_GetRxBufferStatus+0x54>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d108      	bne.n	8005c7a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8005c68:	f240 7002 	movw	r0, #1794	; 0x702
 8005c6c:	f000 f878 	bl	8005d60 <SUBGRF_ReadRegister>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e002      	b.n	8005c80 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8005c7a:	7b3a      	ldrb	r2, [r7, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8005c80:	7b7a      	ldrb	r2, [r7, #13]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	701a      	strb	r2, [r3, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200001ee 	.word	0x200001ee

08005c94 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8005c9c:	f107 030c 	add.w	r3, r7, #12
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	2014      	movs	r0, #20
 8005ca6:	f000 f919 	bl	8005edc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8005caa:	f7ff fd67 	bl	800577c <SUBGRF_GetPacketType>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <SUBGRF_GetPacketStatus+0x30>
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d013      	beq.n	8005cea <SUBGRF_GetPacketStatus+0x56>
 8005cc2:	e02a      	b.n	8005d1a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8005cc4:	7b3a      	ldrb	r2, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8005cca:	7b7b      	ldrb	r3, [r7, #13]
 8005ccc:	425b      	negs	r3, r3
 8005cce:	105b      	asrs	r3, r3, #1
 8005cd0:	b25a      	sxtb	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	425b      	negs	r3, r3
 8005cda:	105b      	asrs	r3, r3, #1
 8005cdc:	b25a      	sxtb	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	609a      	str	r2, [r3, #8]
            break;
 8005ce8:	e020      	b.n	8005d2c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8005cea:	7b3b      	ldrb	r3, [r7, #12]
 8005cec:	425b      	negs	r3, r3
 8005cee:	105b      	asrs	r3, r3, #1
 8005cf0:	b25a      	sxtb	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8005cf6:	7b7b      	ldrb	r3, [r7, #13]
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	109b      	asrs	r3, r3, #2
 8005cfe:	b25a      	sxtb	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	425b      	negs	r3, r3
 8005d08:	105b      	asrs	r3, r3, #1
 8005d0a:	b25a      	sxtb	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <SUBGRF_GetPacketStatus+0xa0>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	611a      	str	r2, [r3, #16]
            break;
 8005d18:	e008      	b.n	8005d2c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8005d1a:	2214      	movs	r2, #20
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa59 	bl	80061d6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	220f      	movs	r2, #15
 8005d28:	701a      	strb	r2, [r3, #0]
            break;
 8005d2a:	bf00      	nop
    }
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	200001f0 	.word	0x200001f0

08005d38 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	460a      	mov	r2, r1
 8005d42:	80fb      	strh	r3, [r7, #6]
 8005d44:	4613      	mov	r3, r2
 8005d46:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8005d48:	1d7a      	adds	r2, r7, #5
 8005d4a:	88f9      	ldrh	r1, [r7, #6]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	4803      	ldr	r0, [pc, #12]	; (8005d5c <SUBGRF_WriteRegister+0x24>)
 8005d50:	f7fd fcca 	bl	80036e8 <HAL_SUBGHZ_WriteRegisters>
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200000e0 	.word	0x200000e0

08005d60 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8005d6a:	f107 020f 	add.w	r2, r7, #15
 8005d6e:	88f9      	ldrh	r1, [r7, #6]
 8005d70:	2301      	movs	r3, #1
 8005d72:	4804      	ldr	r0, [pc, #16]	; (8005d84 <SUBGRF_ReadRegister+0x24>)
 8005d74:	f7fd fd17 	bl	80037a6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	200000e0 	.word	0x200000e0

08005d88 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	80fb      	strh	r3, [r7, #6]
 8005d94:	4613      	mov	r3, r2
 8005d96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d98:	f3ef 8310 	mrs	r3, PRIMASK
 8005d9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005da0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005da2:	b672      	cpsid	i
}
 8005da4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8005da6:	88bb      	ldrh	r3, [r7, #4]
 8005da8:	88f9      	ldrh	r1, [r7, #6]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	4806      	ldr	r0, [pc, #24]	; (8005dc8 <SUBGRF_WriteRegisters+0x40>)
 8005dae:	f7fd fc9b 	bl	80036e8 <HAL_SUBGHZ_WriteRegisters>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005dbe:	bf00      	nop
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200000e0 	.word	0x200000e0

08005dcc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	6039      	str	r1, [r7, #0]
 8005dd6:	80fb      	strh	r3, [r7, #6]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8005de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005de2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005de4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005de6:	b672      	cpsid	i
}
 8005de8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8005dea:	88bb      	ldrh	r3, [r7, #4]
 8005dec:	88f9      	ldrh	r1, [r7, #6]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	4806      	ldr	r0, [pc, #24]	; (8005e0c <SUBGRF_ReadRegisters+0x40>)
 8005df2:	f7fd fcd8 	bl	80037a6 <HAL_SUBGHZ_ReadRegisters>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f383 8810 	msr	PRIMASK, r3
}
 8005e00:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005e02:	bf00      	nop
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200000e0 	.word	0x200000e0

08005e10 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	6039      	str	r1, [r7, #0]
 8005e1a:	71fb      	strb	r3, [r7, #7]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e20:	f3ef 8310 	mrs	r3, PRIMASK
 8005e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e2a:	b672      	cpsid	i
}
 8005e2c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8005e2e:	79bb      	ldrb	r3, [r7, #6]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	79f9      	ldrb	r1, [r7, #7]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	4806      	ldr	r0, [pc, #24]	; (8005e50 <SUBGRF_WriteBuffer+0x40>)
 8005e38:	f7fd fdc9 	bl	80039ce <HAL_SUBGHZ_WriteBuffer>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f383 8810 	msr	PRIMASK, r3
}
 8005e46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200000e0 	.word	0x200000e0

08005e54 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	6039      	str	r1, [r7, #0]
 8005e5e:	71fb      	strb	r3, [r7, #7]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e64:	f3ef 8310 	mrs	r3, PRIMASK
 8005e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e6e:	b672      	cpsid	i
}
 8005e70:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8005e72:	79bb      	ldrb	r3, [r7, #6]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	79f9      	ldrb	r1, [r7, #7]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	4806      	ldr	r0, [pc, #24]	; (8005e94 <SUBGRF_ReadBuffer+0x40>)
 8005e7c:	f7fd fdfa 	bl	8003a74 <HAL_SUBGHZ_ReadBuffer>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f383 8810 	msr	PRIMASK, r3
}
 8005e8a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200000e0 	.word	0x200000e0

08005e98 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	71fb      	strb	r3, [r7, #7]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005eb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005eb2:	b672      	cpsid	i
}
 8005eb4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8005eb6:	88bb      	ldrh	r3, [r7, #4]
 8005eb8:	79f9      	ldrb	r1, [r7, #7]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	4806      	ldr	r0, [pc, #24]	; (8005ed8 <SUBGRF_WriteCommand+0x40>)
 8005ebe:	f7fd fcd3 	bl	8003868 <HAL_SUBGHZ_ExecSetCmd>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f383 8810 	msr	PRIMASK, r3
}
 8005ecc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200000e0 	.word	0x200000e0

08005edc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	71fb      	strb	r3, [r7, #7]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005ef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ef6:	b672      	cpsid	i
}
 8005ef8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8005efa:	88bb      	ldrh	r3, [r7, #4]
 8005efc:	79f9      	ldrb	r1, [r7, #7]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	4806      	ldr	r0, [pc, #24]	; (8005f1c <SUBGRF_ReadCommand+0x40>)
 8005f02:	f7fd fd10 	bl	8003926 <HAL_SUBGHZ_ExecGetCmd>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f383 8810 	msr	PRIMASK, r3
}
 8005f10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200000e0 	.word	0x200000e0

08005f20 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	460a      	mov	r2, r1
 8005f2a:	71fb      	strb	r3, [r7, #7]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8005f34:	79bb      	ldrb	r3, [r7, #6]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d10d      	bne.n	8005f56 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d104      	bne.n	8005f4a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8005f40:	2302      	movs	r3, #2
 8005f42:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8005f44:	2004      	movs	r0, #4
 8005f46:	f000 f8d7 	bl	80060f8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d107      	bne.n	8005f60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8005f50:	2303      	movs	r3, #3
 8005f52:	73fb      	strb	r3, [r7, #15]
 8005f54:	e004      	b.n	8005f60 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8005f56:	79bb      	ldrb	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f8f4 	bl	8006150 <RBI_ConfigRFSwitch>
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8005f7e:	f000 f8f4 	bl	800616a <RBI_GetTxConfig>
 8005f82:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d016      	beq.n	8005fb8 <SUBGRF_SetRfTxPower+0x48>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	dc16      	bgt.n	8005fbe <SUBGRF_SetRfTxPower+0x4e>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <SUBGRF_SetRfTxPower+0x2e>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d00a      	beq.n	8005fb2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8005f9c:	e00f      	b.n	8005fbe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8005f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fa2:	2b0f      	cmp	r3, #15
 8005fa4:	dd02      	ble.n	8005fac <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	73fb      	strb	r3, [r7, #15]
            break;
 8005faa:	e009      	b.n	8005fc0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
            break;
 8005fb0:	e006      	b.n	8005fc0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]
            break;
 8005fb6:	e003      	b.n	8005fc0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	73fb      	strb	r3, [r7, #15]
            break;
 8005fbc:	e000      	b.n	8005fc0 <SUBGRF_SetRfTxPower+0x50>
            break;
 8005fbe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8005fc0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff fbe1 	bl	8005790 <SUBGRF_SetTxParams>

    return paSelect;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	4798      	blx	r3
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200001f8 	.word	0x200001f8

08005ff4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2002      	movs	r0, #2
 8006002:	4798      	blx	r3
}
 8006004:	bf00      	nop
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	200001f8 	.word	0x200001f8

08006010 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2040      	movs	r0, #64	; 0x40
 800601e:	4798      	blx	r3
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	200001f8 	.word	0x200001f8

0800602c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800603e:	2b01      	cmp	r3, #1
 8006040:	d005      	beq.n	800604e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8006042:	e00a      	b.n	800605a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2080      	movs	r0, #128	; 0x80
 800604a:	4798      	blx	r3
            break;
 800604c:	e005      	b.n	800605a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006056:	4798      	blx	r3
            break;
 8006058:	bf00      	nop
    }
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200001f8 	.word	0x200001f8

08006068 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006070:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006078:	4798      	blx	r3
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200001f8 	.word	0x200001f8

08006088 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2020      	movs	r0, #32
 8006096:	4798      	blx	r3
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200001f8 	.word	0x200001f8

080060a4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2004      	movs	r0, #4
 80060b2:	4798      	blx	r3
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	200001f8 	.word	0x200001f8

080060c0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80060c8:	4b03      	ldr	r3, [pc, #12]	; (80060d8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2008      	movs	r0, #8
 80060ce:	4798      	blx	r3
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	200001f8 	.word	0x200001f8

080060dc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80060e4:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2010      	movs	r0, #16
 80060ea:	4798      	blx	r3
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200001f8 	.word	0x200001f8

080060f8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8006102:	f000 f848 	bl	8006196 <RBI_IsDCDC>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	d112      	bne.n	8006132 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800610c:	f640 1023 	movw	r0, #2339	; 0x923
 8006110:	f7ff fe26 	bl	8005d60 <SUBGRF_ReadRegister>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	f023 0306 	bic.w	r3, r3, #6
 800611e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8006120:	7bfa      	ldrb	r2, [r7, #15]
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	4313      	orrs	r3, r2
 8006126:	b2db      	uxtb	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	f640 1023 	movw	r0, #2339	; 0x923
 800612e:	f7ff fe03 	bl	8005d38 <SUBGRF_WriteRegister>
  }
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8006144:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800615e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr

0800616a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8006170:	2300      	movs	r3, #0
 8006172:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8006174:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8006176:	4618      	mov	r0, r3
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8006186:	2301      	movs	r3, #1
 8006188:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800618a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800619c:	2301      	movs	r3, #1
 800619e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 80061a0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 80061c0:	230f      	movs	r3, #15
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e001      	b.n	80061ca <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 80061c6:	2316      	movs	r3, #22
 80061c8:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 80061ca:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr

080061d6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
 80061e2:	4613      	mov	r3, r2
 80061e4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80061ea:	e004      	b.n	80061f6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	60fa      	str	r2, [r7, #12]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80061f6:	883b      	ldrh	r3, [r7, #0]
 80061f8:	1e5a      	subs	r2, r3, #1
 80061fa:	803a      	strh	r2, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f5      	bne.n	80061ec <UTIL_MEM_set_8+0x16>
  }
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <__errno>:
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <__errno+0x8>)
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000008 	.word	0x20000008

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4d0d      	ldr	r5, [pc, #52]	; (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2600      	movs	r6, #0
 8006224:	42a6      	cmp	r6, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4d0b      	ldr	r5, [pc, #44]	; (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	; (800625c <__libc_init_array+0x44>)
 800622c:	f001 f8b0 	bl	8007390 <_init>
 8006230:	1b64      	subs	r4, r4, r5
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2600      	movs	r6, #0
 8006236:	42a6      	cmp	r6, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006240:	4798      	blx	r3
 8006242:	3601      	adds	r6, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f855 3b04 	ldr.w	r3, [r5], #4
 800624a:	4798      	blx	r3
 800624c:	3601      	adds	r6, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	08007b24 	.word	0x08007b24
 8006254:	08007b24 	.word	0x08007b24
 8006258:	08007b24 	.word	0x08007b24
 800625c:	08007b28 	.word	0x08007b28

08006260 <memcpy>:
 8006260:	440a      	add	r2, r1
 8006262:	4291      	cmp	r1, r2
 8006264:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	4770      	bx	lr
 800626c:	b510      	push	{r4, lr}
 800626e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006276:	4291      	cmp	r1, r2
 8006278:	d1f9      	bne.n	800626e <memcpy+0xe>
 800627a:	bd10      	pop	{r4, pc}

0800627c <memset>:
 800627c:	4402      	add	r2, r0
 800627e:	4603      	mov	r3, r0
 8006280:	4293      	cmp	r3, r2
 8006282:	d100      	bne.n	8006286 <memset+0xa>
 8006284:	4770      	bx	lr
 8006286:	f803 1b01 	strb.w	r1, [r3], #1
 800628a:	e7f9      	b.n	8006280 <memset+0x4>

0800628c <iprintf>:
 800628c:	b40f      	push	{r0, r1, r2, r3}
 800628e:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <iprintf+0x2c>)
 8006290:	b513      	push	{r0, r1, r4, lr}
 8006292:	681c      	ldr	r4, [r3, #0]
 8006294:	b124      	cbz	r4, 80062a0 <iprintf+0x14>
 8006296:	69a3      	ldr	r3, [r4, #24]
 8006298:	b913      	cbnz	r3, 80062a0 <iprintf+0x14>
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fae0 	bl	8006860 <__sinit>
 80062a0:	ab05      	add	r3, sp, #20
 80062a2:	9a04      	ldr	r2, [sp, #16]
 80062a4:	68a1      	ldr	r1, [r4, #8]
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fce5 	bl	8006c78 <_vfiprintf_r>
 80062ae:	b002      	add	sp, #8
 80062b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b4:	b004      	add	sp, #16
 80062b6:	4770      	bx	lr
 80062b8:	20000008 	.word	0x20000008

080062bc <_puts_r>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	460e      	mov	r6, r1
 80062c0:	4605      	mov	r5, r0
 80062c2:	b118      	cbz	r0, 80062cc <_puts_r+0x10>
 80062c4:	6983      	ldr	r3, [r0, #24]
 80062c6:	b90b      	cbnz	r3, 80062cc <_puts_r+0x10>
 80062c8:	f000 faca 	bl	8006860 <__sinit>
 80062cc:	69ab      	ldr	r3, [r5, #24]
 80062ce:	68ac      	ldr	r4, [r5, #8]
 80062d0:	b913      	cbnz	r3, 80062d8 <_puts_r+0x1c>
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fac4 	bl	8006860 <__sinit>
 80062d8:	4b2c      	ldr	r3, [pc, #176]	; (800638c <_puts_r+0xd0>)
 80062da:	429c      	cmp	r4, r3
 80062dc:	d120      	bne.n	8006320 <_puts_r+0x64>
 80062de:	686c      	ldr	r4, [r5, #4]
 80062e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e2:	07db      	lsls	r3, r3, #31
 80062e4:	d405      	bmi.n	80062f2 <_puts_r+0x36>
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	0598      	lsls	r0, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_puts_r+0x36>
 80062ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062ee:	f000 fb55 	bl	800699c <__retarget_lock_acquire_recursive>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	0719      	lsls	r1, r3, #28
 80062f6:	d51d      	bpl.n	8006334 <_puts_r+0x78>
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	b1db      	cbz	r3, 8006334 <_puts_r+0x78>
 80062fc:	3e01      	subs	r6, #1
 80062fe:	68a3      	ldr	r3, [r4, #8]
 8006300:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006304:	3b01      	subs	r3, #1
 8006306:	60a3      	str	r3, [r4, #8]
 8006308:	bb39      	cbnz	r1, 800635a <_puts_r+0x9e>
 800630a:	2b00      	cmp	r3, #0
 800630c:	da38      	bge.n	8006380 <_puts_r+0xc4>
 800630e:	4622      	mov	r2, r4
 8006310:	210a      	movs	r1, #10
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f8ce 	bl	80064b4 <__swbuf_r>
 8006318:	3001      	adds	r0, #1
 800631a:	d011      	beq.n	8006340 <_puts_r+0x84>
 800631c:	250a      	movs	r5, #10
 800631e:	e011      	b.n	8006344 <_puts_r+0x88>
 8006320:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <_puts_r+0xd4>)
 8006322:	429c      	cmp	r4, r3
 8006324:	d101      	bne.n	800632a <_puts_r+0x6e>
 8006326:	68ac      	ldr	r4, [r5, #8]
 8006328:	e7da      	b.n	80062e0 <_puts_r+0x24>
 800632a:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <_puts_r+0xd8>)
 800632c:	429c      	cmp	r4, r3
 800632e:	bf08      	it	eq
 8006330:	68ec      	ldreq	r4, [r5, #12]
 8006332:	e7d5      	b.n	80062e0 <_puts_r+0x24>
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f90e 	bl	8006558 <__swsetup_r>
 800633c:	2800      	cmp	r0, #0
 800633e:	d0dd      	beq.n	80062fc <_puts_r+0x40>
 8006340:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006346:	07da      	lsls	r2, r3, #31
 8006348:	d405      	bmi.n	8006356 <_puts_r+0x9a>
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	059b      	lsls	r3, r3, #22
 800634e:	d402      	bmi.n	8006356 <_puts_r+0x9a>
 8006350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006352:	f000 fb24 	bl	800699e <__retarget_lock_release_recursive>
 8006356:	4628      	mov	r0, r5
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	2b00      	cmp	r3, #0
 800635c:	da04      	bge.n	8006368 <_puts_r+0xac>
 800635e:	69a2      	ldr	r2, [r4, #24]
 8006360:	429a      	cmp	r2, r3
 8006362:	dc06      	bgt.n	8006372 <_puts_r+0xb6>
 8006364:	290a      	cmp	r1, #10
 8006366:	d004      	beq.n	8006372 <_puts_r+0xb6>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	6022      	str	r2, [r4, #0]
 800636e:	7019      	strb	r1, [r3, #0]
 8006370:	e7c5      	b.n	80062fe <_puts_r+0x42>
 8006372:	4622      	mov	r2, r4
 8006374:	4628      	mov	r0, r5
 8006376:	f000 f89d 	bl	80064b4 <__swbuf_r>
 800637a:	3001      	adds	r0, #1
 800637c:	d1bf      	bne.n	80062fe <_puts_r+0x42>
 800637e:	e7df      	b.n	8006340 <_puts_r+0x84>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	250a      	movs	r5, #10
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	6022      	str	r2, [r4, #0]
 8006388:	701d      	strb	r5, [r3, #0]
 800638a:	e7db      	b.n	8006344 <_puts_r+0x88>
 800638c:	08007aa8 	.word	0x08007aa8
 8006390:	08007ac8 	.word	0x08007ac8
 8006394:	08007a88 	.word	0x08007a88

08006398 <puts>:
 8006398:	4b02      	ldr	r3, [pc, #8]	; (80063a4 <puts+0xc>)
 800639a:	4601      	mov	r1, r0
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	f7ff bf8d 	b.w	80062bc <_puts_r>
 80063a2:	bf00      	nop
 80063a4:	20000008 	.word	0x20000008

080063a8 <_strtol_l.constprop.0>:
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ae:	4680      	mov	r8, r0
 80063b0:	d001      	beq.n	80063b6 <_strtol_l.constprop.0+0xe>
 80063b2:	2b24      	cmp	r3, #36	; 0x24
 80063b4:	d906      	bls.n	80063c4 <_strtol_l.constprop.0+0x1c>
 80063b6:	f7ff ff29 	bl	800620c <__errno>
 80063ba:	2316      	movs	r3, #22
 80063bc:	6003      	str	r3, [r0, #0]
 80063be:	2000      	movs	r0, #0
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	4f35      	ldr	r7, [pc, #212]	; (800649c <_strtol_l.constprop.0+0xf4>)
 80063c6:	460d      	mov	r5, r1
 80063c8:	4628      	mov	r0, r5
 80063ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063ce:	5de6      	ldrb	r6, [r4, r7]
 80063d0:	f016 0608 	ands.w	r6, r6, #8
 80063d4:	d1f8      	bne.n	80063c8 <_strtol_l.constprop.0+0x20>
 80063d6:	2c2d      	cmp	r4, #45	; 0x2d
 80063d8:	d12f      	bne.n	800643a <_strtol_l.constprop.0+0x92>
 80063da:	782c      	ldrb	r4, [r5, #0]
 80063dc:	2601      	movs	r6, #1
 80063de:	1c85      	adds	r5, r0, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d057      	beq.n	8006494 <_strtol_l.constprop.0+0xec>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d109      	bne.n	80063fc <_strtol_l.constprop.0+0x54>
 80063e8:	2c30      	cmp	r4, #48	; 0x30
 80063ea:	d107      	bne.n	80063fc <_strtol_l.constprop.0+0x54>
 80063ec:	7828      	ldrb	r0, [r5, #0]
 80063ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80063f2:	2858      	cmp	r0, #88	; 0x58
 80063f4:	d149      	bne.n	800648a <_strtol_l.constprop.0+0xe2>
 80063f6:	786c      	ldrb	r4, [r5, #1]
 80063f8:	2310      	movs	r3, #16
 80063fa:	3502      	adds	r5, #2
 80063fc:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006400:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006404:	2700      	movs	r7, #0
 8006406:	fbbe f9f3 	udiv	r9, lr, r3
 800640a:	4638      	mov	r0, r7
 800640c:	fb03 ea19 	mls	sl, r3, r9, lr
 8006410:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006414:	f1bc 0f09 	cmp.w	ip, #9
 8006418:	d814      	bhi.n	8006444 <_strtol_l.constprop.0+0x9c>
 800641a:	4664      	mov	r4, ip
 800641c:	42a3      	cmp	r3, r4
 800641e:	dd22      	ble.n	8006466 <_strtol_l.constprop.0+0xbe>
 8006420:	2f00      	cmp	r7, #0
 8006422:	db1d      	blt.n	8006460 <_strtol_l.constprop.0+0xb8>
 8006424:	4581      	cmp	r9, r0
 8006426:	d31b      	bcc.n	8006460 <_strtol_l.constprop.0+0xb8>
 8006428:	d101      	bne.n	800642e <_strtol_l.constprop.0+0x86>
 800642a:	45a2      	cmp	sl, r4
 800642c:	db18      	blt.n	8006460 <_strtol_l.constprop.0+0xb8>
 800642e:	fb00 4003 	mla	r0, r0, r3, r4
 8006432:	2701      	movs	r7, #1
 8006434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006438:	e7ea      	b.n	8006410 <_strtol_l.constprop.0+0x68>
 800643a:	2c2b      	cmp	r4, #43	; 0x2b
 800643c:	bf04      	itt	eq
 800643e:	782c      	ldrbeq	r4, [r5, #0]
 8006440:	1c85      	addeq	r5, r0, #2
 8006442:	e7cd      	b.n	80063e0 <_strtol_l.constprop.0+0x38>
 8006444:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006448:	f1bc 0f19 	cmp.w	ip, #25
 800644c:	d801      	bhi.n	8006452 <_strtol_l.constprop.0+0xaa>
 800644e:	3c37      	subs	r4, #55	; 0x37
 8006450:	e7e4      	b.n	800641c <_strtol_l.constprop.0+0x74>
 8006452:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006456:	f1bc 0f19 	cmp.w	ip, #25
 800645a:	d804      	bhi.n	8006466 <_strtol_l.constprop.0+0xbe>
 800645c:	3c57      	subs	r4, #87	; 0x57
 800645e:	e7dd      	b.n	800641c <_strtol_l.constprop.0+0x74>
 8006460:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006464:	e7e6      	b.n	8006434 <_strtol_l.constprop.0+0x8c>
 8006466:	2f00      	cmp	r7, #0
 8006468:	da07      	bge.n	800647a <_strtol_l.constprop.0+0xd2>
 800646a:	2322      	movs	r3, #34	; 0x22
 800646c:	f8c8 3000 	str.w	r3, [r8]
 8006470:	4670      	mov	r0, lr
 8006472:	2a00      	cmp	r2, #0
 8006474:	d0a4      	beq.n	80063c0 <_strtol_l.constprop.0+0x18>
 8006476:	1e69      	subs	r1, r5, #1
 8006478:	e005      	b.n	8006486 <_strtol_l.constprop.0+0xde>
 800647a:	b106      	cbz	r6, 800647e <_strtol_l.constprop.0+0xd6>
 800647c:	4240      	negs	r0, r0
 800647e:	2a00      	cmp	r2, #0
 8006480:	d09e      	beq.n	80063c0 <_strtol_l.constprop.0+0x18>
 8006482:	2f00      	cmp	r7, #0
 8006484:	d1f7      	bne.n	8006476 <_strtol_l.constprop.0+0xce>
 8006486:	6011      	str	r1, [r2, #0]
 8006488:	e79a      	b.n	80063c0 <_strtol_l.constprop.0+0x18>
 800648a:	2430      	movs	r4, #48	; 0x30
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1b5      	bne.n	80063fc <_strtol_l.constprop.0+0x54>
 8006490:	2308      	movs	r3, #8
 8006492:	e7b3      	b.n	80063fc <_strtol_l.constprop.0+0x54>
 8006494:	2c30      	cmp	r4, #48	; 0x30
 8006496:	d0a9      	beq.n	80063ec <_strtol_l.constprop.0+0x44>
 8006498:	230a      	movs	r3, #10
 800649a:	e7af      	b.n	80063fc <_strtol_l.constprop.0+0x54>
 800649c:	08007985 	.word	0x08007985

080064a0 <strtol>:
 80064a0:	4613      	mov	r3, r2
 80064a2:	460a      	mov	r2, r1
 80064a4:	4601      	mov	r1, r0
 80064a6:	4802      	ldr	r0, [pc, #8]	; (80064b0 <strtol+0x10>)
 80064a8:	6800      	ldr	r0, [r0, #0]
 80064aa:	f7ff bf7d 	b.w	80063a8 <_strtol_l.constprop.0>
 80064ae:	bf00      	nop
 80064b0:	20000008 	.word	0x20000008

080064b4 <__swbuf_r>:
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b6:	460e      	mov	r6, r1
 80064b8:	4614      	mov	r4, r2
 80064ba:	4605      	mov	r5, r0
 80064bc:	b118      	cbz	r0, 80064c6 <__swbuf_r+0x12>
 80064be:	6983      	ldr	r3, [r0, #24]
 80064c0:	b90b      	cbnz	r3, 80064c6 <__swbuf_r+0x12>
 80064c2:	f000 f9cd 	bl	8006860 <__sinit>
 80064c6:	4b21      	ldr	r3, [pc, #132]	; (800654c <__swbuf_r+0x98>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	d12b      	bne.n	8006524 <__swbuf_r+0x70>
 80064cc:	686c      	ldr	r4, [r5, #4]
 80064ce:	69a3      	ldr	r3, [r4, #24]
 80064d0:	60a3      	str	r3, [r4, #8]
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	071a      	lsls	r2, r3, #28
 80064d6:	d52f      	bpl.n	8006538 <__swbuf_r+0x84>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	b36b      	cbz	r3, 8006538 <__swbuf_r+0x84>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	1ac0      	subs	r0, r0, r3
 80064e2:	6963      	ldr	r3, [r4, #20]
 80064e4:	b2f6      	uxtb	r6, r6
 80064e6:	4283      	cmp	r3, r0
 80064e8:	4637      	mov	r7, r6
 80064ea:	dc04      	bgt.n	80064f6 <__swbuf_r+0x42>
 80064ec:	4621      	mov	r1, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f922 	bl	8006738 <_fflush_r>
 80064f4:	bb30      	cbnz	r0, 8006544 <__swbuf_r+0x90>
 80064f6:	68a3      	ldr	r3, [r4, #8]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	60a3      	str	r3, [r4, #8]
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	6022      	str	r2, [r4, #0]
 8006502:	701e      	strb	r6, [r3, #0]
 8006504:	6963      	ldr	r3, [r4, #20]
 8006506:	3001      	adds	r0, #1
 8006508:	4283      	cmp	r3, r0
 800650a:	d004      	beq.n	8006516 <__swbuf_r+0x62>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	07db      	lsls	r3, r3, #31
 8006510:	d506      	bpl.n	8006520 <__swbuf_r+0x6c>
 8006512:	2e0a      	cmp	r6, #10
 8006514:	d104      	bne.n	8006520 <__swbuf_r+0x6c>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f90d 	bl	8006738 <_fflush_r>
 800651e:	b988      	cbnz	r0, 8006544 <__swbuf_r+0x90>
 8006520:	4638      	mov	r0, r7
 8006522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006524:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <__swbuf_r+0x9c>)
 8006526:	429c      	cmp	r4, r3
 8006528:	d101      	bne.n	800652e <__swbuf_r+0x7a>
 800652a:	68ac      	ldr	r4, [r5, #8]
 800652c:	e7cf      	b.n	80064ce <__swbuf_r+0x1a>
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <__swbuf_r+0xa0>)
 8006530:	429c      	cmp	r4, r3
 8006532:	bf08      	it	eq
 8006534:	68ec      	ldreq	r4, [r5, #12]
 8006536:	e7ca      	b.n	80064ce <__swbuf_r+0x1a>
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f80c 	bl	8006558 <__swsetup_r>
 8006540:	2800      	cmp	r0, #0
 8006542:	d0cb      	beq.n	80064dc <__swbuf_r+0x28>
 8006544:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006548:	e7ea      	b.n	8006520 <__swbuf_r+0x6c>
 800654a:	bf00      	nop
 800654c:	08007aa8 	.word	0x08007aa8
 8006550:	08007ac8 	.word	0x08007ac8
 8006554:	08007a88 	.word	0x08007a88

08006558 <__swsetup_r>:
 8006558:	4b32      	ldr	r3, [pc, #200]	; (8006624 <__swsetup_r+0xcc>)
 800655a:	b570      	push	{r4, r5, r6, lr}
 800655c:	681d      	ldr	r5, [r3, #0]
 800655e:	4606      	mov	r6, r0
 8006560:	460c      	mov	r4, r1
 8006562:	b125      	cbz	r5, 800656e <__swsetup_r+0x16>
 8006564:	69ab      	ldr	r3, [r5, #24]
 8006566:	b913      	cbnz	r3, 800656e <__swsetup_r+0x16>
 8006568:	4628      	mov	r0, r5
 800656a:	f000 f979 	bl	8006860 <__sinit>
 800656e:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <__swsetup_r+0xd0>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d10f      	bne.n	8006594 <__swsetup_r+0x3c>
 8006574:	686c      	ldr	r4, [r5, #4]
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800657c:	0719      	lsls	r1, r3, #28
 800657e:	d42c      	bmi.n	80065da <__swsetup_r+0x82>
 8006580:	06dd      	lsls	r5, r3, #27
 8006582:	d411      	bmi.n	80065a8 <__swsetup_r+0x50>
 8006584:	2309      	movs	r3, #9
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006592:	e03e      	b.n	8006612 <__swsetup_r+0xba>
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <__swsetup_r+0xd4>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d101      	bne.n	800659e <__swsetup_r+0x46>
 800659a:	68ac      	ldr	r4, [r5, #8]
 800659c:	e7eb      	b.n	8006576 <__swsetup_r+0x1e>
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <__swsetup_r+0xd8>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	bf08      	it	eq
 80065a4:	68ec      	ldreq	r4, [r5, #12]
 80065a6:	e7e6      	b.n	8006576 <__swsetup_r+0x1e>
 80065a8:	0758      	lsls	r0, r3, #29
 80065aa:	d512      	bpl.n	80065d2 <__swsetup_r+0x7a>
 80065ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ae:	b141      	cbz	r1, 80065c2 <__swsetup_r+0x6a>
 80065b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065b4:	4299      	cmp	r1, r3
 80065b6:	d002      	beq.n	80065be <__swsetup_r+0x66>
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 fa57 	bl	8006a6c <_free_r>
 80065be:	2300      	movs	r3, #0
 80065c0:	6363      	str	r3, [r4, #52]	; 0x34
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	2300      	movs	r3, #0
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	f043 0308 	orr.w	r3, r3, #8
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	b94b      	cbnz	r3, 80065f2 <__swsetup_r+0x9a>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e8:	d003      	beq.n	80065f2 <__swsetup_r+0x9a>
 80065ea:	4621      	mov	r1, r4
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 f9fd 	bl	80069ec <__smakebuf_r>
 80065f2:	89a0      	ldrh	r0, [r4, #12]
 80065f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065f8:	f010 0301 	ands.w	r3, r0, #1
 80065fc:	d00a      	beq.n	8006614 <__swsetup_r+0xbc>
 80065fe:	2300      	movs	r3, #0
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	425b      	negs	r3, r3
 8006606:	61a3      	str	r3, [r4, #24]
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	b943      	cbnz	r3, 800661e <__swsetup_r+0xc6>
 800660c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006610:	d1ba      	bne.n	8006588 <__swsetup_r+0x30>
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	0781      	lsls	r1, r0, #30
 8006616:	bf58      	it	pl
 8006618:	6963      	ldrpl	r3, [r4, #20]
 800661a:	60a3      	str	r3, [r4, #8]
 800661c:	e7f4      	b.n	8006608 <__swsetup_r+0xb0>
 800661e:	2000      	movs	r0, #0
 8006620:	e7f7      	b.n	8006612 <__swsetup_r+0xba>
 8006622:	bf00      	nop
 8006624:	20000008 	.word	0x20000008
 8006628:	08007aa8 	.word	0x08007aa8
 800662c:	08007ac8 	.word	0x08007ac8
 8006630:	08007a88 	.word	0x08007a88

08006634 <__sflush_r>:
 8006634:	898a      	ldrh	r2, [r1, #12]
 8006636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006638:	4605      	mov	r5, r0
 800663a:	0710      	lsls	r0, r2, #28
 800663c:	460c      	mov	r4, r1
 800663e:	d457      	bmi.n	80066f0 <__sflush_r+0xbc>
 8006640:	684b      	ldr	r3, [r1, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	dc04      	bgt.n	8006650 <__sflush_r+0x1c>
 8006646:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	dc01      	bgt.n	8006650 <__sflush_r+0x1c>
 800664c:	2000      	movs	r0, #0
 800664e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006652:	2e00      	cmp	r6, #0
 8006654:	d0fa      	beq.n	800664c <__sflush_r+0x18>
 8006656:	2300      	movs	r3, #0
 8006658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800665c:	682f      	ldr	r7, [r5, #0]
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	d032      	beq.n	80066c8 <__sflush_r+0x94>
 8006662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	075a      	lsls	r2, r3, #29
 8006668:	d505      	bpl.n	8006676 <__sflush_r+0x42>
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	1ac0      	subs	r0, r0, r3
 800666e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006670:	b10b      	cbz	r3, 8006676 <__sflush_r+0x42>
 8006672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006674:	1ac0      	subs	r0, r0, r3
 8006676:	2300      	movs	r3, #0
 8006678:	4602      	mov	r2, r0
 800667a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800667c:	6a21      	ldr	r1, [r4, #32]
 800667e:	4628      	mov	r0, r5
 8006680:	47b0      	blx	r6
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	d106      	bne.n	8006696 <__sflush_r+0x62>
 8006688:	6829      	ldr	r1, [r5, #0]
 800668a:	291d      	cmp	r1, #29
 800668c:	d82c      	bhi.n	80066e8 <__sflush_r+0xb4>
 800668e:	4a29      	ldr	r2, [pc, #164]	; (8006734 <__sflush_r+0x100>)
 8006690:	40ca      	lsrs	r2, r1
 8006692:	07d6      	lsls	r6, r2, #31
 8006694:	d528      	bpl.n	80066e8 <__sflush_r+0xb4>
 8006696:	2200      	movs	r2, #0
 8006698:	6062      	str	r2, [r4, #4]
 800669a:	04d9      	lsls	r1, r3, #19
 800669c:	6922      	ldr	r2, [r4, #16]
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	d504      	bpl.n	80066ac <__sflush_r+0x78>
 80066a2:	1c42      	adds	r2, r0, #1
 80066a4:	d101      	bne.n	80066aa <__sflush_r+0x76>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	b903      	cbnz	r3, 80066ac <__sflush_r+0x78>
 80066aa:	6560      	str	r0, [r4, #84]	; 0x54
 80066ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ae:	602f      	str	r7, [r5, #0]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d0cb      	beq.n	800664c <__sflush_r+0x18>
 80066b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d002      	beq.n	80066c2 <__sflush_r+0x8e>
 80066bc:	4628      	mov	r0, r5
 80066be:	f000 f9d5 	bl	8006a6c <_free_r>
 80066c2:	2000      	movs	r0, #0
 80066c4:	6360      	str	r0, [r4, #52]	; 0x34
 80066c6:	e7c2      	b.n	800664e <__sflush_r+0x1a>
 80066c8:	6a21      	ldr	r1, [r4, #32]
 80066ca:	2301      	movs	r3, #1
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b0      	blx	r6
 80066d0:	1c41      	adds	r1, r0, #1
 80066d2:	d1c7      	bne.n	8006664 <__sflush_r+0x30>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0c4      	beq.n	8006664 <__sflush_r+0x30>
 80066da:	2b1d      	cmp	r3, #29
 80066dc:	d001      	beq.n	80066e2 <__sflush_r+0xae>
 80066de:	2b16      	cmp	r3, #22
 80066e0:	d101      	bne.n	80066e6 <__sflush_r+0xb2>
 80066e2:	602f      	str	r7, [r5, #0]
 80066e4:	e7b2      	b.n	800664c <__sflush_r+0x18>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ec:	81a3      	strh	r3, [r4, #12]
 80066ee:	e7ae      	b.n	800664e <__sflush_r+0x1a>
 80066f0:	690f      	ldr	r7, [r1, #16]
 80066f2:	2f00      	cmp	r7, #0
 80066f4:	d0aa      	beq.n	800664c <__sflush_r+0x18>
 80066f6:	0793      	lsls	r3, r2, #30
 80066f8:	680e      	ldr	r6, [r1, #0]
 80066fa:	bf08      	it	eq
 80066fc:	694b      	ldreq	r3, [r1, #20]
 80066fe:	600f      	str	r7, [r1, #0]
 8006700:	bf18      	it	ne
 8006702:	2300      	movne	r3, #0
 8006704:	1bf6      	subs	r6, r6, r7
 8006706:	608b      	str	r3, [r1, #8]
 8006708:	2e00      	cmp	r6, #0
 800670a:	dd9f      	ble.n	800664c <__sflush_r+0x18>
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006712:	4633      	mov	r3, r6
 8006714:	463a      	mov	r2, r7
 8006716:	4628      	mov	r0, r5
 8006718:	47e0      	blx	ip
 800671a:	2800      	cmp	r0, #0
 800671c:	dc06      	bgt.n	800672c <__sflush_r+0xf8>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800672a:	e790      	b.n	800664e <__sflush_r+0x1a>
 800672c:	4407      	add	r7, r0
 800672e:	1a36      	subs	r6, r6, r0
 8006730:	e7ea      	b.n	8006708 <__sflush_r+0xd4>
 8006732:	bf00      	nop
 8006734:	20400001 	.word	0x20400001

08006738 <_fflush_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	4605      	mov	r5, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b913      	cbnz	r3, 8006748 <_fflush_r+0x10>
 8006742:	2500      	movs	r5, #0
 8006744:	4628      	mov	r0, r5
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	b118      	cbz	r0, 8006752 <_fflush_r+0x1a>
 800674a:	6983      	ldr	r3, [r0, #24]
 800674c:	b90b      	cbnz	r3, 8006752 <_fflush_r+0x1a>
 800674e:	f000 f887 	bl	8006860 <__sinit>
 8006752:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <_fflush_r+0x6c>)
 8006754:	429c      	cmp	r4, r3
 8006756:	d11b      	bne.n	8006790 <_fflush_r+0x58>
 8006758:	686c      	ldr	r4, [r5, #4]
 800675a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0ef      	beq.n	8006742 <_fflush_r+0xa>
 8006762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006764:	07d0      	lsls	r0, r2, #31
 8006766:	d404      	bmi.n	8006772 <_fflush_r+0x3a>
 8006768:	0599      	lsls	r1, r3, #22
 800676a:	d402      	bmi.n	8006772 <_fflush_r+0x3a>
 800676c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800676e:	f000 f915 	bl	800699c <__retarget_lock_acquire_recursive>
 8006772:	4628      	mov	r0, r5
 8006774:	4621      	mov	r1, r4
 8006776:	f7ff ff5d 	bl	8006634 <__sflush_r>
 800677a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800677c:	07da      	lsls	r2, r3, #31
 800677e:	4605      	mov	r5, r0
 8006780:	d4e0      	bmi.n	8006744 <_fflush_r+0xc>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	059b      	lsls	r3, r3, #22
 8006786:	d4dd      	bmi.n	8006744 <_fflush_r+0xc>
 8006788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678a:	f000 f908 	bl	800699e <__retarget_lock_release_recursive>
 800678e:	e7d9      	b.n	8006744 <_fflush_r+0xc>
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <_fflush_r+0x70>)
 8006792:	429c      	cmp	r4, r3
 8006794:	d101      	bne.n	800679a <_fflush_r+0x62>
 8006796:	68ac      	ldr	r4, [r5, #8]
 8006798:	e7df      	b.n	800675a <_fflush_r+0x22>
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <_fflush_r+0x74>)
 800679c:	429c      	cmp	r4, r3
 800679e:	bf08      	it	eq
 80067a0:	68ec      	ldreq	r4, [r5, #12]
 80067a2:	e7da      	b.n	800675a <_fflush_r+0x22>
 80067a4:	08007aa8 	.word	0x08007aa8
 80067a8:	08007ac8 	.word	0x08007ac8
 80067ac:	08007a88 	.word	0x08007a88

080067b0 <std>:
 80067b0:	2300      	movs	r3, #0
 80067b2:	b510      	push	{r4, lr}
 80067b4:	4604      	mov	r4, r0
 80067b6:	e9c0 3300 	strd	r3, r3, [r0]
 80067ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067be:	6083      	str	r3, [r0, #8]
 80067c0:	8181      	strh	r1, [r0, #12]
 80067c2:	6643      	str	r3, [r0, #100]	; 0x64
 80067c4:	81c2      	strh	r2, [r0, #14]
 80067c6:	6183      	str	r3, [r0, #24]
 80067c8:	4619      	mov	r1, r3
 80067ca:	2208      	movs	r2, #8
 80067cc:	305c      	adds	r0, #92	; 0x5c
 80067ce:	f7ff fd55 	bl	800627c <memset>
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <std+0x38>)
 80067d4:	6263      	str	r3, [r4, #36]	; 0x24
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <std+0x3c>)
 80067d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80067da:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <std+0x40>)
 80067dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <std+0x44>)
 80067e0:	6224      	str	r4, [r4, #32]
 80067e2:	6323      	str	r3, [r4, #48]	; 0x30
 80067e4:	bd10      	pop	{r4, pc}
 80067e6:	bf00      	nop
 80067e8:	08007221 	.word	0x08007221
 80067ec:	08007243 	.word	0x08007243
 80067f0:	0800727b 	.word	0x0800727b
 80067f4:	0800729f 	.word	0x0800729f

080067f8 <_cleanup_r>:
 80067f8:	4901      	ldr	r1, [pc, #4]	; (8006800 <_cleanup_r+0x8>)
 80067fa:	f000 b8af 	b.w	800695c <_fwalk_reent>
 80067fe:	bf00      	nop
 8006800:	08006739 	.word	0x08006739

08006804 <__sfmoreglue>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	2268      	movs	r2, #104	; 0x68
 8006808:	1e4d      	subs	r5, r1, #1
 800680a:	4355      	muls	r5, r2
 800680c:	460e      	mov	r6, r1
 800680e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006812:	f000 f995 	bl	8006b40 <_malloc_r>
 8006816:	4604      	mov	r4, r0
 8006818:	b140      	cbz	r0, 800682c <__sfmoreglue+0x28>
 800681a:	2100      	movs	r1, #0
 800681c:	e9c0 1600 	strd	r1, r6, [r0]
 8006820:	300c      	adds	r0, #12
 8006822:	60a0      	str	r0, [r4, #8]
 8006824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006828:	f7ff fd28 	bl	800627c <memset>
 800682c:	4620      	mov	r0, r4
 800682e:	bd70      	pop	{r4, r5, r6, pc}

08006830 <__sfp_lock_acquire>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__sfp_lock_acquire+0x8>)
 8006832:	f000 b8b3 	b.w	800699c <__retarget_lock_acquire_recursive>
 8006836:	bf00      	nop
 8006838:	200001fd 	.word	0x200001fd

0800683c <__sfp_lock_release>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__sfp_lock_release+0x8>)
 800683e:	f000 b8ae 	b.w	800699e <__retarget_lock_release_recursive>
 8006842:	bf00      	nop
 8006844:	200001fd 	.word	0x200001fd

08006848 <__sinit_lock_acquire>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__sinit_lock_acquire+0x8>)
 800684a:	f000 b8a7 	b.w	800699c <__retarget_lock_acquire_recursive>
 800684e:	bf00      	nop
 8006850:	200001fe 	.word	0x200001fe

08006854 <__sinit_lock_release>:
 8006854:	4801      	ldr	r0, [pc, #4]	; (800685c <__sinit_lock_release+0x8>)
 8006856:	f000 b8a2 	b.w	800699e <__retarget_lock_release_recursive>
 800685a:	bf00      	nop
 800685c:	200001fe 	.word	0x200001fe

08006860 <__sinit>:
 8006860:	b510      	push	{r4, lr}
 8006862:	4604      	mov	r4, r0
 8006864:	f7ff fff0 	bl	8006848 <__sinit_lock_acquire>
 8006868:	69a3      	ldr	r3, [r4, #24]
 800686a:	b11b      	cbz	r3, 8006874 <__sinit+0x14>
 800686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006870:	f7ff bff0 	b.w	8006854 <__sinit_lock_release>
 8006874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006878:	6523      	str	r3, [r4, #80]	; 0x50
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <__sinit+0x68>)
 800687c:	4a13      	ldr	r2, [pc, #76]	; (80068cc <__sinit+0x6c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	62a2      	str	r2, [r4, #40]	; 0x28
 8006882:	42a3      	cmp	r3, r4
 8006884:	bf04      	itt	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	61a3      	streq	r3, [r4, #24]
 800688a:	4620      	mov	r0, r4
 800688c:	f000 f820 	bl	80068d0 <__sfp>
 8006890:	6060      	str	r0, [r4, #4]
 8006892:	4620      	mov	r0, r4
 8006894:	f000 f81c 	bl	80068d0 <__sfp>
 8006898:	60a0      	str	r0, [r4, #8]
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f818 	bl	80068d0 <__sfp>
 80068a0:	2200      	movs	r2, #0
 80068a2:	60e0      	str	r0, [r4, #12]
 80068a4:	2104      	movs	r1, #4
 80068a6:	6860      	ldr	r0, [r4, #4]
 80068a8:	f7ff ff82 	bl	80067b0 <std>
 80068ac:	68a0      	ldr	r0, [r4, #8]
 80068ae:	2201      	movs	r2, #1
 80068b0:	2109      	movs	r1, #9
 80068b2:	f7ff ff7d 	bl	80067b0 <std>
 80068b6:	68e0      	ldr	r0, [r4, #12]
 80068b8:	2202      	movs	r2, #2
 80068ba:	2112      	movs	r1, #18
 80068bc:	f7ff ff78 	bl	80067b0 <std>
 80068c0:	2301      	movs	r3, #1
 80068c2:	61a3      	str	r3, [r4, #24]
 80068c4:	e7d2      	b.n	800686c <__sinit+0xc>
 80068c6:	bf00      	nop
 80068c8:	08007980 	.word	0x08007980
 80068cc:	080067f9 	.word	0x080067f9

080068d0 <__sfp>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	4607      	mov	r7, r0
 80068d4:	f7ff ffac 	bl	8006830 <__sfp_lock_acquire>
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <__sfp+0x84>)
 80068da:	681e      	ldr	r6, [r3, #0]
 80068dc:	69b3      	ldr	r3, [r6, #24]
 80068de:	b913      	cbnz	r3, 80068e6 <__sfp+0x16>
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7ff ffbd 	bl	8006860 <__sinit>
 80068e6:	3648      	adds	r6, #72	; 0x48
 80068e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	d503      	bpl.n	80068f8 <__sfp+0x28>
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	b30b      	cbz	r3, 8006938 <__sfp+0x68>
 80068f4:	6836      	ldr	r6, [r6, #0]
 80068f6:	e7f7      	b.n	80068e8 <__sfp+0x18>
 80068f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068fc:	b9d5      	cbnz	r5, 8006934 <__sfp+0x64>
 80068fe:	4b16      	ldr	r3, [pc, #88]	; (8006958 <__sfp+0x88>)
 8006900:	60e3      	str	r3, [r4, #12]
 8006902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006906:	6665      	str	r5, [r4, #100]	; 0x64
 8006908:	f000 f847 	bl	800699a <__retarget_lock_init_recursive>
 800690c:	f7ff ff96 	bl	800683c <__sfp_lock_release>
 8006910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	61a5      	str	r5, [r4, #24]
 800691c:	2208      	movs	r2, #8
 800691e:	4629      	mov	r1, r5
 8006920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006924:	f7ff fcaa 	bl	800627c <memset>
 8006928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800692c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006930:	4620      	mov	r0, r4
 8006932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006934:	3468      	adds	r4, #104	; 0x68
 8006936:	e7d9      	b.n	80068ec <__sfp+0x1c>
 8006938:	2104      	movs	r1, #4
 800693a:	4638      	mov	r0, r7
 800693c:	f7ff ff62 	bl	8006804 <__sfmoreglue>
 8006940:	4604      	mov	r4, r0
 8006942:	6030      	str	r0, [r6, #0]
 8006944:	2800      	cmp	r0, #0
 8006946:	d1d5      	bne.n	80068f4 <__sfp+0x24>
 8006948:	f7ff ff78 	bl	800683c <__sfp_lock_release>
 800694c:	230c      	movs	r3, #12
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	e7ee      	b.n	8006930 <__sfp+0x60>
 8006952:	bf00      	nop
 8006954:	08007980 	.word	0x08007980
 8006958:	ffff0001 	.word	0xffff0001

0800695c <_fwalk_reent>:
 800695c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006960:	4606      	mov	r6, r0
 8006962:	4688      	mov	r8, r1
 8006964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006968:	2700      	movs	r7, #0
 800696a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800696e:	f1b9 0901 	subs.w	r9, r9, #1
 8006972:	d505      	bpl.n	8006980 <_fwalk_reent+0x24>
 8006974:	6824      	ldr	r4, [r4, #0]
 8006976:	2c00      	cmp	r4, #0
 8006978:	d1f7      	bne.n	800696a <_fwalk_reent+0xe>
 800697a:	4638      	mov	r0, r7
 800697c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006980:	89ab      	ldrh	r3, [r5, #12]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d907      	bls.n	8006996 <_fwalk_reent+0x3a>
 8006986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800698a:	3301      	adds	r3, #1
 800698c:	d003      	beq.n	8006996 <_fwalk_reent+0x3a>
 800698e:	4629      	mov	r1, r5
 8006990:	4630      	mov	r0, r6
 8006992:	47c0      	blx	r8
 8006994:	4307      	orrs	r7, r0
 8006996:	3568      	adds	r5, #104	; 0x68
 8006998:	e7e9      	b.n	800696e <_fwalk_reent+0x12>

0800699a <__retarget_lock_init_recursive>:
 800699a:	4770      	bx	lr

0800699c <__retarget_lock_acquire_recursive>:
 800699c:	4770      	bx	lr

0800699e <__retarget_lock_release_recursive>:
 800699e:	4770      	bx	lr

080069a0 <__swhatbuf_r>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	460e      	mov	r6, r1
 80069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a8:	2900      	cmp	r1, #0
 80069aa:	b096      	sub	sp, #88	; 0x58
 80069ac:	4614      	mov	r4, r2
 80069ae:	461d      	mov	r5, r3
 80069b0:	da08      	bge.n	80069c4 <__swhatbuf_r+0x24>
 80069b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	602a      	str	r2, [r5, #0]
 80069ba:	061a      	lsls	r2, r3, #24
 80069bc:	d410      	bmi.n	80069e0 <__swhatbuf_r+0x40>
 80069be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c2:	e00e      	b.n	80069e2 <__swhatbuf_r+0x42>
 80069c4:	466a      	mov	r2, sp
 80069c6:	f000 fc91 	bl	80072ec <_fstat_r>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	dbf1      	blt.n	80069b2 <__swhatbuf_r+0x12>
 80069ce:	9a01      	ldr	r2, [sp, #4]
 80069d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069d8:	425a      	negs	r2, r3
 80069da:	415a      	adcs	r2, r3
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	e7ee      	b.n	80069be <__swhatbuf_r+0x1e>
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	2000      	movs	r0, #0
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	b016      	add	sp, #88	; 0x58
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080069ec <__smakebuf_r>:
 80069ec:	898b      	ldrh	r3, [r1, #12]
 80069ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069f0:	079d      	lsls	r5, r3, #30
 80069f2:	4606      	mov	r6, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	d507      	bpl.n	8006a08 <__smakebuf_r+0x1c>
 80069f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	2301      	movs	r3, #1
 8006a02:	6163      	str	r3, [r4, #20]
 8006a04:	b002      	add	sp, #8
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	ab01      	add	r3, sp, #4
 8006a0a:	466a      	mov	r2, sp
 8006a0c:	f7ff ffc8 	bl	80069a0 <__swhatbuf_r>
 8006a10:	9900      	ldr	r1, [sp, #0]
 8006a12:	4605      	mov	r5, r0
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 f893 	bl	8006b40 <_malloc_r>
 8006a1a:	b948      	cbnz	r0, 8006a30 <__smakebuf_r+0x44>
 8006a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a20:	059a      	lsls	r2, r3, #22
 8006a22:	d4ef      	bmi.n	8006a04 <__smakebuf_r+0x18>
 8006a24:	f023 0303 	bic.w	r3, r3, #3
 8006a28:	f043 0302 	orr.w	r3, r3, #2
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7e3      	b.n	80069f8 <__smakebuf_r+0xc>
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <__smakebuf_r+0x7c>)
 8006a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	6020      	str	r0, [r4, #0]
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	9b00      	ldr	r3, [sp, #0]
 8006a40:	6163      	str	r3, [r4, #20]
 8006a42:	9b01      	ldr	r3, [sp, #4]
 8006a44:	6120      	str	r0, [r4, #16]
 8006a46:	b15b      	cbz	r3, 8006a60 <__smakebuf_r+0x74>
 8006a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 fc5f 	bl	8007310 <_isatty_r>
 8006a52:	b128      	cbz	r0, 8006a60 <__smakebuf_r+0x74>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	89a0      	ldrh	r0, [r4, #12]
 8006a62:	4305      	orrs	r5, r0
 8006a64:	81a5      	strh	r5, [r4, #12]
 8006a66:	e7cd      	b.n	8006a04 <__smakebuf_r+0x18>
 8006a68:	080067f9 	.word	0x080067f9

08006a6c <_free_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d041      	beq.n	8006af8 <_free_r+0x8c>
 8006a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a78:	1f0c      	subs	r4, r1, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfb8      	it	lt
 8006a7e:	18e4      	addlt	r4, r4, r3
 8006a80:	f000 fc68 	bl	8007354 <__malloc_lock>
 8006a84:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <_free_r+0x90>)
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	b933      	cbnz	r3, 8006a98 <_free_r+0x2c>
 8006a8a:	6063      	str	r3, [r4, #4]
 8006a8c:	6014      	str	r4, [r2, #0]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a94:	f000 bc64 	b.w	8007360 <__malloc_unlock>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d908      	bls.n	8006aae <_free_r+0x42>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	1821      	adds	r1, r4, r0
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf01      	itttt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	1809      	addeq	r1, r1, r0
 8006aaa:	6021      	streq	r1, [r4, #0]
 8006aac:	e7ed      	b.n	8006a8a <_free_r+0x1e>
 8006aae:	461a      	mov	r2, r3
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b10b      	cbz	r3, 8006ab8 <_free_r+0x4c>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d9fa      	bls.n	8006aae <_free_r+0x42>
 8006ab8:	6811      	ldr	r1, [r2, #0]
 8006aba:	1850      	adds	r0, r2, r1
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d10b      	bne.n	8006ad8 <_free_r+0x6c>
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	4401      	add	r1, r0
 8006ac4:	1850      	adds	r0, r2, r1
 8006ac6:	4283      	cmp	r3, r0
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	d1e0      	bne.n	8006a8e <_free_r+0x22>
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	6053      	str	r3, [r2, #4]
 8006ad2:	4401      	add	r1, r0
 8006ad4:	6011      	str	r1, [r2, #0]
 8006ad6:	e7da      	b.n	8006a8e <_free_r+0x22>
 8006ad8:	d902      	bls.n	8006ae0 <_free_r+0x74>
 8006ada:	230c      	movs	r3, #12
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	e7d6      	b.n	8006a8e <_free_r+0x22>
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	1821      	adds	r1, r4, r0
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	bf04      	itt	eq
 8006ae8:	6819      	ldreq	r1, [r3, #0]
 8006aea:	685b      	ldreq	r3, [r3, #4]
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	bf04      	itt	eq
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	6054      	str	r4, [r2, #4]
 8006af6:	e7ca      	b.n	8006a8e <_free_r+0x22>
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	20000200 	.word	0x20000200

08006b00 <sbrk_aligned>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4e0e      	ldr	r6, [pc, #56]	; (8006b3c <sbrk_aligned+0x3c>)
 8006b04:	460c      	mov	r4, r1
 8006b06:	6831      	ldr	r1, [r6, #0]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	b911      	cbnz	r1, 8006b12 <sbrk_aligned+0x12>
 8006b0c:	f000 fb78 	bl	8007200 <_sbrk_r>
 8006b10:	6030      	str	r0, [r6, #0]
 8006b12:	4621      	mov	r1, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 fb73 	bl	8007200 <_sbrk_r>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	d00a      	beq.n	8006b34 <sbrk_aligned+0x34>
 8006b1e:	1cc4      	adds	r4, r0, #3
 8006b20:	f024 0403 	bic.w	r4, r4, #3
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d007      	beq.n	8006b38 <sbrk_aligned+0x38>
 8006b28:	1a21      	subs	r1, r4, r0
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f000 fb68 	bl	8007200 <_sbrk_r>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d101      	bne.n	8006b38 <sbrk_aligned+0x38>
 8006b34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b38:	4620      	mov	r0, r4
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	20000204 	.word	0x20000204

08006b40 <_malloc_r>:
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	1ccd      	adds	r5, r1, #3
 8006b46:	f025 0503 	bic.w	r5, r5, #3
 8006b4a:	3508      	adds	r5, #8
 8006b4c:	2d0c      	cmp	r5, #12
 8006b4e:	bf38      	it	cc
 8006b50:	250c      	movcc	r5, #12
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	4607      	mov	r7, r0
 8006b56:	db01      	blt.n	8006b5c <_malloc_r+0x1c>
 8006b58:	42a9      	cmp	r1, r5
 8006b5a:	d905      	bls.n	8006b68 <_malloc_r+0x28>
 8006b5c:	230c      	movs	r3, #12
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	2600      	movs	r6, #0
 8006b62:	4630      	mov	r0, r6
 8006b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b68:	4e2e      	ldr	r6, [pc, #184]	; (8006c24 <_malloc_r+0xe4>)
 8006b6a:	f000 fbf3 	bl	8007354 <__malloc_lock>
 8006b6e:	6833      	ldr	r3, [r6, #0]
 8006b70:	461c      	mov	r4, r3
 8006b72:	bb34      	cbnz	r4, 8006bc2 <_malloc_r+0x82>
 8006b74:	4629      	mov	r1, r5
 8006b76:	4638      	mov	r0, r7
 8006b78:	f7ff ffc2 	bl	8006b00 <sbrk_aligned>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	4604      	mov	r4, r0
 8006b80:	d14d      	bne.n	8006c1e <_malloc_r+0xde>
 8006b82:	6834      	ldr	r4, [r6, #0]
 8006b84:	4626      	mov	r6, r4
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d140      	bne.n	8006c0c <_malloc_r+0xcc>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4638      	mov	r0, r7
 8006b90:	eb04 0803 	add.w	r8, r4, r3
 8006b94:	f000 fb34 	bl	8007200 <_sbrk_r>
 8006b98:	4580      	cmp	r8, r0
 8006b9a:	d13a      	bne.n	8006c12 <_malloc_r+0xd2>
 8006b9c:	6821      	ldr	r1, [r4, #0]
 8006b9e:	3503      	adds	r5, #3
 8006ba0:	1a6d      	subs	r5, r5, r1
 8006ba2:	f025 0503 	bic.w	r5, r5, #3
 8006ba6:	3508      	adds	r5, #8
 8006ba8:	2d0c      	cmp	r5, #12
 8006baa:	bf38      	it	cc
 8006bac:	250c      	movcc	r5, #12
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff ffa5 	bl	8006b00 <sbrk_aligned>
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d02b      	beq.n	8006c12 <_malloc_r+0xd2>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	442b      	add	r3, r5
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	e00e      	b.n	8006be0 <_malloc_r+0xa0>
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	1b52      	subs	r2, r2, r5
 8006bc6:	d41e      	bmi.n	8006c06 <_malloc_r+0xc6>
 8006bc8:	2a0b      	cmp	r2, #11
 8006bca:	d916      	bls.n	8006bfa <_malloc_r+0xba>
 8006bcc:	1961      	adds	r1, r4, r5
 8006bce:	42a3      	cmp	r3, r4
 8006bd0:	6025      	str	r5, [r4, #0]
 8006bd2:	bf18      	it	ne
 8006bd4:	6059      	strne	r1, [r3, #4]
 8006bd6:	6863      	ldr	r3, [r4, #4]
 8006bd8:	bf08      	it	eq
 8006bda:	6031      	streq	r1, [r6, #0]
 8006bdc:	5162      	str	r2, [r4, r5]
 8006bde:	604b      	str	r3, [r1, #4]
 8006be0:	4638      	mov	r0, r7
 8006be2:	f104 060b 	add.w	r6, r4, #11
 8006be6:	f000 fbbb 	bl	8007360 <__malloc_unlock>
 8006bea:	f026 0607 	bic.w	r6, r6, #7
 8006bee:	1d23      	adds	r3, r4, #4
 8006bf0:	1af2      	subs	r2, r6, r3
 8006bf2:	d0b6      	beq.n	8006b62 <_malloc_r+0x22>
 8006bf4:	1b9b      	subs	r3, r3, r6
 8006bf6:	50a3      	str	r3, [r4, r2]
 8006bf8:	e7b3      	b.n	8006b62 <_malloc_r+0x22>
 8006bfa:	6862      	ldr	r2, [r4, #4]
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	bf0c      	ite	eq
 8006c00:	6032      	streq	r2, [r6, #0]
 8006c02:	605a      	strne	r2, [r3, #4]
 8006c04:	e7ec      	b.n	8006be0 <_malloc_r+0xa0>
 8006c06:	4623      	mov	r3, r4
 8006c08:	6864      	ldr	r4, [r4, #4]
 8006c0a:	e7b2      	b.n	8006b72 <_malloc_r+0x32>
 8006c0c:	4634      	mov	r4, r6
 8006c0e:	6876      	ldr	r6, [r6, #4]
 8006c10:	e7b9      	b.n	8006b86 <_malloc_r+0x46>
 8006c12:	230c      	movs	r3, #12
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4638      	mov	r0, r7
 8006c18:	f000 fba2 	bl	8007360 <__malloc_unlock>
 8006c1c:	e7a1      	b.n	8006b62 <_malloc_r+0x22>
 8006c1e:	6025      	str	r5, [r4, #0]
 8006c20:	e7de      	b.n	8006be0 <_malloc_r+0xa0>
 8006c22:	bf00      	nop
 8006c24:	20000200 	.word	0x20000200

08006c28 <__sfputc_r>:
 8006c28:	6893      	ldr	r3, [r2, #8]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	b410      	push	{r4}
 8006c30:	6093      	str	r3, [r2, #8]
 8006c32:	da07      	bge.n	8006c44 <__sfputc_r+0x1c>
 8006c34:	6994      	ldr	r4, [r2, #24]
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	db01      	blt.n	8006c3e <__sfputc_r+0x16>
 8006c3a:	290a      	cmp	r1, #10
 8006c3c:	d102      	bne.n	8006c44 <__sfputc_r+0x1c>
 8006c3e:	bc10      	pop	{r4}
 8006c40:	f7ff bc38 	b.w	80064b4 <__swbuf_r>
 8006c44:	6813      	ldr	r3, [r2, #0]
 8006c46:	1c58      	adds	r0, r3, #1
 8006c48:	6010      	str	r0, [r2, #0]
 8006c4a:	7019      	strb	r1, [r3, #0]
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	bc10      	pop	{r4}
 8006c50:	4770      	bx	lr

08006c52 <__sfputs_r>:
 8006c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c54:	4606      	mov	r6, r0
 8006c56:	460f      	mov	r7, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	18d5      	adds	r5, r2, r3
 8006c5c:	42ac      	cmp	r4, r5
 8006c5e:	d101      	bne.n	8006c64 <__sfputs_r+0x12>
 8006c60:	2000      	movs	r0, #0
 8006c62:	e007      	b.n	8006c74 <__sfputs_r+0x22>
 8006c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c68:	463a      	mov	r2, r7
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff ffdc 	bl	8006c28 <__sfputc_r>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d1f3      	bne.n	8006c5c <__sfputs_r+0xa>
 8006c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c78 <_vfiprintf_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	b09d      	sub	sp, #116	; 0x74
 8006c80:	4614      	mov	r4, r2
 8006c82:	4698      	mov	r8, r3
 8006c84:	4606      	mov	r6, r0
 8006c86:	b118      	cbz	r0, 8006c90 <_vfiprintf_r+0x18>
 8006c88:	6983      	ldr	r3, [r0, #24]
 8006c8a:	b90b      	cbnz	r3, 8006c90 <_vfiprintf_r+0x18>
 8006c8c:	f7ff fde8 	bl	8006860 <__sinit>
 8006c90:	4b89      	ldr	r3, [pc, #548]	; (8006eb8 <_vfiprintf_r+0x240>)
 8006c92:	429d      	cmp	r5, r3
 8006c94:	d11b      	bne.n	8006cce <_vfiprintf_r+0x56>
 8006c96:	6875      	ldr	r5, [r6, #4]
 8006c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9a:	07d9      	lsls	r1, r3, #31
 8006c9c:	d405      	bmi.n	8006caa <_vfiprintf_r+0x32>
 8006c9e:	89ab      	ldrh	r3, [r5, #12]
 8006ca0:	059a      	lsls	r2, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_vfiprintf_r+0x32>
 8006ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ca6:	f7ff fe79 	bl	800699c <__retarget_lock_acquire_recursive>
 8006caa:	89ab      	ldrh	r3, [r5, #12]
 8006cac:	071b      	lsls	r3, r3, #28
 8006cae:	d501      	bpl.n	8006cb4 <_vfiprintf_r+0x3c>
 8006cb0:	692b      	ldr	r3, [r5, #16]
 8006cb2:	b9eb      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x78>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff fc4e 	bl	8006558 <__swsetup_r>
 8006cbc:	b1c0      	cbz	r0, 8006cf0 <_vfiprintf_r+0x78>
 8006cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc0:	07dc      	lsls	r4, r3, #31
 8006cc2:	d50e      	bpl.n	8006ce2 <_vfiprintf_r+0x6a>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc8:	b01d      	add	sp, #116	; 0x74
 8006cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cce:	4b7b      	ldr	r3, [pc, #492]	; (8006ebc <_vfiprintf_r+0x244>)
 8006cd0:	429d      	cmp	r5, r3
 8006cd2:	d101      	bne.n	8006cd8 <_vfiprintf_r+0x60>
 8006cd4:	68b5      	ldr	r5, [r6, #8]
 8006cd6:	e7df      	b.n	8006c98 <_vfiprintf_r+0x20>
 8006cd8:	4b79      	ldr	r3, [pc, #484]	; (8006ec0 <_vfiprintf_r+0x248>)
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	bf08      	it	eq
 8006cde:	68f5      	ldreq	r5, [r6, #12]
 8006ce0:	e7da      	b.n	8006c98 <_vfiprintf_r+0x20>
 8006ce2:	89ab      	ldrh	r3, [r5, #12]
 8006ce4:	0598      	lsls	r0, r3, #22
 8006ce6:	d4ed      	bmi.n	8006cc4 <_vfiprintf_r+0x4c>
 8006ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cea:	f7ff fe58 	bl	800699e <__retarget_lock_release_recursive>
 8006cee:	e7e9      	b.n	8006cc4 <_vfiprintf_r+0x4c>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cfe:	2330      	movs	r3, #48	; 0x30
 8006d00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ec4 <_vfiprintf_r+0x24c>
 8006d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d08:	f04f 0901 	mov.w	r9, #1
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	469a      	mov	sl, r3
 8006d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d14:	b10a      	cbz	r2, 8006d1a <_vfiprintf_r+0xa2>
 8006d16:	2a25      	cmp	r2, #37	; 0x25
 8006d18:	d1f9      	bne.n	8006d0e <_vfiprintf_r+0x96>
 8006d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d1e:	d00b      	beq.n	8006d38 <_vfiprintf_r+0xc0>
 8006d20:	465b      	mov	r3, fp
 8006d22:	4622      	mov	r2, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ff93 	bl	8006c52 <__sfputs_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f000 80aa 	beq.w	8006e86 <_vfiprintf_r+0x20e>
 8006d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d34:	445a      	add	r2, fp
 8006d36:	9209      	str	r2, [sp, #36]	; 0x24
 8006d38:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80a2 	beq.w	8006e86 <_vfiprintf_r+0x20e>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d4c:	f10a 0a01 	add.w	sl, sl, #1
 8006d50:	9304      	str	r3, [sp, #16]
 8006d52:	9307      	str	r3, [sp, #28]
 8006d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d58:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5a:	4654      	mov	r4, sl
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d62:	4858      	ldr	r0, [pc, #352]	; (8006ec4 <_vfiprintf_r+0x24c>)
 8006d64:	f7f9 fa0c 	bl	8000180 <memchr>
 8006d68:	9a04      	ldr	r2, [sp, #16]
 8006d6a:	b9d8      	cbnz	r0, 8006da4 <_vfiprintf_r+0x12c>
 8006d6c:	06d1      	lsls	r1, r2, #27
 8006d6e:	bf44      	itt	mi
 8006d70:	2320      	movmi	r3, #32
 8006d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d76:	0713      	lsls	r3, r2, #28
 8006d78:	bf44      	itt	mi
 8006d7a:	232b      	movmi	r3, #43	; 0x2b
 8006d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d80:	f89a 3000 	ldrb.w	r3, [sl]
 8006d84:	2b2a      	cmp	r3, #42	; 0x2a
 8006d86:	d015      	beq.n	8006db4 <_vfiprintf_r+0x13c>
 8006d88:	9a07      	ldr	r2, [sp, #28]
 8006d8a:	4654      	mov	r4, sl
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f04f 0c0a 	mov.w	ip, #10
 8006d92:	4621      	mov	r1, r4
 8006d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d98:	3b30      	subs	r3, #48	; 0x30
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d94e      	bls.n	8006e3c <_vfiprintf_r+0x1c4>
 8006d9e:	b1b0      	cbz	r0, 8006dce <_vfiprintf_r+0x156>
 8006da0:	9207      	str	r2, [sp, #28]
 8006da2:	e014      	b.n	8006dce <_vfiprintf_r+0x156>
 8006da4:	eba0 0308 	sub.w	r3, r0, r8
 8006da8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	46a2      	mov	sl, r4
 8006db2:	e7d2      	b.n	8006d5a <_vfiprintf_r+0xe2>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	1d19      	adds	r1, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9103      	str	r1, [sp, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbb      	ittet	lt
 8006dc0:	425b      	neglt	r3, r3
 8006dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc6:	9307      	strge	r3, [sp, #28]
 8006dc8:	9307      	strlt	r3, [sp, #28]
 8006dca:	bfb8      	it	lt
 8006dcc:	9204      	strlt	r2, [sp, #16]
 8006dce:	7823      	ldrb	r3, [r4, #0]
 8006dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd2:	d10c      	bne.n	8006dee <_vfiprintf_r+0x176>
 8006dd4:	7863      	ldrb	r3, [r4, #1]
 8006dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd8:	d135      	bne.n	8006e46 <_vfiprintf_r+0x1ce>
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	9203      	str	r2, [sp, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfb8      	it	lt
 8006de6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dea:	3402      	adds	r4, #2
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ec8 <_vfiprintf_r+0x250>
 8006df2:	7821      	ldrb	r1, [r4, #0]
 8006df4:	2203      	movs	r2, #3
 8006df6:	4650      	mov	r0, sl
 8006df8:	f7f9 f9c2 	bl	8000180 <memchr>
 8006dfc:	b140      	cbz	r0, 8006e10 <_vfiprintf_r+0x198>
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	eba0 000a 	sub.w	r0, r0, sl
 8006e04:	fa03 f000 	lsl.w	r0, r3, r0
 8006e08:	9b04      	ldr	r3, [sp, #16]
 8006e0a:	4303      	orrs	r3, r0
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e14:	482d      	ldr	r0, [pc, #180]	; (8006ecc <_vfiprintf_r+0x254>)
 8006e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	f7f9 f9b0 	bl	8000180 <memchr>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d03f      	beq.n	8006ea4 <_vfiprintf_r+0x22c>
 8006e24:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <_vfiprintf_r+0x258>)
 8006e26:	bb1b      	cbnz	r3, 8006e70 <_vfiprintf_r+0x1f8>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	3307      	adds	r3, #7
 8006e2c:	f023 0307 	bic.w	r3, r3, #7
 8006e30:	3308      	adds	r3, #8
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e36:	443b      	add	r3, r7
 8006e38:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3a:	e767      	b.n	8006d0c <_vfiprintf_r+0x94>
 8006e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e40:	460c      	mov	r4, r1
 8006e42:	2001      	movs	r0, #1
 8006e44:	e7a5      	b.n	8006d92 <_vfiprintf_r+0x11a>
 8006e46:	2300      	movs	r3, #0
 8006e48:	3401      	adds	r4, #1
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f04f 0c0a 	mov.w	ip, #10
 8006e52:	4620      	mov	r0, r4
 8006e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e58:	3a30      	subs	r2, #48	; 0x30
 8006e5a:	2a09      	cmp	r2, #9
 8006e5c:	d903      	bls.n	8006e66 <_vfiprintf_r+0x1ee>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0c5      	beq.n	8006dee <_vfiprintf_r+0x176>
 8006e62:	9105      	str	r1, [sp, #20]
 8006e64:	e7c3      	b.n	8006dee <_vfiprintf_r+0x176>
 8006e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e7f0      	b.n	8006e52 <_vfiprintf_r+0x1da>
 8006e70:	ab03      	add	r3, sp, #12
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	462a      	mov	r2, r5
 8006e76:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <_vfiprintf_r+0x25c>)
 8006e78:	a904      	add	r1, sp, #16
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f3af 8000 	nop.w
 8006e80:	4607      	mov	r7, r0
 8006e82:	1c78      	adds	r0, r7, #1
 8006e84:	d1d6      	bne.n	8006e34 <_vfiprintf_r+0x1bc>
 8006e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e88:	07d9      	lsls	r1, r3, #31
 8006e8a:	d405      	bmi.n	8006e98 <_vfiprintf_r+0x220>
 8006e8c:	89ab      	ldrh	r3, [r5, #12]
 8006e8e:	059a      	lsls	r2, r3, #22
 8006e90:	d402      	bmi.n	8006e98 <_vfiprintf_r+0x220>
 8006e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e94:	f7ff fd83 	bl	800699e <__retarget_lock_release_recursive>
 8006e98:	89ab      	ldrh	r3, [r5, #12]
 8006e9a:	065b      	lsls	r3, r3, #25
 8006e9c:	f53f af12 	bmi.w	8006cc4 <_vfiprintf_r+0x4c>
 8006ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea2:	e711      	b.n	8006cc8 <_vfiprintf_r+0x50>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	462a      	mov	r2, r5
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <_vfiprintf_r+0x25c>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f000 f880 	bl	8006fb4 <_printf_i>
 8006eb4:	e7e4      	b.n	8006e80 <_vfiprintf_r+0x208>
 8006eb6:	bf00      	nop
 8006eb8:	08007aa8 	.word	0x08007aa8
 8006ebc:	08007ac8 	.word	0x08007ac8
 8006ec0:	08007a88 	.word	0x08007a88
 8006ec4:	08007ae8 	.word	0x08007ae8
 8006ec8:	08007aee 	.word	0x08007aee
 8006ecc:	08007af2 	.word	0x08007af2
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	08006c53 	.word	0x08006c53

08006ed8 <_printf_common>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	4699      	mov	r9, r3
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfb8      	it	lt
 8006eec:	4613      	movlt	r3, r2
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b10a      	cbz	r2, 8006efe <_printf_common+0x26>
 8006efa:	3301      	adds	r3, #1
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	0699      	lsls	r1, r3, #26
 8006f02:	bf42      	ittt	mi
 8006f04:	6833      	ldrmi	r3, [r6, #0]
 8006f06:	3302      	addmi	r3, #2
 8006f08:	6033      	strmi	r3, [r6, #0]
 8006f0a:	6825      	ldr	r5, [r4, #0]
 8006f0c:	f015 0506 	ands.w	r5, r5, #6
 8006f10:	d106      	bne.n	8006f20 <_printf_common+0x48>
 8006f12:	f104 0a19 	add.w	sl, r4, #25
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	6832      	ldr	r2, [r6, #0]
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dc26      	bgt.n	8006f6e <_printf_common+0x96>
 8006f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f24:	1e13      	subs	r3, r2, #0
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	0692      	lsls	r2, r2, #26
 8006f2e:	d42b      	bmi.n	8006f88 <_printf_common+0xb0>
 8006f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d01e      	beq.n	8006f7c <_printf_common+0xa4>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	68e5      	ldr	r5, [r4, #12]
 8006f42:	6832      	ldr	r2, [r6, #0]
 8006f44:	f003 0306 	and.w	r3, r3, #6
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	bf08      	it	eq
 8006f4c:	1aad      	subeq	r5, r5, r2
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	6922      	ldr	r2, [r4, #16]
 8006f52:	bf0c      	ite	eq
 8006f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f58:	2500      	movne	r5, #0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bfc4      	itt	gt
 8006f5e:	1a9b      	subgt	r3, r3, r2
 8006f60:	18ed      	addgt	r5, r5, r3
 8006f62:	2600      	movs	r6, #0
 8006f64:	341a      	adds	r4, #26
 8006f66:	42b5      	cmp	r5, r6
 8006f68:	d11a      	bne.n	8006fa0 <_printf_common+0xc8>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e008      	b.n	8006f80 <_printf_common+0xa8>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	4649      	mov	r1, r9
 8006f74:	4638      	mov	r0, r7
 8006f76:	47c0      	blx	r8
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d103      	bne.n	8006f84 <_printf_common+0xac>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7c6      	b.n	8006f16 <_printf_common+0x3e>
 8006f88:	18e1      	adds	r1, r4, r3
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	2030      	movs	r0, #48	; 0x30
 8006f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f92:	4422      	add	r2, r4
 8006f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	e7c7      	b.n	8006f30 <_printf_common+0x58>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0e6      	beq.n	8006f7c <_printf_common+0xa4>
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7d9      	b.n	8006f66 <_printf_common+0x8e>
	...

08006fb4 <_printf_i>:
 8006fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	7e0f      	ldrb	r7, [r1, #24]
 8006fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fbc:	2f78      	cmp	r7, #120	; 0x78
 8006fbe:	4691      	mov	r9, r2
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	469a      	mov	sl, r3
 8006fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fca:	d807      	bhi.n	8006fdc <_printf_i+0x28>
 8006fcc:	2f62      	cmp	r7, #98	; 0x62
 8006fce:	d80a      	bhi.n	8006fe6 <_printf_i+0x32>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	f000 80d8 	beq.w	8007186 <_printf_i+0x1d2>
 8006fd6:	2f58      	cmp	r7, #88	; 0x58
 8006fd8:	f000 80a3 	beq.w	8007122 <_printf_i+0x16e>
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe4:	e03a      	b.n	800705c <_printf_i+0xa8>
 8006fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fea:	2b15      	cmp	r3, #21
 8006fec:	d8f6      	bhi.n	8006fdc <_printf_i+0x28>
 8006fee:	a101      	add	r1, pc, #4	; (adr r1, 8006ff4 <_printf_i+0x40>)
 8006ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff4:	0800704d 	.word	0x0800704d
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08006fdd 	.word	0x08006fdd
 8007000:	08006fdd 	.word	0x08006fdd
 8007004:	08006fdd 	.word	0x08006fdd
 8007008:	08006fdd 	.word	0x08006fdd
 800700c:	08007061 	.word	0x08007061
 8007010:	08006fdd 	.word	0x08006fdd
 8007014:	08006fdd 	.word	0x08006fdd
 8007018:	08006fdd 	.word	0x08006fdd
 800701c:	08006fdd 	.word	0x08006fdd
 8007020:	0800716d 	.word	0x0800716d
 8007024:	08007091 	.word	0x08007091
 8007028:	0800714f 	.word	0x0800714f
 800702c:	08006fdd 	.word	0x08006fdd
 8007030:	08006fdd 	.word	0x08006fdd
 8007034:	0800718f 	.word	0x0800718f
 8007038:	08006fdd 	.word	0x08006fdd
 800703c:	08007091 	.word	0x08007091
 8007040:	08006fdd 	.word	0x08006fdd
 8007044:	08006fdd 	.word	0x08006fdd
 8007048:	08007157 	.word	0x08007157
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800705c:	2301      	movs	r3, #1
 800705e:	e0a3      	b.n	80071a8 <_printf_i+0x1f4>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	6829      	ldr	r1, [r5, #0]
 8007064:	0606      	lsls	r6, r0, #24
 8007066:	f101 0304 	add.w	r3, r1, #4
 800706a:	d50a      	bpl.n	8007082 <_printf_i+0xce>
 800706c:	680e      	ldr	r6, [r1, #0]
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	2e00      	cmp	r6, #0
 8007072:	da03      	bge.n	800707c <_printf_i+0xc8>
 8007074:	232d      	movs	r3, #45	; 0x2d
 8007076:	4276      	negs	r6, r6
 8007078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707c:	485e      	ldr	r0, [pc, #376]	; (80071f8 <_printf_i+0x244>)
 800707e:	230a      	movs	r3, #10
 8007080:	e019      	b.n	80070b6 <_printf_i+0x102>
 8007082:	680e      	ldr	r6, [r1, #0]
 8007084:	602b      	str	r3, [r5, #0]
 8007086:	f010 0f40 	tst.w	r0, #64	; 0x40
 800708a:	bf18      	it	ne
 800708c:	b236      	sxthne	r6, r6
 800708e:	e7ef      	b.n	8007070 <_printf_i+0xbc>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	6820      	ldr	r0, [r4, #0]
 8007094:	1d19      	adds	r1, r3, #4
 8007096:	6029      	str	r1, [r5, #0]
 8007098:	0601      	lsls	r1, r0, #24
 800709a:	d501      	bpl.n	80070a0 <_printf_i+0xec>
 800709c:	681e      	ldr	r6, [r3, #0]
 800709e:	e002      	b.n	80070a6 <_printf_i+0xf2>
 80070a0:	0646      	lsls	r6, r0, #25
 80070a2:	d5fb      	bpl.n	800709c <_printf_i+0xe8>
 80070a4:	881e      	ldrh	r6, [r3, #0]
 80070a6:	4854      	ldr	r0, [pc, #336]	; (80071f8 <_printf_i+0x244>)
 80070a8:	2f6f      	cmp	r7, #111	; 0x6f
 80070aa:	bf0c      	ite	eq
 80070ac:	2308      	moveq	r3, #8
 80070ae:	230a      	movne	r3, #10
 80070b0:	2100      	movs	r1, #0
 80070b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b6:	6865      	ldr	r5, [r4, #4]
 80070b8:	60a5      	str	r5, [r4, #8]
 80070ba:	2d00      	cmp	r5, #0
 80070bc:	bfa2      	ittt	ge
 80070be:	6821      	ldrge	r1, [r4, #0]
 80070c0:	f021 0104 	bicge.w	r1, r1, #4
 80070c4:	6021      	strge	r1, [r4, #0]
 80070c6:	b90e      	cbnz	r6, 80070cc <_printf_i+0x118>
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	d04d      	beq.n	8007168 <_printf_i+0x1b4>
 80070cc:	4615      	mov	r5, r2
 80070ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80070d2:	fb03 6711 	mls	r7, r3, r1, r6
 80070d6:	5dc7      	ldrb	r7, [r0, r7]
 80070d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070dc:	4637      	mov	r7, r6
 80070de:	42bb      	cmp	r3, r7
 80070e0:	460e      	mov	r6, r1
 80070e2:	d9f4      	bls.n	80070ce <_printf_i+0x11a>
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d10b      	bne.n	8007100 <_printf_i+0x14c>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	07de      	lsls	r6, r3, #31
 80070ec:	d508      	bpl.n	8007100 <_printf_i+0x14c>
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	6861      	ldr	r1, [r4, #4]
 80070f2:	4299      	cmp	r1, r3
 80070f4:	bfde      	ittt	le
 80070f6:	2330      	movle	r3, #48	; 0x30
 80070f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007100:	1b52      	subs	r2, r2, r5
 8007102:	6122      	str	r2, [r4, #16]
 8007104:	f8cd a000 	str.w	sl, [sp]
 8007108:	464b      	mov	r3, r9
 800710a:	aa03      	add	r2, sp, #12
 800710c:	4621      	mov	r1, r4
 800710e:	4640      	mov	r0, r8
 8007110:	f7ff fee2 	bl	8006ed8 <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	d14c      	bne.n	80071b2 <_printf_i+0x1fe>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800711c:	b004      	add	sp, #16
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	4835      	ldr	r0, [pc, #212]	; (80071f8 <_printf_i+0x244>)
 8007124:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007128:	6829      	ldr	r1, [r5, #0]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007130:	6029      	str	r1, [r5, #0]
 8007132:	061d      	lsls	r5, r3, #24
 8007134:	d514      	bpl.n	8007160 <_printf_i+0x1ac>
 8007136:	07df      	lsls	r7, r3, #31
 8007138:	bf44      	itt	mi
 800713a:	f043 0320 	orrmi.w	r3, r3, #32
 800713e:	6023      	strmi	r3, [r4, #0]
 8007140:	b91e      	cbnz	r6, 800714a <_printf_i+0x196>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f023 0320 	bic.w	r3, r3, #32
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	2310      	movs	r3, #16
 800714c:	e7b0      	b.n	80070b0 <_printf_i+0xfc>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	f043 0320 	orr.w	r3, r3, #32
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	2378      	movs	r3, #120	; 0x78
 8007158:	4828      	ldr	r0, [pc, #160]	; (80071fc <_printf_i+0x248>)
 800715a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800715e:	e7e3      	b.n	8007128 <_printf_i+0x174>
 8007160:	0659      	lsls	r1, r3, #25
 8007162:	bf48      	it	mi
 8007164:	b2b6      	uxthmi	r6, r6
 8007166:	e7e6      	b.n	8007136 <_printf_i+0x182>
 8007168:	4615      	mov	r5, r2
 800716a:	e7bb      	b.n	80070e4 <_printf_i+0x130>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	6826      	ldr	r6, [r4, #0]
 8007170:	6961      	ldr	r1, [r4, #20]
 8007172:	1d18      	adds	r0, r3, #4
 8007174:	6028      	str	r0, [r5, #0]
 8007176:	0635      	lsls	r5, r6, #24
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	d501      	bpl.n	8007180 <_printf_i+0x1cc>
 800717c:	6019      	str	r1, [r3, #0]
 800717e:	e002      	b.n	8007186 <_printf_i+0x1d2>
 8007180:	0670      	lsls	r0, r6, #25
 8007182:	d5fb      	bpl.n	800717c <_printf_i+0x1c8>
 8007184:	8019      	strh	r1, [r3, #0]
 8007186:	2300      	movs	r3, #0
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	4615      	mov	r5, r2
 800718c:	e7ba      	b.n	8007104 <_printf_i+0x150>
 800718e:	682b      	ldr	r3, [r5, #0]
 8007190:	1d1a      	adds	r2, r3, #4
 8007192:	602a      	str	r2, [r5, #0]
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	6862      	ldr	r2, [r4, #4]
 8007198:	2100      	movs	r1, #0
 800719a:	4628      	mov	r0, r5
 800719c:	f7f8 fff0 	bl	8000180 <memchr>
 80071a0:	b108      	cbz	r0, 80071a6 <_printf_i+0x1f2>
 80071a2:	1b40      	subs	r0, r0, r5
 80071a4:	6060      	str	r0, [r4, #4]
 80071a6:	6863      	ldr	r3, [r4, #4]
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	2300      	movs	r3, #0
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b0:	e7a8      	b.n	8007104 <_printf_i+0x150>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	462a      	mov	r2, r5
 80071b6:	4649      	mov	r1, r9
 80071b8:	4640      	mov	r0, r8
 80071ba:	47d0      	blx	sl
 80071bc:	3001      	adds	r0, #1
 80071be:	d0ab      	beq.n	8007118 <_printf_i+0x164>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	079b      	lsls	r3, r3, #30
 80071c4:	d413      	bmi.n	80071ee <_printf_i+0x23a>
 80071c6:	68e0      	ldr	r0, [r4, #12]
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	4298      	cmp	r0, r3
 80071cc:	bfb8      	it	lt
 80071ce:	4618      	movlt	r0, r3
 80071d0:	e7a4      	b.n	800711c <_printf_i+0x168>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4632      	mov	r2, r6
 80071d6:	4649      	mov	r1, r9
 80071d8:	4640      	mov	r0, r8
 80071da:	47d0      	blx	sl
 80071dc:	3001      	adds	r0, #1
 80071de:	d09b      	beq.n	8007118 <_printf_i+0x164>
 80071e0:	3501      	adds	r5, #1
 80071e2:	68e3      	ldr	r3, [r4, #12]
 80071e4:	9903      	ldr	r1, [sp, #12]
 80071e6:	1a5b      	subs	r3, r3, r1
 80071e8:	42ab      	cmp	r3, r5
 80071ea:	dcf2      	bgt.n	80071d2 <_printf_i+0x21e>
 80071ec:	e7eb      	b.n	80071c6 <_printf_i+0x212>
 80071ee:	2500      	movs	r5, #0
 80071f0:	f104 0619 	add.w	r6, r4, #25
 80071f4:	e7f5      	b.n	80071e2 <_printf_i+0x22e>
 80071f6:	bf00      	nop
 80071f8:	08007af9 	.word	0x08007af9
 80071fc:	08007b0a 	.word	0x08007b0a

08007200 <_sbrk_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d06      	ldr	r5, [pc, #24]	; (800721c <_sbrk_r+0x1c>)
 8007204:	2300      	movs	r3, #0
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7f9 ff6c 	bl	80010e8 <_sbrk>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_sbrk_r+0x1a>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_sbrk_r+0x1a>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20000208 	.word	0x20000208

08007220 <__sread>:
 8007220:	b510      	push	{r4, lr}
 8007222:	460c      	mov	r4, r1
 8007224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007228:	f000 f8a0 	bl	800736c <_read_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	bfab      	itete	ge
 8007230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007232:	89a3      	ldrhlt	r3, [r4, #12]
 8007234:	181b      	addge	r3, r3, r0
 8007236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800723a:	bfac      	ite	ge
 800723c:	6563      	strge	r3, [r4, #84]	; 0x54
 800723e:	81a3      	strhlt	r3, [r4, #12]
 8007240:	bd10      	pop	{r4, pc}

08007242 <__swrite>:
 8007242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007246:	461f      	mov	r7, r3
 8007248:	898b      	ldrh	r3, [r1, #12]
 800724a:	05db      	lsls	r3, r3, #23
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	4616      	mov	r6, r2
 8007252:	d505      	bpl.n	8007260 <__swrite+0x1e>
 8007254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007258:	2302      	movs	r3, #2
 800725a:	2200      	movs	r2, #0
 800725c:	f000 f868 	bl	8007330 <_lseek_r>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	4628      	mov	r0, r5
 8007272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007276:	f000 b817 	b.w	80072a8 <_write_r>

0800727a <__sseek>:
 800727a:	b510      	push	{r4, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007282:	f000 f855 	bl	8007330 <_lseek_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	bf15      	itete	ne
 800728c:	6560      	strne	r0, [r4, #84]	; 0x54
 800728e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007296:	81a3      	strheq	r3, [r4, #12]
 8007298:	bf18      	it	ne
 800729a:	81a3      	strhne	r3, [r4, #12]
 800729c:	bd10      	pop	{r4, pc}

0800729e <__sclose>:
 800729e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a2:	f000 b813 	b.w	80072cc <_close_r>
	...

080072a8 <_write_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	; (80072c8 <_write_r+0x20>)
 80072ac:	4604      	mov	r4, r0
 80072ae:	4608      	mov	r0, r1
 80072b0:	4611      	mov	r1, r2
 80072b2:	2200      	movs	r2, #0
 80072b4:	602a      	str	r2, [r5, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f7f9 fec9 	bl	800104e <_write>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_write_r+0x1e>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_write_r+0x1e>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	20000208 	.word	0x20000208

080072cc <_close_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d06      	ldr	r5, [pc, #24]	; (80072e8 <_close_r+0x1c>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	f7f9 fed5 	bl	8001086 <_close>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_close_r+0x1a>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_close_r+0x1a>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	20000208 	.word	0x20000208

080072ec <_fstat_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4d07      	ldr	r5, [pc, #28]	; (800730c <_fstat_r+0x20>)
 80072f0:	2300      	movs	r3, #0
 80072f2:	4604      	mov	r4, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	602b      	str	r3, [r5, #0]
 80072fa:	f7f9 fecf 	bl	800109c <_fstat>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d102      	bne.n	8007308 <_fstat_r+0x1c>
 8007302:	682b      	ldr	r3, [r5, #0]
 8007304:	b103      	cbz	r3, 8007308 <_fstat_r+0x1c>
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	bd38      	pop	{r3, r4, r5, pc}
 800730a:	bf00      	nop
 800730c:	20000208 	.word	0x20000208

08007310 <_isatty_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d06      	ldr	r5, [pc, #24]	; (800732c <_isatty_r+0x1c>)
 8007314:	2300      	movs	r3, #0
 8007316:	4604      	mov	r4, r0
 8007318:	4608      	mov	r0, r1
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	f7f9 fecd 	bl	80010ba <_isatty>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_isatty_r+0x1a>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_isatty_r+0x1a>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	20000208 	.word	0x20000208

08007330 <_lseek_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4d07      	ldr	r5, [pc, #28]	; (8007350 <_lseek_r+0x20>)
 8007334:	4604      	mov	r4, r0
 8007336:	4608      	mov	r0, r1
 8007338:	4611      	mov	r1, r2
 800733a:	2200      	movs	r2, #0
 800733c:	602a      	str	r2, [r5, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	f7f9 fec5 	bl	80010ce <_lseek>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_lseek_r+0x1e>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_lseek_r+0x1e>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	20000208 	.word	0x20000208

08007354 <__malloc_lock>:
 8007354:	4801      	ldr	r0, [pc, #4]	; (800735c <__malloc_lock+0x8>)
 8007356:	f7ff bb21 	b.w	800699c <__retarget_lock_acquire_recursive>
 800735a:	bf00      	nop
 800735c:	200001fc 	.word	0x200001fc

08007360 <__malloc_unlock>:
 8007360:	4801      	ldr	r0, [pc, #4]	; (8007368 <__malloc_unlock+0x8>)
 8007362:	f7ff bb1c 	b.w	800699e <__retarget_lock_release_recursive>
 8007366:	bf00      	nop
 8007368:	200001fc 	.word	0x200001fc

0800736c <_read_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	; (800738c <_read_r+0x20>)
 8007370:	4604      	mov	r4, r0
 8007372:	4608      	mov	r0, r1
 8007374:	4611      	mov	r1, r2
 8007376:	2200      	movs	r2, #0
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f7f9 fe4a 	bl	8001014 <_read>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_read_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_read_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000208 	.word	0x20000208

08007390 <_init>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr

0800739c <_fini>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	bf00      	nop
 80073a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a2:	bc08      	pop	{r3}
 80073a4:	469e      	mov	lr, r3
 80073a6:	4770      	bx	lr
