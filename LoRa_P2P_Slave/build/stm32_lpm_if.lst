ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32_lpm_if.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PWR_EnterOffMode,"ax",%progbits
  16              		.align	1
  17              		.global	PWR_EnterOffMode
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	PWR_EnterOffMode:
  25              	.LFB1163:
  26              		.file 1 "Core/Src/stm32_lpm_if.c"
   1:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32_lpm_if.c **** /**
   3:Core/Src/stm32_lpm_if.c ****   ******************************************************************************
   4:Core/Src/stm32_lpm_if.c ****   * @file    stm32_lpm_if.c
   5:Core/Src/stm32_lpm_if.c ****   * @author  MCD Application Team
   6:Core/Src/stm32_lpm_if.c ****   * @brief   Low layer function to enter/exit low power modes (stop, sleep)
   7:Core/Src/stm32_lpm_if.c ****   ******************************************************************************
   8:Core/Src/stm32_lpm_if.c ****   * @attention
   9:Core/Src/stm32_lpm_if.c ****   *
  10:Core/Src/stm32_lpm_if.c ****   * Copyright (c) 2022 STMicroelectronics.
  11:Core/Src/stm32_lpm_if.c ****   * All rights reserved.
  12:Core/Src/stm32_lpm_if.c ****   *
  13:Core/Src/stm32_lpm_if.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/stm32_lpm_if.c ****   * in the root directory of this software component.
  15:Core/Src/stm32_lpm_if.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/stm32_lpm_if.c ****   *
  17:Core/Src/stm32_lpm_if.c ****   ******************************************************************************
  18:Core/Src/stm32_lpm_if.c ****   */
  19:Core/Src/stm32_lpm_if.c **** /* USER CODE END Header */
  20:Core/Src/stm32_lpm_if.c **** 
  21:Core/Src/stm32_lpm_if.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32_lpm_if.c **** #include "platform.h"
  23:Core/Src/stm32_lpm_if.c **** #include "stm32_lpm.h"
  24:Core/Src/stm32_lpm_if.c **** #include "stm32_lpm_if.h"
  25:Core/Src/stm32_lpm_if.c **** #include "usart_if.h"
  26:Core/Src/stm32_lpm_if.c **** 
  27:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/stm32_lpm_if.c **** 
  29:Core/Src/stm32_lpm_if.c **** /* USER CODE END Includes */
  30:Core/Src/stm32_lpm_if.c **** 
  31:Core/Src/stm32_lpm_if.c **** /* External variables ---------------------------------------------------------*/
  32:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN EV */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 2


  33:Core/Src/stm32_lpm_if.c **** 
  34:Core/Src/stm32_lpm_if.c **** /* USER CODE END EV */
  35:Core/Src/stm32_lpm_if.c **** 
  36:Core/Src/stm32_lpm_if.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/stm32_lpm_if.c **** /**
  38:Core/Src/stm32_lpm_if.c ****   * @brief Power driver callbacks handler
  39:Core/Src/stm32_lpm_if.c ****   */
  40:Core/Src/stm32_lpm_if.c **** const struct UTIL_LPM_Driver_s UTIL_PowerDriver =
  41:Core/Src/stm32_lpm_if.c **** {
  42:Core/Src/stm32_lpm_if.c ****   PWR_EnterSleepMode,
  43:Core/Src/stm32_lpm_if.c ****   PWR_ExitSleepMode,
  44:Core/Src/stm32_lpm_if.c **** 
  45:Core/Src/stm32_lpm_if.c ****   PWR_EnterStopMode,
  46:Core/Src/stm32_lpm_if.c ****   PWR_ExitStopMode,
  47:Core/Src/stm32_lpm_if.c **** 
  48:Core/Src/stm32_lpm_if.c ****   PWR_EnterOffMode,
  49:Core/Src/stm32_lpm_if.c ****   PWR_ExitOffMode,
  50:Core/Src/stm32_lpm_if.c **** };
  51:Core/Src/stm32_lpm_if.c **** 
  52:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PTD */
  53:Core/Src/stm32_lpm_if.c **** 
  54:Core/Src/stm32_lpm_if.c **** /* USER CODE END PTD */
  55:Core/Src/stm32_lpm_if.c **** 
  56:Core/Src/stm32_lpm_if.c **** /* Private define ------------------------------------------------------------*/
  57:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PD */
  58:Core/Src/stm32_lpm_if.c **** 
  59:Core/Src/stm32_lpm_if.c **** /* USER CODE END PD */
  60:Core/Src/stm32_lpm_if.c **** 
  61:Core/Src/stm32_lpm_if.c **** /* Private macro -------------------------------------------------------------*/
  62:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PM */
  63:Core/Src/stm32_lpm_if.c **** 
  64:Core/Src/stm32_lpm_if.c **** /* USER CODE END PM */
  65:Core/Src/stm32_lpm_if.c **** 
  66:Core/Src/stm32_lpm_if.c **** /* Private variables ---------------------------------------------------------*/
  67:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PV */
  68:Core/Src/stm32_lpm_if.c **** 
  69:Core/Src/stm32_lpm_if.c **** /* USER CODE END PV */
  70:Core/Src/stm32_lpm_if.c **** 
  71:Core/Src/stm32_lpm_if.c **** /* Private function prototypes -----------------------------------------------*/
  72:Core/Src/stm32_lpm_if.c **** /* USER CODE BEGIN PFP */
  73:Core/Src/stm32_lpm_if.c **** 
  74:Core/Src/stm32_lpm_if.c **** /* USER CODE END PFP */
  75:Core/Src/stm32_lpm_if.c **** 
  76:Core/Src/stm32_lpm_if.c **** /* Exported functions --------------------------------------------------------*/
  77:Core/Src/stm32_lpm_if.c **** 
  78:Core/Src/stm32_lpm_if.c **** void PWR_EnterOffMode(void)
  79:Core/Src/stm32_lpm_if.c **** {
  27              		.loc 1 79 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  80:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterOffMode_1 */
  81:Core/Src/stm32_lpm_if.c **** 
  82:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterOffMode_1 */
  83:Core/Src/stm32_lpm_if.c **** }
  32              		.loc 1 83 1 view .LVU1
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 3


  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE1163:
  37              		.section	.text.PWR_ExitOffMode,"ax",%progbits
  38              		.align	1
  39              		.global	PWR_ExitOffMode
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	PWR_ExitOffMode:
  46              	.LFB1164:
  84:Core/Src/stm32_lpm_if.c **** 
  85:Core/Src/stm32_lpm_if.c **** void PWR_ExitOffMode(void)
  86:Core/Src/stm32_lpm_if.c **** {
  47              		.loc 1 86 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  87:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitOffMode_1 */
  88:Core/Src/stm32_lpm_if.c **** 
  89:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitOffMode_1 */
  90:Core/Src/stm32_lpm_if.c **** }
  52              		.loc 1 90 1 view .LVU3
  53 0000 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE1164:
  57              		.section	.text.PWR_EnterStopMode,"ax",%progbits
  58              		.align	1
  59              		.global	PWR_EnterStopMode
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	PWR_EnterStopMode:
  66              	.LFB1165:
  91:Core/Src/stm32_lpm_if.c **** 
  92:Core/Src/stm32_lpm_if.c **** void PWR_EnterStopMode(void)
  93:Core/Src/stm32_lpm_if.c **** {
  67              		.loc 1 93 1 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 08B5     		push	{r3, lr}
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 3, -8
  74              		.cfi_offset 14, -4
  94:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterStopMode_1 */
  95:Core/Src/stm32_lpm_if.c **** 
  96:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterStopMode_1 */
  97:Core/Src/stm32_lpm_if.c ****   HAL_SuspendTick();
  75              		.loc 1 97 3 view .LVU5
  76 0002 FFF7FEFF 		bl	HAL_SuspendTick
  77              	.LVL0:
  98:Core/Src/stm32_lpm_if.c ****   /* Clear Status Flag before entering STOP/STANDBY Mode */
  99:Core/Src/stm32_lpm_if.c ****   LL_PWR_ClearFlag_C1STOP_C1STB();
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 4


  78              		.loc 1 99 3 view .LVU6
  79              	.LBB4:
  80              	.LBI4:
  81              		.file 2 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h"
   1:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
   2:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   ******************************************************************************
   3:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @file    stm32wlxx_ll_pwr.h
   4:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @author  MCD Application Team
   5:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief   Header file of PWR LL module.
   6:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   ******************************************************************************
   7:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @attention
   8:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *
   9:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * Copyright (c) 2020 STMicroelectronics.
  10:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * All rights reserved.
  11:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *
  12:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * in the root directory of this software component.
  14:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *
  16:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   ******************************************************************************
  17:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  18:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  19:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #ifndef __STM32WLxx_LL_PWR_H
  21:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define __STM32WLxx_LL_PWR_H
  22:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  23:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #ifdef __cplusplus
  24:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** extern "C" {
  25:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
  26:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  27:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #include "stm32wlxx.h"
  29:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  30:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @addtogroup STM32WLxx_LL_Driver
  31:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  32:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  33:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  34:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(PWR)
  35:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  36:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL PWR
  37:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  38:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  39:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  40:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  43:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Private_Constants PWR Private Constants
  45:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  46:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  47:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define PWR_FLASH_POWER_MODE_UNLOCK_CODE  (0x0000C1B0UL)
  48:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
  49:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
  50:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  51:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  52:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Private macros ------------------------------------------------------------*/
  53:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 5


  54:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported types ------------------------------------------------------------*/
  55:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported constants --------------------------------------------------------*/
  56:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Constants PWR Exported Constants
  57:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  58:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  59:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  60:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_CLEAR_FLAG Clear Flags Defines
  61:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief    Flags defines which can be used with LL_PWR_WriteReg function
  62:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  63:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  64:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF                    PWR_SCR_CWUF
  65:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF3                   PWR_SCR_CWUF3
  66:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF2                   PWR_SCR_CWUF2
  67:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWUF1                   PWR_SCR_CWUF1
  68:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWPVDF                  PWR_SCR_CWPVDF
  69:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CWRFBUSYF               PWR_SCR_CWRFBUSYF
  70:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SCR_CC2HF                   PWR_SCR_CC2HF
  71:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2CSSF               PWR_EXTSCR_C2CSSF
  72:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1CSSF               PWR_EXTSCR_C1CSSF
  73:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
  74:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
  75:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  76:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  77:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GET_FLAG Get Flags Defines
  78:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief    Flags defines which can be used with LL_PWR_ReadReg function
  79:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
  80:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
  81:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUFI                    PWR_SR1_WUFI
  82:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUF3                    PWR_SR1_WUF3
  83:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUF2                    PWR_SR1_WUF2
  84:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WUF1                    PWR_SR1_WUF1
  85:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WPVDF                   PWR_SR1_WPVDF
  86:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  87:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_LDORDY                  PWR_SR2_LDORDY
  88:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_PVMO3                   PWR_SR2_PVMO3
  89:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_PVDO                    PWR_SR2_PVDO
  90:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_RFEOL                   PWR_SR2_RFEOLF
  91:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_VOSF                    PWR_SR2_VOSF
  92:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_REGLPF                  PWR_SR2_REGLPF
  93:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_REGLPS                  PWR_SR2_REGLPS
  94:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_REGMRS                  PWR_SR2_REGMRS
  95:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  96:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* SMPS flags */
  97:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_SMPSRDY                 PWR_SR2_SMPSRDY
  98:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
  99:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Radio flags */
 100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_WRFBUSY                 PWR_SR1_WRFBUSYF   /* Radio busy flag for wake-up and in
 101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_RFBUSYS                 PWR_SR2_RFBUSYS    /* Radio busy signal flag (current st
 102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_RFBUSYMS                PWR_SR2_RFBUSYMS   /* Radio busy masked signal flag (cur
 103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Multicore flags */
 105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1SBF                PWR_EXTSCR_C1SBF    /* System Standby flag for CPU1 */
 106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1STOP2F             PWR_EXTSCR_C1STOP2F /* System Stop 2 flag for CPU1 */
 107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1STOPF              PWR_EXTSCR_C1STOPF  /* System Stop 0 or stop 1 flag for 
 108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C1DS                 PWR_EXTSCR_C1DS     /* CPU1 deepsleep mode */
 109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
 110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2SBF                PWR_EXTSCR_C2SBF    /* System Standby flag for CPU2 */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 6


 111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2STOP2F             PWR_EXTSCR_C2STOP2F /* System Stop 2 flag for CPU2 */
 112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2STOPF              PWR_EXTSCR_C2STOPF  /* System Stop 0 or stop 1 flag for 
 113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_EXTSCR_C2DS                 PWR_EXTSCR_C2DS     /* CPU2 deepsleep mode */
 114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR2_C2BOOTS                 PWR_SR2_C2BOOTS     /* CPU2 boot request source informat
 115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SR1_C2HF                    PWR_SR1_C2HF        /* CPU2 hold interrupt flag */
 116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
 117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_REGU_VOLTAGE REGU VOLTAGE
 122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_REGU_VOLTAGE_SCALE1         (PWR_CR1_VOS_0) /* Regulator voltage output range 1 mode
 125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_REGU_VOLTAGE_SCALE2         (PWR_CR1_VOS_1) /* Regulator voltage output range 2 mode
 126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_MODE_PWR MODE PWR
 131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STOP0                  (0x000000000UL)
 134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STOP1                  (PWR_CR1_LPMS_0)
 135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STOP2                  (PWR_CR1_LPMS_1)
 136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_STANDBY                (PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0)
 137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_MODE_SHUTDOWN               (PWR_CR1_LPMS_2 | PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0)
 138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_FLASH_LPRUN_POWER_DOWN_MODE Flash power-down mode during low-power run mode
 143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_LPRUN_MODE_IDLE       (0x000000000UL)
 146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN (PWR_CR1_FPDR)
 147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_FLASH_SLEEP_POWER_DOWN_MODE Flash power-down mode during sleep mode
 152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_SLEEP_MODE_IDLE       (0x000000000UL)
 155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN (PWR_CR1_FPDS)
 156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_PVM Peripheral voltage monitoring
 161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVM_VDDA_1_62V              (PWR_CR2_PVME3)     /* Monitoring VDDA vs. 1.62V  */
 164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 7


 168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_PVDLEVEL PVDLEVEL
 169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_0                  (0x00000000UL)                                  /* VPVD0
 172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_1                  (PWR_CR2_PLS_0)                                 /* VPVD1
 173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_2                  (PWR_CR2_PLS_1)                                 /* VPVD2
 174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_3                  (PWR_CR2_PLS_1 | PWR_CR2_PLS_0)                 /* VPVD3
 175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_4                  (PWR_CR2_PLS_2)                                 /* VPVD4
 176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_5                  (PWR_CR2_PLS_2 | PWR_CR2_PLS_0)                 /* VPVD5
 177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_6                  (PWR_CR2_PLS_2 | PWR_CR2_PLS_1)                 /* VPVD6
 178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_7                  (PWR_CR2_PLS_2 | PWR_CR2_PLS_1 | PWR_CR2_PLS_0) /* Exter
 179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_EOL_OPERATING_MODES Monitoring of supply voltage for radio operating level 
 184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_EOL_DISABLE                  (0x00000000UL)    /*!< Monitoring of supply volta
 187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_EOL_ENABLE                   (PWR_CR5_RFEOLEN) /*!< Monitoring of supply volta
 188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_WAKEUP WAKEUP
 193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN1                 (PWR_CR3_EWUP1)
 196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN2                 (PWR_CR3_EWUP2)
 197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN3                 (PWR_CR3_EWUP3)
 198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_BATT_CHARG_RESISTOR BATT CHARG RESISTOR
 203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_BATT_CHARG_RESISTOR_5K      (0x00000000UL)
 206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_BATT_CHARGRESISTOR_1_5K     (PWR_CR4_VBRS)
 207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GPIO GPIO
 212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_A                      ((uint32_t)(&(PWR->PUCRA)))
 215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_B                      ((uint32_t)(&(PWR->PUCRB)))
 216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_C                      ((uint32_t)(&(PWR->PUCRC)))
 217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_H                      ((uint32_t)(&(PWR->PUCRH)))
 218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GPIO_BIT GPIO BIT
 223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 8


 225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Note: LL_PWR_GPIO_BIT_x defined from port B because all pins are available */
 226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /*       for PWR pull-up and pull-down.                                       */
 227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_0                  (PWR_PUCRB_PB0)
 228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_1                  (PWR_PUCRB_PB1)
 229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_2                  (PWR_PUCRB_PB2)
 230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_3                  (PWR_PUCRB_PB3)
 231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_4                  (PWR_PUCRB_PB4)
 232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_5                  (PWR_PUCRB_PB5)
 233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_6                  (PWR_PUCRB_PB6)
 234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_7                  (PWR_PUCRB_PB7)
 235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_8                  (PWR_PUCRB_PB8)
 236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_9                  (PWR_PUCRB_PB9)
 237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_10                 (PWR_PUCRB_PB10)
 238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_11                 (PWR_PUCRB_PB11)
 239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_12                 (PWR_PUCRB_PB12)
 240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_13                 (PWR_PUCRB_PB13)
 241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_14                 (PWR_PUCRB_PB14)
 242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_15                 (PWR_PUCRB_PB15)
 243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_SMPS_OPERATING_MODES SMPS step down converter operating modes
 248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SMPS_BYPASS                 (0x00000000UL)    /*!< SMPS step down in bypass mode (di
 251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SMPS_STEP_DOWN              (PWR_CR5_SMPSEN)  /*!< SMPS step down in step down mode 
 252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_BUSY_POLARITY Radio busy signal polarity
 257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_POLARITY_RISING  (0x00000000UL)     /*!< Radio busy signal polarity to ri
 260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_POLARITY_FALLING (PWR_CR4_WRFBUSYP) /*!< Radio busy signal polarity to fa
 261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_BUSY_TRIGGER Radio busy trigger
 266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_TRIGGER_NONE     (0x00000000UL)     /*!< Radio busy trigger action: no wa
 269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_BUSY_TRIGGER_WU_IT    (PWR_CR3_EWRFBUSY) /*!< Radio busy trigger action: wake-
 270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_IRQ_TRIGGER Radio IRQ trigger
 275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_IRQ_TRIGGER_NONE      (0x00000000UL)     /*!< Radio IRQ trigger action: no wak
 278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_RADIO_IRQ_TRIGGER_WU_IT     (PWR_CR3_EWRFIRQ)  /*!< Radio IRQ trigger action: wake-u
 279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 9


 282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EC_RADIO_SPI_NSS_SRC Radio Sub-GHz radio SPI NSS source
 284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SUBGHZSPI_NSS_SRC_SW        (0x00000000UL)            /*!< Sub-GHz radio SPI NSS con
 287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_SUBGHZSPI_NSS_SRC_LPTIM3    (PWR_CR1_SUBGHZSPINSSSEL) /*!< Sub-GHz radio SPI NSS con
 288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported macro ------------------------------------------------------------*/
 297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Macros PWR Exported Macros
 298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EM_WRITE_READ Common Write and read registers Macros
 302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Write a value in PWR register
 307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  __REG__ Register to be written
 308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  __VALUE__ Value to be written in the register
 309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_WriteReg(__REG__, __VALUE__) WRITE_REG(PWR->__REG__, (__VALUE__))
 312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Read a value in PWR register
 315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  __REG__ Register to be read
 316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Register value
 317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #define LL_PWR_ReadReg(__REG__) READ_REG(PWR->__REG__)
 319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
 325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /* Exported functions --------------------------------------------------------*/
 329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Functions PWR Exported Functions
 330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration Configuration
 334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
 335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Switch from run main mode to run low-power mode.
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 10


 339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_EnterLowPowerRunMode
 340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnterLowPowerRunMode(void)
 343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_LPR);
 345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Switch from run main mode to low-power mode.
 349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_ExitLowPowerRunMode
 350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ExitLowPowerRunMode(void)
 353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the regulator is in low-power mode
 359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_IsEnabledLowPowerRunMode
 360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledLowPowerRunMode(void)
 363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_LPR) == (PWR_CR1_LPR)) ? 1UL : 0UL);
 365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the main internal regulator output voltage
 369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   A delay is required for the internal regulator to be ready
 370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         after the voltage scaling has been changed.
 371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Check whether regulator reached the selected voltage level
 372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         can be done using function @ref LL_PWR_IsActiveFlag_VOS().
 373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          VOS           LL_PWR_SetRegulVoltageScaling
 374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  VoltageScaling This parameter can be one of the following values:
 375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
 376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
 377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
 380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the main internal regulator output voltage
 386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          VOS           LL_PWR_GetRegulVoltageScaling
 387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
 389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
 390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
 392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 11


 396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable access to the backup domain
 398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
 399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
 402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
 404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable access to the backup domain
 408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_DisableBkUpAccess
 409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBkUpAccess(void)
 412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the backup domain is enabled
 418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
 419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
 422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set Low-Power mode
 428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPMS          LL_PWR_SetPowerMode
 429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  LowPowerMode This parameter can be one of the following values:
 430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
 431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
 432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
 433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
 434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
 435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
 438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Low-Power mode
 444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          LPMS          LL_PWR_GetPowerMode
 445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
 447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
 448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
 449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
 450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
 451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetPowerMode(void)
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 12


 453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_LPMS));
 455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during low-power run mode
 459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDR          LL_PWR_SetFlashPowerModeLPRun
 460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
 461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
 462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
 463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetFlashPowerModeLPRun(uint32_t FlashLowPowerMode)
 466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Unlock bit FPDR */
 468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
 469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Update bit FPDR */
 471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_FPDR, FlashLowPowerMode);
 472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during low-power run mode
 476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDR          LL_PWR_GetFlashPowerModeLPRun
 477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
 479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
 480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetFlashPowerModeLPRun(void)
 482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_FPDR));
 484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during sleep mode
 488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDS          LL_PWR_SetFlashPowerModeSleep
 489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
 490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
 491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
 492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetFlashPowerModeSleep(uint32_t FlashLowPowerMode)
 495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_FPDS, FlashLowPowerMode);
 497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during sleep mode
 501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          FPDS          LL_PWR_GetFlashPowerModeSleep
 502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
 504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
 505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetFlashPowerModeSleep(void)
 507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_FPDS));
 509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 13


 510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable the Power Voltage Monitoring on a peripheral
 513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVME3         LL_PWR_EnablePVM
 514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePVM(uint32_t PeriphVoltage)
 519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR2, PeriphVoltage);
 521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable the Power Voltage Monitoring on a peripheral
 525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVME3         LL_PWR_DisablePVM
 526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePVM(uint32_t PeriphVoltage)
 531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PeriphVoltage);
 533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Power Voltage Monitoring is enabled on a peripheral
 537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVME3         LL_PWR_IsEnabledPVM
 538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPVM(uint32_t PeriphVoltage)
 543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PeriphVoltage) == (PeriphVoltage)) ? 1UL : 0UL);
 545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Configure the voltage threshold detected by the Power Voltage Detector
 549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PLS           LL_PWR_SetPVDLevel
 550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  PVDLevel This parameter can be one of the following values:
 551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_0
 552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_1
 553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_2
 554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_3
 555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_4
 556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_5
 557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_6
 558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_7
 559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetPVDLevel(uint32_t PVDLevel)
 562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, PVDLevel);
 564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 14


 567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the voltage threshold detection
 568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PLS           LL_PWR_GetPVDLevel
 569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_0
 571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_1
 572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_2
 573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_3
 574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_4
 575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_5
 576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_6
 577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_7
 578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetPVDLevel(void)
 580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR2, PWR_CR2_PLS));
 582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable Power Voltage Detector
 586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_EnablePVD
 587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePVD(void)
 590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable Power Voltage Detector
 596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_DisablePVD
 597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePVD(void)
 600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Power Voltage Detector is enabled
 606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_IsEnabledPVD
 607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPVD(void)
 610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PWR_CR2_PVDE) == (PWR_CR2_PVDE)) ? 1UL : 0UL);
 612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set monitoring of supply voltage for radio operating level
 616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         (radio End Of Life), radio must be in active mode.
 617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          RFEOLEN       LL_PWR_SetRadioEOL
 618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioEOL This parameter can be one of the following values:
 619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_DISABLE
 620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_ENABLE
 621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioEOL(uint32_t RadioEOL)
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 15


 624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR5, PWR_CR5_RFEOLEN, RadioEOL);
 626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get monitoring of supply voltage for radio operating level (radio End Of Life)
 630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          RFEOLEN       LL_PWR_GetRadioEOL
 631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_DISABLE
 633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_EOL_ENABLE
 634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioEOL(void)
 636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_RFEOLEN));
 638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable Internal Wake-up line
 642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
 643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableInternWU(void)
 646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_EIWUL);
 648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable Internal Wake-up line
 652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EIWF          LL_PWR_DisableInternWU
 653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableInternWU(void)
 656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EIWUL);
 658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Internal Wake-up line is enabled
 662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EIWF          LL_PWR_IsEnabledInternWU
 663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledInternWU(void)
 666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_EIWUL) == (PWR_CR3_EIWUL)) ? 1UL : 0UL);
 668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable pull-up and pull-down configuration
 672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_EnablePUPDCfg
 673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePUPDCfg(void)
 676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_APC);
 678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 16


 681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable pull-up and pull-down configuration
 682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_DisablePUPDCfg
 683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePUPDCfg(void)
 686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if pull-up and pull-down configuration is enabled
 692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_IsEnabledPUPDCfg
 693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
 696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_APC) == (PWR_CR3_APC)) ? 1UL : 0UL);
 698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable SRAM2 content retention in Standby mode
 702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_EnableSRAM2Retention
 703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableSRAM2Retention(void)
 706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_RRS);
 708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable SRAM2 content retention in Standby mode
 712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_DisableSRAM2Retention
 713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableSRAM2Retention(void)
 716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if SRAM2 content retention in Standby mode is enabled
 722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_IsEnabledSRAM2Retention
 723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledSRAM2Retention(void)
 726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_RRS) == (PWR_CR3_RRS)) ? 1UL : 0UL);
 728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable wake-up power voltage detection with trigger for CPU1
 732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Wake-up power voltage detection status can be checked
 733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         using function @ref LL_PWR_IsActiveFlag_WPVD().
 734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWPVD         LL_PWR_EnableWPVD
 735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableWPVD(void)
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 17


 738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_EWPVD);
 740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable wake-up power voltage detection with trigger for CPU1
 744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWPVD         LL_PWR_DisableWPVD
 745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableWPVD(void)
 748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EWPVD);
 750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if wake-up power voltage detection is enabled with trigger for CPU1
 754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWPVD         LL_PWR_IsEnabledWPVD
 755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledWPVD(void)
 758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_EWPVD) == (PWR_CR3_EWPVD)) ? 1UL : 0UL);
 760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable periodical sampling of supply voltage in Stop and Standby
 764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes for detecting condition of PDR and BOR reset.
 765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Caution: When enabled, and if the supply voltage drops below
 766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         the minimum operating condition between two supply voltage samples,
 767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         the reset condition is missed and no reset is generated.
 768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ULPEN         LL_PWR_EnableBORPVD_ULP
 769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBORPVD_ULP(void)
 772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_ULPEN);
 774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable periodical sampling of supply voltage in Stop and Standby
 778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes for detecting condition of PDR and BOR reset.
 779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ULPEN         LL_PWR_DisableBORPVD_ULP
 780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBORPVD_ULP(void)
 783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_ULPEN);
 785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if periodical sampling of supply voltage in Stop and Standby
 789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes is enabled.
 790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ULPEN         LL_PWR_IsEnabledBORPVD_ULP
 791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBORPVD_ULP(void)
 794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 18


 795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_ULPEN) == (PWR_CR3_ULPEN)) ? 1UL : 0UL);
 796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable the WakeUp PINx functionality
 800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_EnableWakeUpPin\n
 801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_EnableWakeUpPin\n
 802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_EnableWakeUpPin
 803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
 810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR3, WakeUpPin);
 812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable the WakeUp PINx functionality
 816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_DisableWakeUpPin\n
 817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_DisableWakeUpPin\n
 818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_DisableWakeUpPin
 819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
 826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, WakeUpPin);
 828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the WakeUp PINx functionality is enabled
 832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_IsEnabledWakeUpPin\n
 833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_IsEnabledWakeUpPin\n
 834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_IsEnabledWakeUpPin
 835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
 842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
 844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the resistor impedance
 848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBRS          LL_PWR_SetBattChargResistor
 849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  Resistor This parameter can be one of the following values:
 850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARG_RESISTOR_5K
 851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARGRESISTOR_1_5K
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 19


 852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetBattChargResistor(uint32_t Resistor)
 855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, Resistor);
 857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the resistor impedance
 861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBRS          LL_PWR_GetBattChargResistor
 862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARG_RESISTOR_5K
 864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARGRESISTOR_1_5K
 865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetBattChargResistor(void)
 867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR4, PWR_CR4_VBRS));
 869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable battery charging
 873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_EnableBatteryCharging
 874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBatteryCharging(void)
 877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR4, PWR_CR4_VBE);
 879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable battery charging
 883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_DisableBatteryCharging
 884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBatteryCharging(void)
 887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if battery charging is enabled
 893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_IsEnabledBatteryCharging
 894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBatteryCharging(void)
 897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, PWR_CR4_VBE) == (PWR_CR4_VBE)) ? 1UL : 0UL);
 899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the Wake-Up pin polarity low for the event detection
 903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_SetWakeUpPinPolarityLow\n
 904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_SetWakeUpPinPolarityLow\n
 905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_SetWakeUpPinPolarityLow
 906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 20


 909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
 913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR4, WakeUpPin);
 915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set the Wake-Up pin polarity high for the event detection
 919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_SetWakeUpPinPolarityHigh\n
 920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_SetWakeUpPinPolarityHigh\n
 921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_SetWakeUpPinPolarityHigh
 922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
 929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, WakeUpPin);
 931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get the Wake-Up pin polarity for the event detection
 935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_IsWakeUpPinPolarityLow\n
 936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_IsWakeUpPinPolarityLow\n
 937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_IsWakeUpPinPolarityLow
 938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsWakeUpPinPolarityLow(uint32_t WakeUpPin)
 945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
 947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable GPIO pull-up state in Standby and Shutdown modes
 951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
 952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
 953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_EnableGPIOPullUp\n
 954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
 955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
 956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRH        PU0-15        LL_PWR_EnableGPIOPullUp
 957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
 958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
 959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
 960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
 961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
 962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
 963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
 964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
 965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 21


 966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
 967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
 968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
 969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
 970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
 971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
 972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
 973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
 974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
 975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
 976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
 977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
 978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
 979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
 980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
 981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
 982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
 983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
 984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
 985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
 986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
 987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable GPIO pull-up state in Standby and Shutdown modes
 988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
 989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
 990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_DisableGPIOPullUp\n
 991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_DisableGPIOPullUp\n
 992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_DisableGPIOPullUp\n
 993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRH        PU0-15        LL_PWR_DisableGPIOPullUp
 994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
 995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
 996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
 997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
 998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
 999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
1021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 22


1023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if GPIO pull-up state is enabled
1025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PUCRH        PU0-15        LL_PWR_IsEnabledGPIOPullUp
1029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(*((__IO uint32_t *)(GPIO)), GPIONumber) == (GPIONumber)) ? 1UL : 0UL);
1056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable GPIO pull-down state in Standby and Shutdown modes
1060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
1061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
1062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_EnableGPIOPullDown\n
1063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRB        PD0-15        LL_PWR_EnableGPIOPullDown\n
1064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRC        PD0-15        LL_PWR_EnableGPIOPullDown\n
1065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRH        PD0-15        LL_PWR_EnableGPIOPullDown
1066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 23


1080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
1093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable GPIO pull-down state in Standby and Shutdown modes
1097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Some pins are not configurable for pulling in Standby and Shutdown
1098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes. Refer to reference manual for available pins and ports.
1099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_DisableGPIOPullDown\n
1100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRB        PD0-15        LL_PWR_DisableGPIOPullDown\n
1101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRC        PD0-15        LL_PWR_DisableGPIOPullDown\n
1102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRH        PD0-15        LL_PWR_DisableGPIOPullDown
1103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
1130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if GPIO pull-down state is enabled
1134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
1135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRB        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
1136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRC        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 24


1137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         PDCRH        PD0-15        LL_PWR_IsEnabledGPIOPullDown
1138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_H
1143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber) == (GPIONumber)) ? 1UL : 0UL);
1165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_SMPS Configuration of SMPS
1172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set SMPS operating mode
1177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   In case of a board without SMPS coil mounted, SMPS should not be activated.
1178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_SetMode
1179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  OperatingMode This parameter can be one of the following values:
1180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_BYPASS
1181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_STEP_DOWN
1182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SMPS_SetMode(uint32_t OperatingMode)
1185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR5, PWR_CR5_SMPSEN, OperatingMode);
1187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get SMPS operating mode
1191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_GetMode
1192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_BYPASS
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 25


1194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_STEP_DOWN
1195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_SMPS_GetMode(void)
1197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_SMPSEN));
1199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get SMPS effective operating mode
1203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   SMPS operating mode can be changed by hardware, therefore
1204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         requested operating mode can differ from effective low power mode.
1205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         - dependency SubGhz Radio IP: can switch SMPS on for radio activity.
1206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   In case of a board without SMPS coil mounted, SMPS should not be activated
1207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         and this function is not relevant.
1208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          SMPSRDY       LL_PWR_SMPS_GetEffectiveMode
1209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_BYPASS
1211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SMPS_STEP_DOWN
1212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_SMPS_GetEffectiveMode(void)
1214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Return a value corresponding to definition of literals                   */
1216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* LL_PWR_SMPS_BYPASS or LL_PWR_SMPS_STEP_DOWN.                             */
1217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) << (PWR_CR5_SMPSEN_Pos - PWR_SR2_SMPSRDY_Po
1218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  SMPS step down converter enable
1222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   This function can be used for specific usage of the SMPS,
1223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         for general usage of the SMPS the function
1224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SMPS_SetMode() should be used instead.
1225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
1226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SMPS_Enable(void)
1229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
1231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  SMPS step down converter enable
1235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   This function can be used for specific usage of the SMPS,
1236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         for general usage of the SMPS the function
1237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SMPS_SetMode() should be used instead.
1238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Disable
1239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SMPS_Disable(void)
1242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR5, PWR_CR5_SMPSEN);
1244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the SMPS step down converter is enabled
1248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_IsEnabled
1249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 26


1251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_SMPS_IsEnabled(void)
1252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSEN) == (PWR_CR5_SMPSEN)) ? 1UL : 0UL);
1254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_Radio Configuration of radio
1261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio busy signal polarity
1266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          RFBUSYP       LL_PWR_SetRadioBusyPolarity
1267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioBusyPolarity This parameter can be one of the following values:
1268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_RISING
1269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_FALLING
1270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioBusyPolarity(uint32_t RadioBusyPolarity)
1273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR4, PWR_CR4_WRFBUSYP, RadioBusyPolarity);
1275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy signal polarity
1279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          RFBUSYP       LL_PWR_GetRadioBusyPolarity
1280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_RISING
1282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_POLARITY_FALLING
1283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioBusyPolarity(void)
1285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR4, PWR_CR4_WRFBUSYP));
1287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio busy trigger action for CPU1: wake-up from low-power mode
1291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
1292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Signal polarity can be configured using function
1293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SetRadioBusyPolarity().
1294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFBUSY       LL_PWR_SetRadioBusyTrigger
1295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioBusyTrigger This parameter can be one of the following values:
1296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
1301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
1303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy trigger action for CPU1: wake-up from low-power mode
1307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 27


1308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFBUSY       LL_PWR_GetRadioBusyTrigger
1309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioBusyTrigger(void)
1314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR3, PWR_CR3_EWRFBUSY));
1316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio IRQ trigger action for CPU1: wake-up from low-power mode
1320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
1321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFIRQ        LL_PWR_SetRadioIRQTrigger
1322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioIRQTrigger This parameter can be one of the following values:
1323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRadioIRQTrigger(uint32_t RadioIRQTrigger)
1328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR3, PWR_CR3_EWRFIRQ, RadioIRQTrigger);
1330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio IRQ trigger action for CPU1: wake-up from low-power mode
1334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         Standby.
1335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR3          ERFIRQ        LL_PWR_GetRadioIRQTrigger
1336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRadioIRQTrigger(void)
1341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR3, PWR_CR3_EWRFIRQ));
1343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set sub-GHz radio SPI NSS control source
1347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          SUBGHZSPINSSSEL LL_PWR_SetSUBGHZSPI_NSSSource
1348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioSPI_NSSSource This parameter can be one of the following values:
1349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_SW
1350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_LPTIM3
1351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetSUBGHZSPI_NSSSource(uint32_t RadioSPI_NSSSource)
1354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_SUBGHZSPINSSSEL, RadioSPI_NSSSource);
1356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get sub-GHz radio SPI NSS control source
1360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR1          SUBGHZSPINSSSEL LL_PWR_GetSUBGHZSPI_NSSSource
1361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_SW
1363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_SUBGHZSPI_NSS_SRC_LPTIM3
1364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 28


1365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetSUBGHZSPI_NSSSource(void)
1366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_SUBGHZSPINSSSEL));
1368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set sub-GHz radio SPI NSS at logical level high.
1372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
1373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
1376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
1378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set sub-GHz radio SPI NSS at logical level low.
1382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
1383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
1386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
1388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check whether sub-GHz radio SPI NSS is at logical level high or low.
1392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SUBGHZSPICR  NSS           LL_PWR_IsSUBGHZSPI_NSS_Selected
1393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 for SUBGHZSPI_NSS selected or 0 for SUBGHZSPI_NSS unselected).
1394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsSUBGHZSPI_NSS_Selected(void)
1396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS) != (PWR_SUBGHZSPICR_NSS)) ? 1UL : 0UL);
1398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
1405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_Radio_CPU2 Configuration of radio for CPU2
1406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio busy trigger action for CPU2: wake-up from low-power mode,
1411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Signal polarity can be configured using function
1413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SetRadioBusyPolarity().
1414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFBUSY       LL_C2_PWR_SetRadioBusyTrigger
1415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioBusyTrigger This parameter can be one of the following values:
1416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
1421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 29


1422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR3, PWR_C2CR3_EWRFBUSY, RadioBusyTrigger);
1423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy trigger action for CPU2: wake-up from low-power mode,
1427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFBUSY       LL_C2_PWR_GetRadioBusyTrigger
1429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
1431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
1432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetRadioBusyTrigger(void)
1434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Note: Bit shift performed for literals to be generic between CPU1 and CPU2 */
1436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR3, PWR_C2CR3_EWRFBUSY));
1437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set radio IRQ trigger action for CPU2: wake-up from low-power mode,
1441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFIRQ        LL_C2_PWR_SetRadioIRQTrigger
1443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  RadioIRQTrigger This parameter can be one of the following values:
1444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetRadioIRQTrigger(uint32_t RadioIRQTrigger)
1449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR3, PWR_C2CR3_EWRFIRQ, RadioIRQTrigger);
1451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio IRQ trigger action for CPU2: wake-up from low-power mode,
1455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         interruption.
1456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        ERFIRQ        LL_C2_PWR_GetRadioIRQTrigger
1457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_NONE
1459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_RADIO_IRQ_TRIGGER_WU_IT
1460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetRadioIRQTrigger(void)
1462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR3, PWR_C2CR3_EWRFIRQ));
1464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_Multicore Configuration of multicore, intended to be executed
1471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Boot CPU2 after reset or wakeup from Stop or Standby modes.
1476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   CPU2 can boot from configuration of this function or from
1477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         an illegal access. For information of boot source,
1478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 30


1479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
1480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBootC2(void)
1483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
1485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Do not allow CPU2 to boot after reset or wakeup from Stop or Standby
1489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes.
1490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          C2BOOT        LL_PWR_DisableBootC2
1491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBootC2(void)
1494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, PWR_CR4_C2BOOT);
1496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if bit to boot CPU2 after reset or wakeup from Stop or Standby
1500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         modes is set
1501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   CPU2 can boot from configuration of this function or from
1502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         an illegal access. For information of boot source,
1503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
1504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll CR4          C2BOOT        LL_PWR_IsEnabledBootC2
1505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0)
1506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBootC2(void)
1508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, PWR_CR4_C2BOOT) == (PWR_CR4_C2BOOT)) ? 1UL : 0UL);
1510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration_CPU2 Configuration of CPU2, intended to be executed by CPU2
1517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set Low-Power mode for CPU2
1522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        LPMS          LL_C2_PWR_SetPowerMode
1523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  LowPowerMode This parameter can be one of the following values:
1524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
1525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
1526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
1527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
1528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
1529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
1532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
1534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 31


1536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Low-Power mode for CPU2
1538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        LPMS          LL_C2_PWR_GetPowerMode
1539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
1541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
1542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
1543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
1544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
1545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetPowerMode(void)
1547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR1, PWR_C2CR1_LPMS));
1549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during low-power run mode for CPU2
1553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDR          LL_C2_PWR_SetFlashPowerModeLPRun
1554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
1555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
1556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
1557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetFlashPowerModeLPRun(uint32_t FlashLowPowerMode)
1560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Unlock bit FPDR */
1562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->C2CR1, PWR_FLASH_POWER_MODE_UNLOCK_CODE);
1563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   /* Update bit FPDR */
1565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR1, PWR_C2CR1_FPDR, FlashLowPowerMode);
1566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during low-power run mode for CPU2
1570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDR          LL_C2_PWR_GetFlashPowerModeLPRun
1571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_IDLE
1573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN
1574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetFlashPowerModeLPRun(void)
1576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR1, PWR_C2CR1_FPDR));
1578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Set flash power-down mode during sleep mode for CPU2
1582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDS          LL_C2_PWR_SetFlashPowerModeSleep
1583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  FlashLowPowerMode This parameter can be one of the following values:
1584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
1585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
1586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_SetFlashPowerModeSleep(uint32_t FlashLowPowerMode)
1589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   MODIFY_REG(PWR->C2CR1, PWR_C2CR1_FPDS, FlashLowPowerMode);
1591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 32


1593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get flash power-down mode during sleep mode for CPU2
1595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR1        FPDS          LL_C2_PWR_GetFlashPowerModeSleep
1596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
1597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_IDLE
1598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN
1599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_GetFlashPowerModeSleep(void)
1601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->C2CR1, PWR_C2CR1_FPDS));
1603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable Internal Wake-up line for CPU2
1608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EIWUL         LL_C2_PWR_EnableInternWU
1609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnableInternWU(void)
1612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, PWR_C2CR3_EIWUL);
1614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable Internal Wake-up line for CPU2
1618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EIWUL         LL_C2_PWR_DisableInternWU
1619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisableInternWU(void)
1622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, PWR_C2CR3_EIWUL);
1624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if Internal Wake-up line is enabled for CPU2
1628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EIWUL         LL_C2_PWR_IsEnabledInternWU
1629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledInternWU(void)
1632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, PWR_C2CR3_EIWUL) == (PWR_C2CR3_EIWUL)) ? 1UL : 0UL);
1634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable the WakeUp PINx functionality
1638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWUP1         LL_C2_PWR_EnableWakeUpPin\n
1639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP2         LL_C2_PWR_EnableWakeUpPin\n
1640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP3         LL_C2_PWR_EnableWakeUpPin
1641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
1642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
1643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
1644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
1645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
1648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, WakeUpPin);
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 33


1650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable the WakeUp PINx functionality
1654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWUP1         LL_C2_PWR_EnableWakeUpPin\n
1655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP2         LL_C2_PWR_EnableWakeUpPin\n
1656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP3         LL_C2_PWR_EnableWakeUpPin
1657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
1658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
1659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
1660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
1661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
1664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, WakeUpPin);
1666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if the WakeUp PINx functionality is enabled
1670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWUP1         LL_C2_PWR_EnableWakeUpPin\n
1671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP2         LL_C2_PWR_EnableWakeUpPin\n
1672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         C2CR3        EWUP3         LL_C2_PWR_EnableWakeUpPin
1673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
1674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
1675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
1676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
1677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
1680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
1682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable pull-up and pull-down configuration for CPU2
1686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        APC           LL_C2_PWR_EnablePUPDCfg
1687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnablePUPDCfg(void)
1690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, PWR_C2CR3_APC);
1692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable pull-up and pull-down configuration for CPU2
1696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        APC           LL_C2_PWR_DisablePUPDCfg
1697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisablePUPDCfg(void)
1700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, PWR_C2CR3_APC);
1702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if pull-up and pull-down configuration is enabled for CPU2
1706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        APC           LL_C2_PWR_IsEnabledPUPDCfg
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 34


1707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledPUPDCfg(void)
1710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, PWR_C2CR3_APC) == (PWR_C2CR3_APC)) ? 1UL : 0UL);
1712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable wake-up power voltage detection with trigger for CPU2
1716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Wake-up power voltage detection status can be checked
1717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         using function @ref LL_PWR_IsActiveFlag_WPVD().
1718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWPVD         LL_C2_PWR_EnableWPVD
1719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_EnableWPVD(void)
1722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->C2CR3, PWR_C2CR3_EWPVD);
1724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable wake-up power voltage detection with trigger for CPU2
1728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWPVD         LL_C2_PWR_DisableWPVD
1729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_C2_PWR_DisableWPVD(void)
1732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->C2CR3, PWR_C2CR3_EWPVD);
1734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if wake-up power voltage detection is enabled with trigger for CPU2
1738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll C2CR3        EWPVD         LL_C2_PWR_IsEnabledWPVD
1739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_C2_PWR_IsEnabledWPVD(void)
1742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->C2CR3, PWR_C2CR3_EWPVD) == (PWR_C2CR3_EWPVD)) ? 1UL : 0UL);
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Enable CPU2 wake-up from low-power mode on illegal access occurrence
1748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Can be configured from CPU2 only
1749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SECCFGR      C2EWILA       LL_PWR_C2_EnableWakeUp_ILAC
1750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_C2_EnableWakeUp_ILAC(void)
1753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   SET_BIT(PWR->SECCFGR, PWR_SECCFGR_C2EWILA);
1755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Disable CPU2 wake-up from low-power mode on illegal access occurrence
1759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Can be configured from CPU2 only
1760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SECCFGR      C2EWILA       LL_PWR_C2_DisableWakeUp_ILAC
1761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_C2_DisableWakeUp_ILAC(void)
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 35


1764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   CLEAR_BIT(PWR->SECCFGR, PWR_SECCFGR_C2EWILA);
1766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Check if bit to wake-up CPU2 from low-power mode on illegal access
1770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         occurrence is set
1771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Can be used from CPU2 only
1772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SECCFGR      C2EWILA       LL_PWR_C2_IsEnabledWakeUp_ILAC
1773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0)
1774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_C2_IsEnabledWakeUp_ILAC(void)
1776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SECCFGR, PWR_SECCFGR_C2EWILA) == (PWR_SECCFGR_C2EWILA)) ? 1UL : 0UL);
1778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
1780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management FLAG_Management
1786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Internal Wake-up line Flag
1791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUFI          LL_PWR_IsActiveFlag_InternWU
1792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_InternWU(void)
1795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUFI) == (PWR_SR1_WUFI)) ? 1UL : 0UL);
1797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Wake-up Flag 3
1801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUF3          LL_PWR_IsActiveFlag_WU3
1802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU3(void)
1805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF3) == (PWR_SR1_WUF3)) ? 1UL : 0UL);
1807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Wake-up Flag 2
1811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUF2          LL_PWR_IsActiveFlag_WU2
1812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU2(void)
1815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF2) == (PWR_SR1_WUF2)) ? 1UL : 0UL);
1817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get Wake-up Flag 1
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 36


1821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WUF1          LL_PWR_IsActiveFlag_WU1
1822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU1(void)
1825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF1) == (PWR_SR1_WUF1)) ? 1UL : 0UL);
1827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flags
1831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
1832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
1835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 3
1841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF3         LL_PWR_ClearFlag_WU3
1842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU3(void)
1845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF3);
1847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 2
1851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF2         LL_PWR_ClearFlag_WU2
1852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU2(void)
1855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF2);
1857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 1
1861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
1862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
1865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
1867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether VDDA voltage is below or above PVM3 threshold
1871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          PVMO3         LL_PWR_IsActiveFlag_PVMO3
1872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVMO3(void)
1875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVMO3) == (PWR_SR2_PVMO3)) ? 1UL : 0UL);
1877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 37


1878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether VDD voltage is below or above the selected PVD threshold
1881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          PVDO          LL_PWR_IsActiveFlag_PVDO
1882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVDO(void)
1885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVDO) == (PWR_SR2_PVDO)) ? 1UL : 0UL);
1887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether supply voltage is below radio operating level.
1891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          RFEOLF        LL_PWR_IsActiveFlag_RFEOL
1892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFEOL(void)
1895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_RFEOLF) == (PWR_SR2_RFEOLF)) ? 1UL : 0UL);
1897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the regulator reached the selected voltage level
1901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Regulator voltage level is selected using function
1902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_SetRegulVoltageScaling().
1903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
1904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
1907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
1909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get wake-up power voltage detection flag
1913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          WPVD          LL_PWR_IsActiveFlag_WPVD
1914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WPVD(void)
1917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WPVDF) == (PWR_SR1_WPVDF)) ? 1UL : 0UL);
1919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear wake-up power voltage detection flag
1923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CWPVD         LL_PWR_ClearFlag_WPVD
1924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
1925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WPVD(void)
1927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWPVDF);
1929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get main LDO ready flag
1933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          LDORDY        LL_PWR_IsActiveFlag_LDORDY
1934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 38


1935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_LDORDY(void)
1937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_LDORDY) == (PWR_SR2_LDORDY)) ? 1UL : 0UL);
1939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the regulator is ready in main mode or is in low-power mode
1943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Return value "0" means the main regulator is ready and used. Return value "1" means the
1944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          REGLPF        LL_PWR_IsActiveFlag_REGLPF
1945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPF(void)
1948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPF) == (PWR_SR2_REGLPF)) ? 1UL : 0UL);
1950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the low-power regulator is ready after a power-on
1954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         reset, Standby or Shutdown mode.
1955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   If the Standby mode is entered while REGLPS bit is still
1956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         cleared (i.e. backup SRAM2 disabled), the wakeup time
1957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         from Standby mode may be increased.
1958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Take care, return value "0" means the regulator is ready. Return value "1" means the ou
1959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          REGLPS        LL_PWR_IsActiveFlag_REGLPS
1960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
1963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
1965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the main regulator is supplied from the LDO or SMPS
1969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         or directly supplied from VDD.
1970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   Return value "0" for main regulator supplied directly from VDD, return value "1" for ma
1971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          REGMRS        LL_PWR_IsActiveFlag_REGMRS
1972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGMRS(void)
1975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGMRS) == (PWR_SR2_REGMRS)) ? 1UL : 0UL);
1977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Indicate whether the flash memory is ready
1981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          FLASHRDY      LL_PWR_IsActiveFlag_FLASHRDY
1982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_FLASHRDY(void)
1985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
1986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_FLASHRDY) == (PWR_SR2_FLASHRDY)) ? 1UL : 0UL);
1987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
1988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
1991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 39


1992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management_SMPS FLAG management for SMPS
1994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
1995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
1996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
1997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
1998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get SMPS ready flag
1999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          SMPSRDY       LL_PWR_IsActiveFlag_SMPSRDY
2000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_SMPSRDY(void)
2003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
2005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
2009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management_Radio FLAG management for radio
2012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
2013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy flag (triggered status: wake-up event
2017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         or interruption occurred at least once. Can be cleared by software).
2018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   This radio busy triggered status is based on radio busy masked
2019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         signal.
2020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         To get radio busy masked signal current status, use function
2021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_IsActiveFlag_RFBUSYMS()
2022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          RFBUSYF       LL_PWR_IsActiveFlag_RFBUSY
2023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSY(void)
2026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WRFBUSYF) == (PWR_SR1_WRFBUSYF)) ? 1UL : 0UL);
2028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear radio busy flag
2032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
2033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
2034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
2036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
2038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy signal flag (current status:
2042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         set and cleared by hardware reflecting the real time signal level).
2043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   The get radio busy flag triggered status, use function
2044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_IsActiveFlag_RFBUSY()
2045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
2046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 40


2049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
2051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get radio busy masked signal flag (current status:
2055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         set and cleared by hardware reflecting the real time signal level).
2056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @note   The get radio busy flag triggered status, use function
2057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         @ref LL_PWR_IsActiveFlag_RFBUSY()
2058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
2059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
2062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
2064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @}
2068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management_Multicore FLAG management for multicore
2071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @{
2072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
2075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get CPU2 hold interrupt flag
2077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR1          C2HF          LL_PWR_IsActiveFlag_C2H
2078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit: 0 or 1 (CPU2 wake-up request and C2BOOT disabled,
2079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         (except for illegal access wake-up),
2080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         refer to function @ref LL_PWR_EnableBootC2()).
2081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2H(void)
2083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_C2HF) == (PWR_SR1_C2HF)) ? 1UL : 0UL);
2085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get CPU2 boot or wake-up request source information
2089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SR2          C2BOOTS       LL_PWR_IsActiveFlag_C2BOOTS
2090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit: 0 (boot from an illegal access event)
2091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   *         or 1 (boot from a SW request from function @ref LL_PWR_EnableBootC2()).
2092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2BOOTS(void)
2094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_C2BOOTS) == (PWR_SR2_C2BOOTS)) ? 1UL : 0UL);
2096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
2098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get system Stop 0 or Stop 1 flag for CPU1
2101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1STOPF       LL_PWR_IsActiveFlag_C1STOP
2102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1STOP(void)
2105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 41


2106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1STOPF) == (PWR_EXTSCR_C1STOPF)) ? 1UL : 0UL);
2107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get system Stop 2 flag for CPU1
2111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1STOP2F      LL_PWR_IsActiveFlag_C1STOP2
2112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1STOP2(void)
2115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1STOP2F) == (PWR_EXTSCR_C1STOP2F)) ? 1UL : 0UL);
2117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get system Standby flag for CPU1
2121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1SBF         LL_PWR_IsActiveFlag_C1SB
2122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1SB(void)
2125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
2127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get deepsleep mode for CPU1
2131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1DS          LL_PWR_IsActiveFlag_C1DS
2132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C1DS(void)
2135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1DS) == (PWR_EXTSCR_C1DS)) ? 1UL : 0UL);
2137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #if defined(DUAL_CORE)
2140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  System Stop 0 or Stop 1 flag for CPU2
2142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2STOPF       LL_PWR_IsActiveFlag_C2STOP
2143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2STOP(void)
2146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2STOPF) == (PWR_EXTSCR_C2STOPF)) ? 1UL : 0UL);
2148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  System Stop 2 flag for CPU2
2152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2STOP2F      LL_PWR_IsActiveFlag_C2STOP2
2153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2STOP2(void)
2156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2STOP2F) == (PWR_EXTSCR_C2STOP2F)) ? 1UL : 0UL);
2158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  System Standby flag for CPU2
2162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 42


2163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
2166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
2168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Get deepsleep mode for CPU2
2172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
2173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval State of bit (1 or 0).
2174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
2176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
2178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear CPU2 hold interrupt flag
2182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll SCR          CC2HF         LL_PWR_ClearFlag_C2H
2183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
2184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_C2H(void)
2186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CC2HF);
2188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** }
2189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** #endif
2190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** 
2191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** /**
2192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @brief  Clear standby and stop flags for CPU1
2193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
2194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   * @retval None
2195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   */
2196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
  82              		.loc 2 2196 22 view .LVU7
  83              	.LBB5:
2197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h **** {
2198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_pwr.h ****   WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
  84              		.loc 2 2198 3 view .LVU8
  85 0006 0120     		movs	r0, #1
  86 0008 024B     		ldr	r3, .L5
  87 000a C3F88800 		str	r0, [r3, #136]
  88              	.LBE5:
  89              	.LBE4:
 100:Core/Src/stm32_lpm_if.c **** 
 101:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterStopMode_2 */
 102:Core/Src/stm32_lpm_if.c **** 
 103:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterStopMode_2 */
 104:Core/Src/stm32_lpm_if.c ****   HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
  90              		.loc 1 104 3 view .LVU9
  91 000e FFF7FEFF 		bl	HAL_PWREx_EnterSTOP2Mode
  92              	.LVL1:
 105:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterStopMode_3 */
 106:Core/Src/stm32_lpm_if.c **** 
 107:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterStopMode_3 */
 108:Core/Src/stm32_lpm_if.c **** }
  93              		.loc 1 108 1 is_stmt 0 view .LVU10
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 43


  94 0012 08BD     		pop	{r3, pc}
  95              	.L6:
  96              		.align	2
  97              	.L5:
  98 0014 00040058 		.word	1476396032
  99              		.cfi_endproc
 100              	.LFE1165:
 102              		.section	.text.PWR_ExitSleepMode,"ax",%progbits
 103              		.align	1
 104              		.global	PWR_ExitSleepMode
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 108              		.fpu softvfp
 110              	PWR_ExitSleepMode:
 111              	.LFB1168:
 109:Core/Src/stm32_lpm_if.c **** 
 110:Core/Src/stm32_lpm_if.c **** void PWR_ExitStopMode(void)
 111:Core/Src/stm32_lpm_if.c **** {
 112:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_1 */
 113:Core/Src/stm32_lpm_if.c **** 
 114:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitStopMode_1 */
 115:Core/Src/stm32_lpm_if.c ****   /* Resume sysTick : work around for debugger problem in dual core */
 116:Core/Src/stm32_lpm_if.c ****   HAL_ResumeTick();
 117:Core/Src/stm32_lpm_if.c ****   /*Not retained periph:
 118:Core/Src/stm32_lpm_if.c ****     ADC interface
 119:Core/Src/stm32_lpm_if.c ****     DAC interface USARTx, TIMx, i2Cx, SPIx
 120:Core/Src/stm32_lpm_if.c ****     SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */
 121:Core/Src/stm32_lpm_if.c **** 
 122:Core/Src/stm32_lpm_if.c ****   /* Resume not retained USARTx and DMA */
 123:Core/Src/stm32_lpm_if.c ****   vcom_Resume();
 124:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_2 */
 125:Core/Src/stm32_lpm_if.c **** 
 126:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitStopMode_2 */
 127:Core/Src/stm32_lpm_if.c **** }
 128:Core/Src/stm32_lpm_if.c **** 
 129:Core/Src/stm32_lpm_if.c **** void PWR_EnterSleepMode(void)
 130:Core/Src/stm32_lpm_if.c **** {
 131:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_1 */
 132:Core/Src/stm32_lpm_if.c **** 
 133:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterSleepMode_1 */
 134:Core/Src/stm32_lpm_if.c ****   /* Suspend sysTick */
 135:Core/Src/stm32_lpm_if.c ****   HAL_SuspendTick();
 136:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_2 */
 137:Core/Src/stm32_lpm_if.c **** 
 138:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterSleepMode_2 */
 139:Core/Src/stm32_lpm_if.c ****   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 140:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_3 */
 141:Core/Src/stm32_lpm_if.c **** 
 142:Core/Src/stm32_lpm_if.c ****   /* USER CODE END EnterSleepMode_3 */
 143:Core/Src/stm32_lpm_if.c **** }
 144:Core/Src/stm32_lpm_if.c **** 
 145:Core/Src/stm32_lpm_if.c **** void PWR_ExitSleepMode(void)
 146:Core/Src/stm32_lpm_if.c **** {
 112              		.loc 1 146 1 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 44


 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 08B5     		push	{r3, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 3, -8
 119              		.cfi_offset 14, -4
 147:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitSleepMode_1 */
 148:Core/Src/stm32_lpm_if.c **** 
 149:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitSleepMode_1 */
 150:Core/Src/stm32_lpm_if.c ****   /* Resume sysTick */
 151:Core/Src/stm32_lpm_if.c ****   HAL_ResumeTick();
 120              		.loc 1 151 3 view .LVU12
 121 0002 FFF7FEFF 		bl	HAL_ResumeTick
 122              	.LVL2:
 152:Core/Src/stm32_lpm_if.c **** 
 153:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitSleepMode_2 */
 154:Core/Src/stm32_lpm_if.c **** 
 155:Core/Src/stm32_lpm_if.c ****   /* USER CODE END ExitSleepMode_2 */
 156:Core/Src/stm32_lpm_if.c **** }
 123              		.loc 1 156 1 is_stmt 0 view .LVU13
 124 0006 08BD     		pop	{r3, pc}
 125              		.cfi_endproc
 126              	.LFE1168:
 128              		.section	.text.PWR_ExitStopMode,"ax",%progbits
 129              		.align	1
 130              		.global	PWR_ExitStopMode
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	PWR_ExitStopMode:
 137              	.LFB1166:
 111:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_1 */
 138              		.loc 1 111 1 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 08B5     		push	{r3, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 3, -8
 145              		.cfi_offset 14, -4
 116:Core/Src/stm32_lpm_if.c ****   /*Not retained periph:
 146              		.loc 1 116 3 view .LVU15
 147 0002 FFF7FEFF 		bl	HAL_ResumeTick
 148              	.LVL3:
 123:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN ExitStopMode_2 */
 149              		.loc 1 123 3 view .LVU16
 150 0006 FFF7FEFF 		bl	vcom_Resume
 151              	.LVL4:
 127:Core/Src/stm32_lpm_if.c **** 
 152              		.loc 1 127 1 is_stmt 0 view .LVU17
 153 000a 08BD     		pop	{r3, pc}
 154              		.cfi_endproc
 155              	.LFE1166:
 157              		.section	.text.PWR_EnterSleepMode,"ax",%progbits
 158              		.align	1
 159              		.global	PWR_EnterSleepMode
 160              		.syntax unified
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 45


 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	PWR_EnterSleepMode:
 166              	.LFB1167:
 130:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_1 */
 167              		.loc 1 130 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 08B5     		push	{r3, lr}
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 3, -8
 174              		.cfi_offset 14, -4
 135:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_2 */
 175              		.loc 1 135 3 view .LVU19
 176 0002 FFF7FEFF 		bl	HAL_SuspendTick
 177              	.LVL5:
 139:Core/Src/stm32_lpm_if.c ****   /* USER CODE BEGIN EnterSleepMode_3 */
 178              		.loc 1 139 3 view .LVU20
 179 0006 0121     		movs	r1, #1
 180 0008 0020     		movs	r0, #0
 181 000a FFF7FEFF 		bl	HAL_PWR_EnterSLEEPMode
 182              	.LVL6:
 143:Core/Src/stm32_lpm_if.c **** 
 183              		.loc 1 143 1 is_stmt 0 view .LVU21
 184 000e 08BD     		pop	{r3, pc}
 185              		.cfi_endproc
 186              	.LFE1167:
 188              		.global	UTIL_PowerDriver
 189              		.section	.rodata.UTIL_PowerDriver,"a"
 190              		.align	2
 193              	UTIL_PowerDriver:
 194 0000 00000000 		.word	PWR_EnterSleepMode
 195 0004 00000000 		.word	PWR_ExitSleepMode
 196 0008 00000000 		.word	PWR_EnterStopMode
 197 000c 00000000 		.word	PWR_ExitStopMode
 198 0010 00000000 		.word	PWR_EnterOffMode
 199 0014 00000000 		.word	PWR_ExitOffMode
 200              		.text
 201              	.Letext0:
 202              		.file 3 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/machine/_de
 203              		.file 4 "/opt/homebrew/Cellar/arm-none-eabi-gcc/10.3-2021.07/gcc/arm-none-eabi/include/sys/_stdint
 204              		.file 5 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wle5xx.h"
 205              		.file 6 "Utilities/lpm/tiny_lpm/stm32_lpm.h"
 206              		.file 7 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal.h"
 207              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_pwr.h"
 208              		.file 9 "Core/Inc/usart_if.h"
 209              		.file 10 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_pwr_ex.h"
 210              		.file 11 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
ARM GAS  /var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32_lpm_if.c
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:16     .text.PWR_EnterOffMode:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:24     .text.PWR_EnterOffMode:0000000000000000 PWR_EnterOffMode
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:38     .text.PWR_ExitOffMode:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:45     .text.PWR_ExitOffMode:0000000000000000 PWR_ExitOffMode
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:58     .text.PWR_EnterStopMode:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:65     .text.PWR_EnterStopMode:0000000000000000 PWR_EnterStopMode
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:98     .text.PWR_EnterStopMode:0000000000000014 $d
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:103    .text.PWR_ExitSleepMode:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:110    .text.PWR_ExitSleepMode:0000000000000000 PWR_ExitSleepMode
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:129    .text.PWR_ExitStopMode:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:136    .text.PWR_ExitStopMode:0000000000000000 PWR_ExitStopMode
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:158    .text.PWR_EnterSleepMode:0000000000000000 $t
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:165    .text.PWR_EnterSleepMode:0000000000000000 PWR_EnterSleepMode
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:193    .rodata.UTIL_PowerDriver:0000000000000000 UTIL_PowerDriver
/var/folders/9y/n02fl3g16gnf7ppy14xghdy80000gn/T//ccej5Ent.s:190    .rodata.UTIL_PowerDriver:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_SuspendTick
HAL_PWREx_EnterSTOP2Mode
HAL_ResumeTick
vcom_Resume
HAL_PWR_EnterSLEEPMode
